<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Machine Learning Exercises In Python, Part3</title>
      <link href="/2020/07/05/44205.html"/>
      <url>/2020/07/05/44205.html</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="Machine-Learning-Exercises-In-Python-Part3"><a href="#Machine-Learning-Exercises-In-Python-Part3" class="headerlink" title="Machine Learning Exercises In Python, Part3"></a>Machine Learning Exercises In Python, Part3</h1><h2 id="第一部分：尝试使用逻辑回归，没有正则化项"><a href="#第一部分：尝试使用逻辑回归，没有正则化项" class="headerlink" title="第一部分：尝试使用逻辑回归，没有正则化项"></a>第一部分：尝试使用逻辑回归，没有正则化项</h2><p>导入数据并查看前5行</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> ospath <span class="token operator">=</span> r<span class="token string">'D:\ML\data\ex2data1.txt'</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path<span class="token punctuation">,</span> header<span class="token operator">=</span>None<span class="token punctuation">,</span> names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Exam 1'</span><span class="token punctuation">,</span> <span class="token string">'Exam 2'</span><span class="token punctuation">,</span> <span class="token string">'Admitted'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2020/07/05/aG7ZkFTDeUKx5Lj.png" alt=""></p><p>使用 Exam 1 和 Exam 2 作为横纵坐标，绘制散点图。根据类别的不同使用不同的点表示。</p><pre class=" language-python"><code class="language-python">positive <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'Admitted'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>negative <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'Admitted'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>positive<span class="token punctuation">[</span><span class="token string">'Exam 1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> positive<span class="token punctuation">[</span><span class="token string">'Exam 2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Admitted'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>negative<span class="token punctuation">[</span><span class="token string">'Exam 1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> negative<span class="token punctuation">[</span><span class="token string">'Exam 2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'x'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Not Admitted'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#设置图例的位置</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Exam 1 Score'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Exam 2 Score'</span><span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5f02d6fa14195aa594e90502.jpg" alt=""></p><p>注意sigmoid函数的使用方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sigmoid</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span>nums <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> step<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#设置定义域，nums是ndarry类型</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> sigmoid<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#绘制图像，参数是定义域，函数图像，图像的颜色，r表示红色</span></code></pre><p><img src="https://pic.downk.cc/item/5f02d74414195aa594e921f8.jpg" alt=""></p><p>给出逻辑回归的正则化代价函数：</p><p>$$ J(\Theta)=\frac{1}{m}\prod_{i=1}^{m}(-y^{(i)}log(h_{\Theta}(x^{(i)}))-(1-y^{(i)})log(1-h_{\Theta}(x^{(i)}))+\frac{\lambda }{2m}\sum_{j=1}^{n}\Theta _{j}^{2} $$</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#待见函数参照公式进行编写（这里没有添加正则化项）</span><span class="token keyword">def</span> <span class="token function">cost</span><span class="token punctuation">(</span>theta<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    X <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>X<span class="token punctuation">)</span>    y <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    theta <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>theta<span class="token punctuation">)</span>    first <span class="token operator">=</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span><span class="token operator">-</span>y<span class="token punctuation">,</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>sigmoid<span class="token punctuation">(</span>X <span class="token operator">*</span> theta<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    second <span class="token operator">=</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> sigmoid<span class="token punctuation">(</span>X <span class="token operator">*</span> theta<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>first <span class="token operator">+</span> second<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> len<span class="token punctuation">(</span>X<span class="token punctuation">)</span></code></pre><p>这里先介绍一下 numpy.matrix使用方法：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#矩阵的点乘</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">*</span> b<span class="token punctuation">.</span>T<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#标准的矩阵乘法</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>T <span class="token operator">*</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#标准的矩阵乘法</span></code></pre><p><img src="https://pic.downk.cc/item/5f02d9bf14195aa594ea3515.jpg" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#插入一列，使得处理更加的方便</span>data<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'Ones'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>cols <span class="token operator">=</span> data<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>X <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span>cols<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 注意，这里的 X，y不是numpy.matrix类型</span>y <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> cols<span class="token number">-1</span><span class="token punctuation">:</span>cols<span class="token punctuation">]</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#转换成numpy.matrix类型</span>X <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>X<span class="token punctuation">.</span>values<span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>y<span class="token punctuation">.</span>values<span class="token punctuation">)</span></code></pre><p>初始化未知的参数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>cols<span class="token punctuation">)</span>theta <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>cols<span class="token number">-1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span></code></pre><p>查看X, y, theta的类型和大小。其中，X,y是二维数组，theta是一维数组。</p><p><img src="https://pic.downk.cc/item/5f02db7514195aa594ead769.jpg" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 演示ravel函数作用</span>t <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>t<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5f02e01b14195aa594ec8aba.jpg" alt="函数运行结果"></p><p>下面给出梯度下降函数的公式</p><p>$$<br>\frac{\partial}{\partial \Theta_{j}}J(\Theta)=\frac{1}{m}\sum_{i=1}^{m}[h_{\Theta}(x^{(i)})-y^{(i)}]x_{j}^{(i)}<br>$$</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#计算梯度</span><span class="token keyword">def</span> <span class="token function">gradient</span><span class="token punctuation">(</span>theta<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    theta <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>theta<span class="token punctuation">)</span>    X <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>X<span class="token punctuation">)</span>    y <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    parameter_nums <span class="token operator">=</span> int<span class="token punctuation">(</span>theta<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#ravle函数作用是把一个多维数组转换成一维数组</span>    grad <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>parameter_nums<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#保存梯度，返回值</span>    bias <span class="token operator">=</span> sigmoid<span class="token punctuation">(</span>X <span class="token operator">*</span> theta<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token operator">-</span> y    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>parameter_nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        grad<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>bias<span class="token punctuation">,</span> X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>j<span class="token punctuation">:</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> len<span class="token punctuation">(</span>X<span class="token punctuation">)</span>    <span class="token keyword">return</span> grad</code></pre><p>代价函数、梯度计算方法、数据都准备好了。下面需要进行梯度下降。在Octave中一般使用fminunc方法进行计算代价函数的最优参数。这里使用Scipy中的优化API做同样的事情，可以用SciPy的“optimize”命名空间来做同样的事情。  </p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scipy<span class="token punctuation">.</span>optimize <span class="token keyword">as</span> optresult <span class="token operator">=</span> opt<span class="token punctuation">.</span>fmin_tnc<span class="token punctuation">(</span>func<span class="token operator">=</span>cost<span class="token punctuation">,</span> x0<span class="token operator">=</span>theta<span class="token punctuation">,</span> fprime<span class="token operator">=</span>gradient<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>cost<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">)</span></code></pre><p>运行结果：0.20349770158947425</p><p>预测函数的实现：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#预测函数</span><span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>theta<span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token punctuation">:</span>    probability <span class="token operator">=</span> sigmoid<span class="token punctuation">(</span>X <span class="token operator">*</span> theta<span class="token punctuation">.</span>T<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span> <span class="token number">1</span> <span class="token keyword">if</span> x <span class="token operator">>=</span> <span class="token number">0.5</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> probability<span class="token punctuation">]</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#计算一下准确率</span>theta_min <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>predications <span class="token operator">=</span> predict<span class="token punctuation">(</span>theta_min<span class="token punctuation">,</span> X<span class="token punctuation">)</span>correct <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">and</span> b<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">and</span> b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token keyword">in</span> zip<span class="token punctuation">(</span>predications<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">]</span>accuracy <span class="token operator">=</span> sum<span class="token punctuation">(</span>correct<span class="token punctuation">)</span> <span class="token operator">/</span> len<span class="token punctuation">(</span>correct<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'accuracy = {0}%'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>accuracy <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果：accuracy = 89.0%</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#数据的散点图</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>positive<span class="token punctuation">[</span><span class="token string">'Exam 1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> positive<span class="token punctuation">[</span><span class="token string">'Exam 2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Admitted'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>negative<span class="token punctuation">[</span><span class="token string">'Exam 1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> negative<span class="token punctuation">[</span><span class="token string">'Exam 2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'x'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Not Admitted'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#设置图例的位置</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Exam 1 Score'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Exam 2 Score'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#决策边界</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> step<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>y <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>theta_min<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> x <span class="token operator">*</span> theta_min<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> theta_min<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Prediction'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#绘制函数图像</span></code></pre><p><img src="https://pic.downk.cc/item/5f04098f14195aa5946d5436.jpg" alt="决策边界"></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#另外一种计算最优参数的方法，这里使用的是高级优化方法。只需传入cost函数，已经所求的变量theta，和梯度。cost函数定义变量时变量tehta要放在第一个，若cost函数只返回cost，则设置fprime=gradient。</span><span class="token keyword">import</span> scipy<span class="token punctuation">.</span>optimize <span class="token keyword">as</span> optres <span class="token operator">=</span> opt<span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>fun<span class="token operator">=</span>cost<span class="token punctuation">,</span> x0<span class="token operator">=</span>theta<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'TNC'</span><span class="token punctuation">,</span> jac<span class="token operator">=</span>gradient<span class="token punctuation">)</span>res<span class="token comment" spellcheck="true"># help(opt.minimize) </span><span class="token comment" spellcheck="true"># res.x  # final_theta</span></code></pre><h2 id="第二部分：使用正则化的逻辑回归"><a href="#第二部分：使用正则化的逻辑回归" class="headerlink" title="第二部分：使用正则化的逻辑回归"></a>第二部分：使用正则化的逻辑回归</h2><blockquote><p><strong>Problem Statement</strong><br>In this part of the exercise, we will implement regularized logistic regression to predict whether microchips from a fabrication plant passes quality assurance (QA). During QA,e ach microchip goes through various tests to ensure it is functioning correctly.Suppose we are the product manager of the factory and we have the rest results for some microchips on two different tests. From these two tests, we would like to determine whether the microchips should be accepted or rejected. To help us make a decision, we have a dataset of test results on past microchips, from which we can build a logistic regression model.</p></blockquote><p>现在已经实现了逻辑回归，下面就是使用 <strong>正则化</strong> 改进算法：Regularization是cost function中的一项，它使得算法prefer to “<strong><code>simpler</code></strong>“。它能够帮助减少overfitting和提高模型的泛化能力。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> ospath <span class="token operator">=</span> r<span class="token string">'D:\ML\data\ex2data2.txt'</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path<span class="token punctuation">,</span> header<span class="token operator">=</span>None<span class="token punctuation">,</span> names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Test1'</span><span class="token punctuation">,</span> <span class="token string">'Test2'</span><span class="token punctuation">,</span> <span class="token string">'Accepted'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>进行数据的可视化：</p><pre class=" language-python"><code class="language-python">positive <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'Accepted'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>negative <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'Accepted'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>positive<span class="token punctuation">[</span><span class="token string">'Test1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> positive<span class="token punctuation">[</span><span class="token string">'Test2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Accepted'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>negative<span class="token punctuation">[</span><span class="token string">'Test1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> negative<span class="token punctuation">[</span><span class="token string">'Test2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'x'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Rejected'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#设置图例的位置</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Test1 Score'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Test2 Score'</span><span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5f04648714195aa594939037.jpg" alt=""></p><p>这里的数据比之前复杂了很多。可以注意到，没有Linear decision boundary 在数据集上可以表现的很好。一种解决这种逻辑回归等线性技术的方法是使用原来的特征进行新的特征的构造。可以尝试构造一系列多项式特征。把原来的两个特征改造成更高维度的特征向量，这样处理以后使用逻辑回归就会产生更加复杂的decision boundary并且表现出Non-Linear。</p><pre class=" language-python"><code class="language-python">degree <span class="token operator">=</span> <span class="token number">5</span>x1 <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Test 1'</span><span class="token punctuation">]</span>x2 <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Test 2'</span><span class="token punctuation">]</span>data<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Ones'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> degree<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#添加特征</span>        data<span class="token punctuation">[</span><span class="token string">'F'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>power<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> i<span class="token operator">-</span>j<span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>power<span class="token punctuation">(</span>x2<span class="token punctuation">,</span> j<span class="token punctuation">)</span> data<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">'Test 1'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#删除原始特征</span>data<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">'Test 2'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#删除原始特征</span></code></pre><p><img src="https://pic.downk.cc/item/5f031eac14195aa594099154.jpg" alt="构造之后的数据集"></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#定义代价函数</span><span class="token keyword">def</span> <span class="token function">costReg</span><span class="token punctuation">(</span>theta<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> learningRate<span class="token punctuation">)</span><span class="token punctuation">:</span>    theta <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>theta<span class="token punctuation">)</span>    X <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>X<span class="token punctuation">)</span>    y <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    first <span class="token operator">=</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span><span class="token operator">-</span>y<span class="token punctuation">,</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>sigmoid<span class="token punctuation">(</span>X <span class="token operator">*</span> theta<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    second <span class="token operator">=</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>sigmoid<span class="token punctuation">(</span>X <span class="token operator">*</span> theta<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    reg <span class="token operator">=</span> <span class="token punctuation">(</span>learningRate <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>np<span class="token punctuation">.</span>power<span class="token punctuation">(</span>theta<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span>theta<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#偏差项的参数不进行惩罚</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>first <span class="token operator">+</span> second<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> reg<span class="token comment" spellcheck="true">#定义梯度计算的函数</span><span class="token keyword">def</span> <span class="token function">gradientReg</span><span class="token punctuation">(</span>theta<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> learningRate<span class="token punctuation">)</span><span class="token punctuation">:</span>    theta <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>theta<span class="token punctuation">)</span>    X <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>X<span class="token punctuation">)</span>    y <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    parameter_nums <span class="token operator">=</span> int<span class="token punctuation">(</span>theta<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    grad <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>parameter_nums<span class="token punctuation">)</span>    bias <span class="token operator">=</span> sigmoid<span class="token punctuation">(</span>X <span class="token operator">*</span> theta<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token operator">-</span> y    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>parameter_nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        term <span class="token operator">=</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>bias<span class="token punctuation">,</span> X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            grad<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>term<span class="token punctuation">)</span> <span class="token operator">/</span> len<span class="token punctuation">(</span>X<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            grad<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>term<span class="token punctuation">)</span> <span class="token operator">/</span> len<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>learningRate <span class="token operator">/</span> len<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> theta<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> grad<span class="token keyword">def</span> <span class="token function">sigmoid</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#预测函数</span><span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>theta<span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token punctuation">:</span>    theta <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>theta<span class="token punctuation">)</span>    X <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>X<span class="token punctuation">)</span>    probability <span class="token operator">=</span> sigmoid<span class="token punctuation">(</span>X <span class="token operator">*</span> theta<span class="token punctuation">.</span>T<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span> <span class="token number">1</span> <span class="token keyword">if</span> x <span class="token operator">>=</span> <span class="token number">0.5</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> probability<span class="token punctuation">]</span></code></pre><p>可以注意到，这里添加了一个正则项。随着参数的增大，添加到代价函数的惩罚也会增加。同样注意到，这里添加了一个学习率learningRate，它决定以何种程度对参数进行惩罚，如果learningRate特别大，那么预测函数会退化。</p><pre class=" language-python"><code class="language-python">cols <span class="token operator">=</span> data<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>X <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span> <span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span>cols<span class="token punctuation">]</span>y <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span> <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>X <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>X<span class="token punctuation">.</span>values<span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>y<span class="token punctuation">.</span>values<span class="token punctuation">)</span>theta <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>cols <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>learningRate <span class="token operator">=</span> <span class="token number">1</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scipy<span class="token punctuation">.</span>optimize <span class="token keyword">as</span> optresult <span class="token operator">=</span> opt<span class="token punctuation">.</span>fmin_tnc<span class="token punctuation">(</span>func<span class="token operator">=</span>costReg<span class="token punctuation">,</span> x0<span class="token operator">=</span>theta<span class="token punctuation">,</span> fprime<span class="token operator">=</span>gradientReg<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> learningRate<span class="token punctuation">)</span><span class="token punctuation">)</span>result</code></pre><pre class=" language-python"><code class="language-python">theta_min <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>predications <span class="token operator">=</span> predict<span class="token punctuation">(</span>theta_min<span class="token punctuation">,</span> X<span class="token punctuation">)</span>correct <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">and</span> b<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">and</span> b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token keyword">in</span> zip<span class="token punctuation">(</span>predications<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">]</span>accuracy <span class="token operator">=</span> sum<span class="token punctuation">(</span>correct<span class="token punctuation">)</span> <span class="token operator">/</span> len<span class="token punctuation">(</span>correct<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'accuracy = {0}%'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>accuracy <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>theta_min<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 吴恩达机器学习课程 </tag>
            
            <tag> Machine Learning Exercises </tag>
            
            <tag> Logistic Regression </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习 Neural Networks:Learning</title>
      <link href="/2020/07/04/40760.html"/>
      <url>/2020/07/04/40760.html</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="机器学习-Neural-Networks-Learning"><a href="#机器学习-Neural-Networks-Learning" class="headerlink" title="机器学习 Neural Networks:Learning"></a>机器学习 Neural Networks:Learning</h1><h2 id="9-1-代价函数（Cost-Function）"><a href="#9-1-代价函数（Cost-Function）" class="headerlink" title="9.1 代价函数（Cost Function）"></a>9.1 代价函数（Cost Function）</h2><p>假设神经网络的训练样本共有 m 个，每个包含一组输入 x 和一组输出信号 y ，L 表示神经网络层数，\( S_{I} \)表示第I层的处理单元个数，\( S_{L} \)表示最后一层中处理单元的个数。  </p><p>把神经网络的分类定义为两种情况：二类分类和多类分类</p><ul><li>二类分类：\( S_{L}=1 \)，y=0 or 1 表示是哪一类</li><li>K类分类：\( S_{L}=k \)，\( y_{i}=1 \)表示是第 i 类（ k &gt;= 3 ）</li></ul><p><img src="https://i.loli.net/2020/07/04/8sRXKSreDBT3bdk.png" alt=""></p><p>回顾一下逻辑回归的代价函数： </p><p>$$<br>J(\Theta)==-\frac{1}{m}\prod_{i=1}^{m}(y^{(i)}log(h_{\Theta}(x^{(i)}))+(1-y^{(i)})log(1-h_{\Theta}(x^{(i)}))+\frac{\lambda }{2m}\sum_{j=1}^{n}\Theta_{j}^{2}<br>$$</p><p>在逻辑回归中，只有一个输出变量。但是在神经网络当中，可以有很多输出变量，这里的输出 \( h_{\Theta}(x) \)是一个K维向量，并且训练集中的因变量也是同样维度的一个向量。神经网络的代价函数比逻辑回归更加复杂一些。<br>$$ h_{\Theta}(x)\in \mathbb{R}^{K} $$</p><p>$$ (h_{\Theta}(x))_{i}=i^{th} output $$</p><p>$$ J(\Theta)=-\frac{1}{m}[\sum_{i=1}^{m}\sum_{k=1}^{K}y_{k}^{(i)}log(h_{\Theta}(x^{(i)}))+(1-y_{k}^{(i)})log(1-h_{\Theta}(x^{(i)}))]+ \frac{\lambda }{2m}\sum_{l=1}^{L-1}\sum_{i=1}^{S_{l}}\sum_{j=1}^{S_{l+1}}(\Theta_{ji}^{(l)})^{2} $$</p><p>这里的思想和逻辑回归的代价函数的思想相同，这里希望通过代价函数来观察算法的预测结果和真实情况的误差。不同之处在于，对于每一行特征，我们会给出 K 个预测值。</p><p>正则化的部分需要排除每一层的 \( \Theta_{0} \) 。最里面的循环 j 循环所有的行，由 \( S_{l+1} \) 层的激活单元数决定；循环 i 则循环所有的列，由 \( S_{l} \) 层的激活单元数决定。</p><h2 id="9-2-反向传播算法（Backpropagation-Algorithm）"><a href="#9-2-反向传播算法（Backpropagation-Algorithm）" class="headerlink" title="9.2 反向传播算法（Backpropagation Algorithm）"></a>9.2 反向传播算法（Backpropagation Algorithm）</h2><p>之前使用神经网络预测结果的时候使用了一种正向传播算法，从第一层开始正向一层一层进行计算，直到最后一层 \( h_{\Theta}(x) \)。</p><p>现在，为了计算代价函数的偏导数 \( \frac{\partial}{\partial \Theta_{ij}^{(l)}}J(\Theta) \)， 需要使用一种反向传播算法，也就是首先计算最后一层的误差，然后再一层一层反向求出各层的误差，直到倒数第二层。  </p><p>假设训练集只有一个样本 \( (x^{(1)},y^{(1)}) \)，神经网络模型是一个四层的神经网络。其中，\( K=4,S_{L}=4,L=4 \)。  </p><p>前向传播算法： </p><p><img src="https://i.loli.net/2020/07/04/ItXMRrx1Qpw495L.png" alt=""></p><p><img src="https://i.loli.net/2020/07/04/YzTuFpwOtrlygQ9.png" alt="四层神经网络"></p><p>这里先从最后一层的误差计算，最后一层的误差是激活单元的预测\( a^{(4)} \)和实际值\( y^{k} \)之间的误差（k = 1 : k）。这里使用\( \delta \)表示误差，则：\( \delta ^{(4)}=a^{(4)}-y \) 是第四层的误差。下面利用这个第四层的误差计算前一层的误差：</p><p>$$ \delta^{(3)}=(\Theta^{(3)})^{T}\delta^{(4)}*g’(z^{(3)})=( \Theta^{(3)})^{T} \delta ^{(4)} * [a^{(3)} \cdot * (1-a^{(3)})] $$</p><p>$$ \delta^{(2)}=(\Theta^{(2)})^{T}\delta^{(3)}*g’(z^{(2)})=( \Theta^{(2)})^{T} \delta ^{(3)} * [a^{(2)} \cdot *(1-a^{(2)})] $$</p><p>注意，因此神经网络的第一层是输入变量，不存在误差。在有了所有误差的表达式之后，此时可以计算代价函数的偏导数了。这里假设 \( \lambda = 0 \) ，即不做任何正则化处理时候有：<br>$$<br>\frac{\partial }{\partial \Theta_{ij}^{(l)}}J(\Theta)=a_{j}^{(l)} \delta_{i}^{(l+1)}<br>$$</p><p>上下标含义：</p><ul><li>\( l \) 表示当前所计算的层次</li><li>\( j \) 表示当前所计算的层次中的激活单元下标，也是下一层第 j 个输入变量的下标</li><li>\( i \) 表示下一层中误差单元的下标，也是受到权重矩阵中的第 i 行影响的下一层中的误差单元的下标</li></ul><p>在上面的情况中，需要计算每一层的误差单元来计算代价函数的偏导数。在更为一般的情况当中，如果考虑正则化，并且训练集是一个特征矩阵而不是向量。我们同样需要计算每一层的误差单元，但是需要为整个训练集计算误差单元。此时的误差单元也是一个矩阵，可以使用 \( \Delta  \) 表示。这里使用 \( \Delta _{ij}^{(l)} \) 表示误差矩阵第 \( l \) 层中的第 i 个激活单元收到第 j 个参数影响而导致的误差。</p><p><img src="https://i.loli.net/2020/07/05/4mpuLnkDTC7A5X9.png" alt="反向传播算法"></p><h2 id="9-3-反向传播算法的直观理解（Backpropagation-Intuition）"><a href="#9-3-反向传播算法的直观理解（Backpropagation-Intuition）" class="headerlink" title="9.3 反向传播算法的直观理解（Backpropagation Intuition）"></a>9.3 反向传播算法的直观理解（Backpropagation Intuition）</h2><h2 id="9-4-实现注意：展开参数（Implementation-Note-Unrolling-Parameters）"><a href="#9-4-实现注意：展开参数（Implementation-Note-Unrolling-Parameters）" class="headerlink" title="9.4 实现注意：展开参数（Implementation Note:Unrolling Parameters）"></a>9.4 实现注意：展开参数（Implementation Note:Unrolling Parameters）</h2><h2 id="9-5-梯度检验（Gradient-Checking）"><a href="#9-5-梯度检验（Gradient-Checking）" class="headerlink" title="9.5 梯度检验（Gradient Checking）"></a>9.5 梯度检验（Gradient Checking）</h2><h2 id="9-6-随机初始化（Random-Initialization）"><a href="#9-6-随机初始化（Random-Initialization）" class="headerlink" title="9.6 随机初始化（Random Initialization）"></a>9.6 随机初始化（Random Initialization）</h2><h2 id="9-7-综合起来（Putting-It-Together）"><a href="#9-7-综合起来（Putting-It-Together）" class="headerlink" title="9.7 综合起来（Putting It Together）"></a>9.7 综合起来（Putting It Together）</h2><h2 id="9-8-自主驾驶（Autonomous-Driving）"><a href="#9-8-自主驾驶（Autonomous-Driving）" class="headerlink" title="9.8 自主驾驶（Autonomous Driving）"></a>9.8 自主驾驶（Autonomous Driving）</h2>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 吴恩达机器学习课程 </tag>
            
            <tag> Neural Networks:Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习 Neural Networks:Representation</title>
      <link href="/2020/07/02/4729.html"/>
      <url>/2020/07/02/4729.html</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="机器学习-Neural-Networks-Representation"><a href="#机器学习-Neural-Networks-Representation" class="headerlink" title="机器学习 Neural Networks:Representation"></a>机器学习 Neural Networks:Representation</h1><h2 id="8-1-非线性假设（Non-linear-Hypotheses）"><a href="#8-1-非线性假设（Non-linear-Hypotheses）" class="headerlink" title="8.1 非线性假设（Non-linear Hypotheses）"></a>8.1 非线性假设（Non-linear Hypotheses）</h2><p>线性回归和逻辑回归存在缺点：当 <strong>特征数量</strong> 多时候，<strong>计算量</strong> 非常巨大。</p><p><img src="https://i.loli.net/2020/07/02/dfArX2paOS6HgmW.png" alt="只含有特征X_1和X_2的例子"></p><p>当只包含特征X_1和X_2时，使用的X_1和X_2的多次项式进行预测的时候可以应用的很好。使用非线性的多次项式能够很好的建立分类模型。如果特征非常的多，假设有100个特征，我们希望建立一个多项式的模型，但是特征组合的数量会非常的巨大，即使用最简单的两两组合的方式，也会得到大约5000个组合而形成的特征。<br>$$ x_{1}x_{2}+x_{1}x_{3}+…+x_{2}x_{3}+x_{2}x_{4}+… $$<br>因此，这对于一般的逻辑回归算法来说需要计算的特征太多了。  </p><p>假设希望训练一个模型来识别视觉对象，例如识别一个图片上的对象是否是一辆小汽车？那么如何操作呢？<br>可以采用的一种方法是：首先找到很多包含小汽车的图片还有不含有小汽车的图片，然后利用将图片上的每一个像素的值作为作为特征。  </p><p>如果使用灰度图片，每个像素则只有一个值（非RGB值），我们可以选取图片上两个不同的位置上的两个像素作为特征，使用逻辑回归算法训练一个模型，利用这两个特征进行判别是否是小汽车：</p><p><img src="https://i.loli.net/2020/07/03/m3f14ZKBOezi9gR.png" alt=""></p><p>假设使用 50 x 50 像素的图片，并且把所有的像素作为特征，则共有2500个特征。若进一步使用两两组合构成一个多项式模型，则有 2500 * 2500 / 2 个特征。此时使用普通的逻辑回归模型不能有效的处理这么多的特征，因此神经网络出现。</p><h2 id="8-2-神经元和大脑（Neurons-and-the-Brain）"><a href="#8-2-神经元和大脑（Neurons-and-the-Brain）" class="headerlink" title="8.2 神经元和大脑（Neurons and the Brain）"></a>8.2 神经元和大脑（Neurons and the Brain）</h2><p>思考：大脑使得我们可以学习数学，学习做微积分，大脑能够处理各种不同的事情。如果我们想要模仿大脑，需要写很多不同的程序去模拟大脑的功能。但是，是否大脑处理的方法，只需要一个 <strong>单一的学习算法</strong> 就可以呢？  </p><p>你可以把几乎任何传感器接入大脑当中，大脑的学习算法可以找到学习数据的方法，并且处理这些数据。从某种意义上说，如果我们找到了大脑的学习算法，然后在计算机上执行大脑的学习算法或者类似的算法，也许就是向人工智能迈进的最好的尝试。人工智能的梦想就是：有一天能制造出真正的智能机器。  </p><p>神经网络可能为我们打开一扇进入遥远的人工智能梦的窗户。</p><h2 id="8-3-模型表示I（Model-Representation）"><a href="#8-3-模型表示I（Model-Representation）" class="headerlink" title="8.3 模型表示I（Model Representation）"></a>8.3 模型表示I（Model Representation）</h2><p>神经网络模型建立在很多的神经元之上，每一个神经元也是一个学习模型。神经元，也叫激活单元（activation unit），使用一些特征作为输入，并且提供一个输出。下面给出一个以逻辑回归模型为自身学习模型的神经元。在神经网络当中，参数可以称为权重（weight）。</p><p><img src="https://i.loli.net/2020/07/04/hKe9nfZrzuwFljM.png" alt=""></p><p>设计一个简单的神经网络，如下：</p><p><img src="https://i.loli.net/2020/07/04/Uu6NPxFAjgXdoyt.png" alt=""></p><p>其中是\( x_{1},x_{2},x_{3} \)输入单元（input units），用来输入原始数据。\( a_{1},a_{2},a_{3} \)是中间单元，负责进行数据的处理。最后一层是输出单元，负责计算 \( h_{\Theta}(x) \)。  </p><p>神经网络模型是很多神经元按照不同层级组织起来的网络，每一层的输出变量都是下面一层的输入变量。下面给出一个三层的神经网络，第一层是输入层（<strong>Input Layer</strong>），最后一层是输出层（<strong>Output Layer</strong>），中间的一层是隐藏层（<strong>Hidden Layers</strong>）。这里给每一层都添加一个偏差单元（<strong>Bias Unit</strong>）。</p><p><img src="https://i.loli.net/2020/07/04/OxwliU1gb5QBsnF.png" alt=""></p><p>这里神经网络的层数是从1开始，不是从0开始计数。 \( a_{i}^{(j)} \)表示第 j 层的第 i 个激活单元。\( \Theta^{(j)} \)表示从第 j 层映射到第 j + 1 层时候的权重矩阵。注意，是权重矩阵，不是向量。\( \Theta^{(j)} \)的维度是以第 j 层的激活单元的数量加一作为列数，以第 j + 1 层激活单元数量为行数的矩阵。这里图中的 \( \Theta^{(1)} \)的维度是 3 X 4 ，\( \Theta^{(2)} \)的维度是 1 X 4 。下面给出\( \Theta^{(1)} \)的权重矩阵。<br>$$<br>\begin{bmatrix}<br>\Theta_{10} &amp; \Theta_{11} &amp; \Theta_{12} &amp; \Theta_{13}\\<br>\Theta_{20} &amp; \Theta_{21} &amp; \Theta_{22} &amp; \Theta_{23}\\<br>\Theta_{30} &amp; \Theta_{31} &amp; \Theta_{32} &amp; \Theta_{33}\\<br>\end{bmatrix}<br>$$<br>对于图中的三层神经网络模型，激活单元和输出表达式如下(这里的g函数表示对向量中的每一个元素使用sigmoid函数进行处理)：<br>$$<br>\begin{bmatrix}<br>a_{0}^{(2)}\\<br>a_{1}^{(2)}\\<br>a_{2}^{(2)}\\<br>a_{3}^{(2)}\\<br>\end{bmatrix}=g(\begin{bmatrix}<br>\Theta_{10}^{(1)} &amp; \Theta_{11}^{(1)} &amp; \Theta_{12}^{(1)} &amp; \Theta_{13}^{(1)}\\<br>\Theta_{20}^{(1)} &amp; \Theta_{21}^{(1)} &amp; \Theta_{22}^{(1)} &amp; \Theta_{23}^{(1)}\\<br>\Theta_{30}^{(1)} &amp; \Theta_{31}^{(1)} &amp; \Theta_{32}^{(1)} &amp; \Theta_{33}^{(1)}\\<br>\end{bmatrix} * \begin{bmatrix}<br>x_{0}\\<br>x_{1}\\<br>x_{2}\\<br>x_{3}\\<br>\end{bmatrix})<br>$$</p><p>$$<br>h_{\Theta }(x)=g(\begin{bmatrix}<br>\Theta_{10}^{(2)}  &amp; \Theta_{11}^{(2)} &amp; \Theta_{12}^{(2)} &amp; \Theta_{13}^{(2)}\\<br>\end{bmatrix}*\begin{bmatrix}<br>a_{0}^{(2)}\\<br>a_{1}^{(2)}\\<br>a_{2}^{(2)}\\<br>a_{3}^{(2)}\\<br>\end{bmatrix})<br>$$</p><p>上面只是把特征矩阵中的一行（代表一个训练实例）输入到神经网络，而我们需要把整个训练集都输入到神经网络算法来学习模型。对于前面简单的三层神经网络模型，每一个 a 都是有前面所有的 x 以及对应的权重决定的。  </p><p>人们把从左到右的算法成为前向传播算法（Forward Propagation）。</p><h2 id="8-4-模型表示II（Model-Prepresentation）"><a href="#8-4-模型表示II（Model-Prepresentation）" class="headerlink" title="8.4 模型表示II（Model Prepresentation）"></a>8.4 模型表示II（Model Prepresentation）</h2><p>对于Forward Propagation，使用向量化计算的方法比使用循环计算简洁。<br>$$<br>\begin{bmatrix}<br>a_{0}^{(2)}\\<br>a_{1}^{(2)}\\<br>a_{2}^{(2)}\\<br>a_{3}^{(2)}\\<br>\end{bmatrix}=g(\begin{bmatrix}<br>\Theta_{10}^{(1)} &amp; \Theta_{11}^{(1)} &amp; \Theta_{12}^{(1)} &amp; \Theta_{13}^{(1)}\\<br>\Theta_{20}^{(1)} &amp; \Theta_{21}^{(1)} &amp; \Theta_{22}^{(1)} &amp; \Theta_{23}^{(1)}\\<br>\Theta_{30}^{(1)} &amp; \Theta_{31}^{(1)} &amp; \Theta_{32}^{(1)} &amp; \Theta_{33}^{(1)}\\<br>\end{bmatrix} * \begin{bmatrix}<br>x_{0}\\<br>x_{1}\\<br>x_{2}\\<br>x_{3}\\<br>\end{bmatrix})<br>$$</p><p>我们可以令\( z^{(2)}=\Theta^{(1)}x \)，则 \( a^{(2)}=g(z^{(2)}) \)，这里一般令 \( a_{0}^{(2)}=1 \)。令 \( z^{(3)}=\Theta^{(2)}a^{(2)} \) ，则 \( h_{\Theta}(x)=a^{(3)}=g(z^{(3)}) \)。注意，这只是把特征矩阵中的一行（代表一个训练实例）输入到神经网络，而我们需要把整个训练集都输入到神经网络算法来学习模型。  </p><p>如果要对整个训练集进行计算，则需要把训练集的特征矩阵进行转置，使得同一个实例的特征都在同一列中。<br>$$<br>z^{(2)}=\Theta^{(1)}\times X^{T}<br>$$</p><p>$$<br>a^{(2)}=g(z^{(2)})<br>$$</p><p>为了更好的理解神经网络的工作原理，先遮住左半部分：</p><p><img src="https://i.loli.net/2020/07/04/YQNTeoLvOkzjD4n.png" alt=""></p><p>其实左部分就是  ，按照Logistic Regression的方式输出 \( h_{\Theta}(x) \):</p><p>$$<br>h_{\Theta }(x)=g(\begin{bmatrix}<br>\Theta_{10}^{(2)}  &amp; \Theta_{11}^{(2)} &amp; \Theta_{12}^{(2)} &amp; \Theta_{13}^{(2)}\\<br>\end{bmatrix}*\begin{bmatrix}<br>a_{0}^{(2)}\\<br>a_{1}^{(2)}\\<br>a_{2}^{(2)}\\<br>a_{3}^{(2)}\\<br>\end{bmatrix})<br>$$</p><p>其实神经网络就像是Logistic Regression，只不过是把Logistic Regression中的输入变量由 x 变成了 a，这里可以把\(  a_{0},a_{1},a_{2},a_{3} \)看成更加<strong>高级</strong>的特征值，并且它是由 x 和权重决定的。神经网络通过使用BP算法是用来计算损失函数相对于神经网络参数的梯度，和梯度下降基本可以划等号，因此 a 不断的变化，并且变得越来越厉害，能够更好的预测数据。使用这些更加高级的特征值比仅仅使用 x 次方更加厉害，能够更好的预测数据。这也是神经网络比逻辑回归和线性回归强的地方。</p><h2 id="8-5-特征和直观理解I（Example-and-Intuitions）"><a href="#8-5-特征和直观理解I（Example-and-Intuitions）" class="headerlink" title="8.5 特征和直观理解I（Example and Intuitions）"></a>8.5 特征和直观理解I（Example and Intuitions）</h2><p>神经网络能够通过学习得出其自身的一系列特征。而普通的逻辑回归可以使用的特征收到限制，虽然可以使用二项式组合出一些特征，但是仍然收到原始特征\( x_{1},x_{2},x_{3} … \) 的限制。  </p><p>上面的三层神经网络，第三层就是输出层做出的预测，利用的是第二层的特征，而不是输入层中的原始特征。这里可以认为第二层的特征是神经网络通过学习后自己得出的一系列用于预测输出变量的新的特征。  </p><p>在神经网络中，可以使用单层元（无中间层）来表示逻辑运算，包括逻辑与（AND）和逻辑或（OR）。  </p><p>可以使用这样的一个神经网络表示AND函数：</p><p><img src="https://i.loli.net/2020/07/04/hmNPsTVK4j3IUWy.png" alt=""></p><p>其中\( \Theta_{0}=-30,\Theta_{1}=20,\Theta_{2}=20  \)，输出函数：\( h_{\Theta}(x)=g(-30+20x_{1}+2) \)</p><p><img src="https://i.loli.net/2020/07/04/zXEcsSDCUd2IyGp.png" alt=""></p><p><img src="https://i.loli.net/2020/07/04/kg1vJlhnQcYrTfS.png" alt=""></p><p>因此，我们有 \( h_{\Theta}(x)\approx x_{1} \) AND \( x_{2} \)</p><p>OR函数可以表示如下：</p><p><img src="https://i.loli.net/2020/07/04/jORMpTo7H4mSLwk.png" alt=""></p><p>OR和AND函数整体一样，区别在于权重参数的取值不同。</p><p>NOT函数可以表示如下：</p><p><img src="https://i.loli.net/2020/07/04/5chriEpkzdDISZV.png" alt=""></p><h2 id="8-6-特征和直观理解II（Example-and-Intuitions）"><a href="#8-6-特征和直观理解II（Example-and-Intuitions）" class="headerlink" title="8.6 特征和直观理解II（Example and Intuitions）"></a>8.6 特征和直观理解II（Example and Intuitions）</h2><p>可以使用神经元组合成复杂的神经网络用来实现更加复杂的操作。例如实现XNOR功能，即同或，输入的两个值必须相同输出才为 1 。即<br> XNOR \( = (x_{1} \) AND \( x_{2}) \) OR \( (( \) NOT \( x_{1}) \) AND \( ( \) NOT \( x_{2})) \)</p><p><img src="https://i.loli.net/2020/07/04/tJz7o1kgHfnbvEQ.png" alt=""></p><p>由此可见，神经网络可以逐渐构造出复杂的函数。</p><h2 id="8-7-多类分类（Multiclass-Classification）"><a href="#8-7-多类分类（Multiclass-Classification）" class="headerlink" title="8.7 多类分类（Multiclass Classification）"></a>8.7 多类分类（Multiclass Classification）</h2><p>如果需要进行分类，并且不止有两种类别的时候，使用 1 和 0 已经不适合了。例如，训练一个神经网络判断路人，汽车，摩托车和卡车。那么输出层应该输出四个值，第一个值表示预测为路人的概率，第二个值为预测为汽车的概率，第三个值为预测为摩托车的概率，第四个值为预测为卡车的概率。  </p><p>下面的神经网络输入向量有三个特征值，隐藏层有两层。输出层的四个神经元分别来表示4类。每一个数据在该模型对应的输出层为 \( \begin{bmatrix}<br>a &amp; b &amp; c &amp; d<br>\end{bmatrix}^{T} \)，并且\( a, b, c, d \)中仅有一个为 1 。</p><p><img src="https://i.loli.net/2020/07/04/9PVDsYaNkCih5AH.png" alt="多类分类的神经网络"></p><p><img src="https://i.loli.net/2020/07/04/WZ2LqhCbwMFxcrG.png" alt=""></p><p>神经网络算法输出的结果可能的情况有四种：</p><p><img src="https://i.loli.net/2020/07/04/YuAapqbRCZlt3Gz.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 吴恩达机器学习课程 </tag>
            
            <tag> Neural Networks:Representation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning Exercises In Python, Part2</title>
      <link href="/2020/06/28/27756.html"/>
      <url>/2020/06/28/27756.html</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="Machine-Learning-Exercises-In-Python-Part2"><a href="#Machine-Learning-Exercises-In-Python-Part2" class="headerlink" title="Machine Learning Exercises In Python, Part2"></a>Machine Learning Exercises In Python, Part2</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltpath <span class="token operator">=</span> r<span class="token string">'D:\ML\data\ex1data2.txt'</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path<span class="token punctuation">,</span> header<span class="token operator">=</span>None<span class="token punctuation">,</span> names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Size'</span><span class="token punctuation">,</span> <span class="token string">'Bedrooms'</span><span class="token punctuation">,</span> <span class="token string">'Price'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2020/06/28/DAcOaLyBsJV32Pe.png" alt="查看数据的前5行"></p><p>查看数据的描述：  </p><pre class=" language-python"><code class="language-python">data<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2020/06/28/LvcA6TEptkHY9nG.png" alt="数据的描述"></p><p>对数据进行特征缩放：</p><p><img src="https://i.loli.net/2020/06/28/odqk46WOAHUfnKQ.png" alt="4中特种缩放的方法"></p><pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">(</span>data <span class="token operator">-</span> data<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> data<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2020/06/28/CV3IquAQJjfGcyb.png" alt="特征缩放结果"></p><p>梯度下降函数和代价函数如下：  </p><p>$$ J(\Theta)=\frac{1}{2m}\sum_{i=1}^{m}(h_{\Theta}(x^{i})-y^{i})^{2} $$</p><p>Repeat until convergence:<br>$$ \Theta_{0}:=\Theta_{0}-a\frac{1}{m}\sum_{i=1}^{m}((h_{\Theta}(x^{(i)})-y^{(i)})x_{0}^{(i)}) $$</p><p>for j = 1,2,….n:</p><p>$$ \Theta_{j}:=\Theta_{j}-a\frac{1}{m}\sum_{i=1}^{m}(h_{\Theta}(x^{(i)})-y^{(i)})x_{j}^{(i)}) $$</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#定义代价函数</span><span class="token keyword">def</span> <span class="token function">computeCost</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta<span class="token punctuation">)</span><span class="token punctuation">:</span>    inner <span class="token operator">=</span> np<span class="token punctuation">.</span>power<span class="token punctuation">(</span><span class="token punctuation">(</span>X <span class="token operator">*</span> theta<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token operator">-</span> y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>inner<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#定义梯度下降函数</span><span class="token keyword">def</span> <span class="token function">gradientDescent</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> alpha<span class="token punctuation">,</span> iters<span class="token punctuation">)</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>theta<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span>    parameters <span class="token operator">=</span> theta<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    cost <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>iters<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>iters<span class="token punctuation">)</span><span class="token punctuation">:</span>        error <span class="token operator">=</span> <span class="token punctuation">(</span>X <span class="token operator">*</span> theta<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token operator">-</span> y        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>parameters<span class="token punctuation">)</span><span class="token punctuation">:</span>            term <span class="token operator">=</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>error<span class="token punctuation">,</span> X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> theta<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span>alpha <span class="token operator">/</span> len<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>term<span class="token punctuation">)</span>        theta <span class="token operator">=</span> temp        cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> computeCost<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta<span class="token punctuation">)</span>    <span class="token keyword">return</span> theta<span class="token punctuation">,</span> cost</code></pre><p>进行初始化操作：</p><pre class=" language-python"><code class="language-python">data<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'Ones'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>cols <span class="token operator">=</span> data<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>X <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span>cols<span class="token number">-1</span><span class="token punctuation">]</span>y <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> cols<span class="token number">-1</span><span class="token punctuation">:</span>cols<span class="token punctuation">]</span>X <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>X<span class="token punctuation">.</span>values<span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>y<span class="token punctuation">.</span>values<span class="token punctuation">)</span>theta <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>设置学习率和迭代次数：</p><pre class=" language-python"><code class="language-python">alpha <span class="token operator">=</span> <span class="token number">0.01</span>iters <span class="token operator">=</span> <span class="token number">1000</span>computeCost<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta<span class="token punctuation">)</span></code></pre><p>运行结果：<code>0.48936170212765967</code></p><p>进行运算：</p><pre class=" language-python"><code class="language-python">g<span class="token punctuation">,</span> cost <span class="token operator">=</span> gradientDescent<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> alpha<span class="token punctuation">,</span> iters<span class="token punctuation">)</span>computeCost<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> g<span class="token punctuation">)</span></code></pre><p>运行结果：<code>0.13070336960771892</code></p><p>绘制迭代次数和训练轮次的函数：</p><pre class=" language-python"><code class="language-python">fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>iters<span class="token punctuation">)</span><span class="token punctuation">,</span> cost<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#表示红色</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Iterations'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Cost'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Erro vs. Training Epoch'</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2020/06/28/DaksnQMx8u1Hfrv.png" alt=""></p><p>在机器学习领域，可以使用python的<code>scikit-learn</code>。下面演示使用<code>scikit-learn</code>的线性回归模型。<br>这里以第一个练习中的人口和利润的例子为例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn <span class="token keyword">import</span> linear_modelmodel <span class="token operator">=</span> linear_model<span class="token punctuation">.</span>LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#训练数据</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>A1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#把矩阵转换成一个数组ndarray类型</span>f <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> f<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Prediction'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>data<span class="token punctuation">.</span>Population<span class="token punctuation">,</span> data<span class="token punctuation">.</span>Profit<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Training Data'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Population'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Profit'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Predicted Profit vs. Population Size'</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2020/06/28/Xj6OdfcAuapPnte.png" alt="运行结果"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 吴恩达机器学习课程 </tag>
            
            <tag> Machine Learning Exercises </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning Exercises In Python, Part1</title>
      <link href="/2020/06/27/27949.html"/>
      <url>/2020/06/27/27949.html</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="Machine-Learning-Exercises-In-Python-Part1"><a href="#Machine-Learning-Exercises-In-Python-Part1" class="headerlink" title="Machine Learning Exercises In Python, Part1"></a>Machine Learning Exercises In Python, Part1</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltpath <span class="token operator">=</span> r<span class="token string">'D:\ML\data\ex1data1.txt'</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path<span class="token punctuation">,</span> header<span class="token operator">=</span>None<span class="token punctuation">,</span> names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Population'</span><span class="token punctuation">,</span> <span class="token string">'Profit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2020/06/27/6ULcS8uFPTgRzAB.png" alt="查看数据前5行"></p><p>使用散点图显示数据</p><pre class=" language-python"><code class="language-python">data<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'scatter'</span><span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token string">'Population'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'Profit'</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2020/06/27/dwWPlj68EavimuL.png" alt="数据集对应的散点图"></p><p>向数据集中添加新的一列1，方便线性回归的处理。对应假设函数的常数项 theta_0 对应的 x_0 (x_0默认为1)</p><pre class=" language-python"><code class="language-python">data<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'Ones'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2020/06/27/1UpkyF4nbioaqsM.png" alt="修改后的数据集合前5行"></p><pre class=" language-python"><code class="language-python">cols <span class="token operator">=</span> data<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#对应样例的特征数量（包括1这个新添加的特征值）</span>X <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span>cols<span class="token number">-1</span><span class="token punctuation">]</span> y <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> cols<span class="token number">-1</span><span class="token punctuation">:</span>cols<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#转换成矩阵，方便处理</span>X <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>X<span class="token punctuation">.</span>values<span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>y<span class="token punctuation">.</span>values<span class="token punctuation">)</span>theta <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#查看矩阵的维度</span>X<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> y<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> theta<span class="token punctuation">.</span>shape</code></pre><p>运行结果： <code>((97, 2), (97, 1), (1, 2))</code>  </p><p>下面先给出代价函数和梯度下降函数的定义：<br>$$ J(\Theta)=\frac{1}{2m}\sum_{i=1}^{m}(h_{\Theta}(x^{i})-y^{i})^{2} $$</p><p>Repeat until convergence:<br>$$ \Theta_{0}:=\Theta_{0}-a\frac{1}{m}\sum_{i=1}^{m}((h_{\Theta}(x^{(i)})-y^{(i)})x_{0}^{(i)}) $$</p><p>for j = 1,2,….n:</p><p>$$ \Theta_{j}:=\Theta_{j}-a\frac{1}{m}\sum_{i=1}^{m}(h_{\Theta}(x^{(i)})-y^{(i)})x_{j}^{(i)}) $$</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#定义代价函数</span><span class="token keyword">def</span> <span class="token function">computeCost</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta<span class="token punctuation">)</span><span class="token punctuation">:</span>    inner <span class="token operator">=</span> np<span class="token punctuation">.</span>power<span class="token punctuation">(</span><span class="token punctuation">(</span>X <span class="token operator">*</span> theta<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token operator">-</span> y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>inner<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#定义梯度下降函数</span><span class="token keyword">def</span> <span class="token function">gradientDescent</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> alpha<span class="token punctuation">,</span> iters<span class="token punctuation">)</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>theta<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span>    parameters <span class="token operator">=</span> theta<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    cost <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>iters<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>iters<span class="token punctuation">)</span><span class="token punctuation">:</span>        error <span class="token operator">=</span> <span class="token punctuation">(</span>X <span class="token operator">*</span> theta<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token operator">-</span> y        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>parameters<span class="token punctuation">)</span><span class="token punctuation">:</span>            term <span class="token operator">=</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>error<span class="token punctuation">,</span> X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> theta<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span>alpha <span class="token operator">/</span> len<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>term<span class="token punctuation">)</span>        theta <span class="token operator">=</span> temp        cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> computeCost<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta<span class="token punctuation">)</span>    <span class="token keyword">return</span> theta<span class="token punctuation">,</span> cost</code></pre><p>计算在初始 theta 条件下的代价函数值：  </p><pre class=" language-python"><code class="language-python">computeCost<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta<span class="token punctuation">)</span></code></pre><p>运行结果： <code>32.072733877455676</code>  </p><p>下面进行迭代2000次的梯度下降计算：</p><pre class=" language-python"><code class="language-python">alpha <span class="token operator">=</span> <span class="token number">0.01</span> <span class="token comment" spellcheck="true">#学习率</span>iters <span class="token operator">=</span> <span class="token number">2000</span> <span class="token comment" spellcheck="true">#迭代次数</span>g<span class="token punctuation">,</span> cost <span class="token operator">=</span> gradientDescent<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> alpha<span class="token punctuation">,</span> iters<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#g是迭代之后的theta值，cost保存每一次迭代对应的代价函数值</span></code></pre><p>展示训练之后的拟合直线：</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>data<span class="token punctuation">.</span>Population<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>Population<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>f <span class="token operator">=</span> g<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>g<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#fig 表示的是要绘制的一个画布，</span><span class="token comment" spellcheck="true">#ax 表示的是在fig这个画布的对象上，具体要绘制的对象子图</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#默认画布是1*1，当前使用的是第1个子图</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> f<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Prediction'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#绘制函数图像</span>ax<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>data<span class="token punctuation">.</span>Population<span class="token punctuation">,</span> data<span class="token punctuation">.</span>Profit<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Traning Data'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#绘制散点图</span>ax<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#使用0-10表示图例的位置</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Population'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Price'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Predicted Profit vs. Population Size'</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2020/06/28/pVTmOF4ajtXoCWh.png" alt="训练结果"></p><p>展示训练次数和代价值的关系：</p><pre class=" language-python"><code class="language-python">fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>iters<span class="token punctuation">)</span><span class="token punctuation">,</span> cost<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#r表示红色</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Iterations'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Cost'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Error vs. Training Epoch'</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2020/06/28/OPLhsvFND8p6m9E.png" alt="训练次数对应的代价值"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 吴恩达机器学习课程 </tag>
            
            <tag> Machine Learning Exercises </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习 Regularization</title>
      <link href="/2020/06/27/3866.html"/>
      <url>/2020/06/27/3866.html</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="机器学习-Regularization"><a href="#机器学习-Regularization" class="headerlink" title="机器学习 Regularization"></a>机器学习 Regularization</h1><h2 id="7-1-过拟合问题"><a href="#7-1-过拟合问题" class="headerlink" title="7.1 过拟合问题"></a>7.1 过拟合问题</h2><p><strong>线性回归</strong> 和 <strong>逻辑回归</strong> 能够有效的解决许多问题，但是在应用到某些特定的机器学习应用中时候，会出现 <strong>过拟合（over-fitting）</strong> 的问题，泛化能力很差。通过使用 <strong>正则化</strong>，可以改善和减少过拟合的问题。<br>如果数据集有非常多的特征，那么通过学习得到的模型可能非常好的适应训练集（代价函数接近0），即过拟合，但是泛化能力差。  </p><p><img src="https://i.loli.net/2020/06/27/RYUIhnyAKvXLWTt.png" alt="回归问题例子"></p><p>图一使用线性模型，<strong>欠拟合</strong> ，不能很好的适应训练集。图三使用了四次方的模型，过于强调拟合原始数据，导致出现过拟合情况，使得模型的泛化能力不好。</p><p><img src="https://i.loli.net/2020/06/27/gLSEQwyVZACizHG.png" alt="分类问题例子"></p><p>这里使用多项式来理解，简单来说：多项式的x的次数越高，拟合的越好，但是泛化能力可能变差。如何解决过拟合问题呢？  </p><ul><li>丢弃一些不重要特征，即丢弃对我们正确的预测结果帮助不大的feature。可以手工选择或者使用算法帮忙，例如PAC算法。</li><li>正则化。保留所有的特征，但是减少参数的大小（magnitude，即量级）。</li></ul><h2 id="7-2-代价函数"><a href="#7-2-代价函数" class="headerlink" title="7.2 代价函数"></a>7.2 代价函数</h2><p>上面的回归问题的例子对应的一个模型是:</p><p>$$ h_{\Theta }(x)=\Theta_{0}+\Theta_{1}x_{1}+\Theta_{2}x_{2}^{2}+\Theta_{3}x_{3}^{3}+\Theta_{4}x_{4}^{4} $$</p><p>正是 <strong>高次项</strong> 导致了过拟合的产生，如果能够使得高次项的系数接近于0的话，那么可以很好的进行拟合。正则化的基本方法就是在一定程度上减少这些 theta 的值。例如这里减少 theta_3 和 theta_4 的大小，修改代价函数，对 theta_3 和 theta_4 设置一些惩罚。修改之后如下：</p><p>$$ min_{\Theta }\frac{1}{2m}[\sum_{i=1}^{m}(h_{\Theta }(x^{i})-y^{i})^{2}+1000\Theta_{3}^{2}+10000\Theta_{4}^{2}] $$</p><p>这样的代价函数使得 theta_3 和 theta_4 对预测结果的影响比之前小了很多。假如数据集有很多特征，但是我们不知道需要对那些特征进行 <strong>惩罚</strong> ，那么我们对 <strong>所有</strong> 的特征进行惩罚，并且让可以使得代价函数最优化的软件选择 <strong>惩罚的程度</strong> 。于是，可以得到一个简单的能够防止过拟合的假设：</p><p>$$ J(\Theta)=\frac{1}{2m}[\sum_{i=1}^{m}(h_{\Theta}(x^{i})-y^{i})^{2}+\lambda\sum_{j=1}^{n}\Theta_{j}^{2}] $$</p><p>这里的\( \lambda \)叫做正则化参数（Regularization Parameter）。一般情况下，我们不会对 theta_0 进行惩罚。经过正则化处理的模型和元模型的可能对比。</p><p><img src="https://i.loli.net/2020/06/27/d9KJHrtm428oxRI.png" alt=""></p><p>如果选择的正则化参数过大，导致所以的参数最小化，模型退化成为</p><p>$$ h_{\Theta}(x)=\Theta_{0} $$</p><p>即出现欠拟合情况。因此，对于正则化，需要选择一个合适的\( \lambda \)作为正则化参数。</p><h2 id="7-3-正则化线性回归"><a href="#7-3-正则化线性回归" class="headerlink" title="7.3 正则化线性回归"></a>7.3 正则化线性回归</h2><p>求解线性回归的方法，已经学习了两种：一种是使用 <strong>梯度下降算法</strong> ，一种是使用 <strong>正规方程</strong>。<br>正则化线性回归使用的代价函数：</p><p>$$ J(\Theta)=\frac{1}{2m}[\sum_{i=1}^{m}(h_{\Theta}(x^{i})-y^{i})^{2}+\lambda\sum_{j=1}^{n}\Theta_{j}^{2}] $$</p><p>如果使用梯度下降算法使得代价函数最小化，因为没有对 theta_0 进行正则化，那么梯度下降算法需要分为两种情形：  </p><p>Repeat until convergence:<br>$$ \Theta_{0}:=\Theta_{0}-a\frac{1}{m}\sum_{i=1}^{m}((h_{\Theta}(x^{(i)})-y^{(i)})x_{0}^{(i)}) $$</p><p>for j = 1,2,….n:</p><p>$$ \Theta_{j}:=\Theta_{j}-a[\frac{1}{m}\sum_{i=1}^{m}(h_{\Theta}(x^{(i)})-y^{(i)})x_{j}^{(i)}+\frac{\lambda}{m}\Theta _{j}] $$</p><p>对第二个表达式进行微调可以得出：</p><p>$$ \Theta_{j}:=\Theta_{j}(1-a\frac{\lambda }{m})-a[\frac{1}{m}\sum_{i=1}^{m}(h_{\Theta}(x^{(i)})-y^{(i)})x_{j}^{(i)}] $$</p><p>由此可见，正则化线性回归的梯度下降算法的变化在于，每次都在原有算法更新规则的基础之上令 theta 减少了一个额外的值。  </p><p>使用正规方程求解正则化线性回归模型，方法如下：<br>$$ \Theta=\left ( X^{T}X+\lambda\begin{bmatrix}<br>0 &amp;  &amp; &amp;  &amp;  \\<br> &amp; 1 &amp;  &amp;  &amp;  \\<br> &amp;  &amp; 1 &amp;  &amp;  \\<br> &amp; &amp;  &amp; … &amp;  \\<br> &amp;  &amp;  &amp;  &amp; 1 \end{bmatrix} \right )^{-1}X^{T}y $$</p><p>X的矩阵维度是m x (n + 1)， 图中的矩阵维度是(n + 1) x (n + 1)。</p><h2 id="7-4-正则化的逻辑回归模型"><a href="#7-4-正则化的逻辑回归模型" class="headerlink" title="7.4 正则化的逻辑回归模型"></a>7.4 正则化的逻辑回归模型</h2><p>eg.逻辑回归模型是分类模型，不是回归模型。  </p><p>对于逻辑回归问题，学过两种优化的方法，一种是使用 <strong>梯度下降算法</strong> 优化代价函数，另外一种是使用 <strong>高级算法</strong> 。</p><p><img src="https://i.loli.net/2020/06/27/b8Ldrc41R3E2iya.png" alt=""></p><p>这里对逻辑回归的代价函数添加正则项得到表达式：</p><p>$$ J(\Theta)=\frac{1}{m}\prod_{i=1}^{m}(-y^{(i)}log(h_{\Theta}(x^{(i)}))-(1-y^{(i)})log(1-h_{\Theta}(x^{(i)}))+\frac{\lambda }{2m}\sum_{j=1}^{n}\Theta _{j}^{2} $$</p><p>python计算代价函数的代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">def</span> <span class="token function">sigmoid</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">:</span>    z <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>z<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">costReg</span><span class="token punctuation">(</span>theta<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> learningRate<span class="token punctuation">)</span><span class="token punctuation">:</span>    theta <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>theta<span class="token punctuation">)</span>    X <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>X<span class="token punctuation">)</span>    y <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    first <span class="token operator">=</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span><span class="token operator">-</span>y<span class="token punctuation">,</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>sigmoid<span class="token punctuation">(</span>X <span class="token operator">*</span> theta<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    second <span class="token operator">=</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>sigmoid<span class="token punctuation">(</span>X <span class="token operator">*</span> theta<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    reg <span class="token operator">=</span> <span class="token punctuation">(</span>learningRate <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>np<span class="token punctuation">.</span>power<span class="token punctuation">(</span>theta<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span>theta<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>first <span class="token operator">+</span> second<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> reg</code></pre><p>使用梯度下降算法需要求导： </p><p>Repeat until convergence:<br>$$ \Theta_{0}:=\Theta_{0}-a\frac{1}{m}\sum_{i=1}^{m}((h_{\Theta}(x^{(i)})-y^{(i)})x_{0}^{(i)}) $$</p><p>for j = 1,2,….n:</p><p>$$ \Theta_{j}:=\Theta_{j}-a[\frac{1}{m}\sum_{i=1}^{m}(h_{\Theta}(x^{(i)})-y^{(i)})x_{j}^{(i)}+\frac{\lambda}{m}\Theta _{j}] $$  </p><p>注：看上去似乎和前面相同，但是注意 </p><p>$$ h_{\Theta }(x)=g(\Theta ^{T}x) $$ </p><p>因此，这里和线性回归还是不相同的。在Octave中可以使用fminuc求解代价函数最小化的参数，这里 theta_0 的更新规则和其他的情况不同。注意两点：</p><ul><li>正则化的逻辑回归中梯度下降和正则化的线性回归中的梯度下降的表达式相似，但是实际上因为 \( h_{\Theta }(x) \)不同还是有很大的差别</li><li>\( \Theta_{0} \) <strong>不参与</strong> 任何一个正则化</li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 吴恩达机器学习课程 </tag>
            
            <tag> Regularization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语法 Pandas</title>
      <link href="/2020/06/17/40957.html"/>
      <url>/2020/06/17/40957.html</url>
      
        <content type="html"><![CDATA[<h1 id="python语法-Pandas"><a href="#python语法-Pandas" class="headerlink" title="python语法 Pandas"></a>python语法 Pandas</h1><h2 id="Pandas数据结构"><a href="#Pandas数据结构" class="headerlink" title="Pandas数据结构"></a>Pandas数据结构</h2><ul><li>Series:&ensp;一维数组 <strong>系列</strong> ，也称 <strong>序列</strong> 。和Numpy中的array以及Python中的list相似。</li><li>DataFrame:&ensp;二维的表格型数据结构，可以把DataFrame理解为Series的容器。</li><li>Panel:&ensp; <strong>三维数组</strong> ，可以理解为DataFrame的容器。</li></ul><h2 id="Pandas数据结构使用方法"><a href="#Pandas数据结构使用方法" class="headerlink" title="Pandas数据结构使用方法"></a>Pandas数据结构使用方法</h2><h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><p>使用方法：<br><code>Series([数据1, 数据2, ... ], index = [索引1, 索引2, ... ])</code>  </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pandas <span class="token keyword">import</span> SeriesX <span class="token operator">=</span> Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'乌龟'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5ee9b6dfa240b370e3ce5ec9.jpg" alt="运行结果"></p><p>系列如果的索引可以省略，默认使用从0开始的数字作为下标。一般把加了index的叫做 <strong>索引名</strong> ， 使用默认的数字叫做 <strong>索引号</strong> 。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pandas <span class="token keyword">import</span> SeriesA <span class="token operator">=</span> Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>B <span class="token operator">=</span> Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span>C <span class="token operator">=</span> Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5ee9b981a240b370e3d113f4.jpg" alt="运行结果"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pandas <span class="token keyword">import</span> SeriesA <span class="token operator">=</span> Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token punctuation">[</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5ee9c02da240b370e3d9baed.jpg" alt="运行结果"></p><p>访问系列值的时候，使用系列索引进行访问，系列值和系列索引是一一对应的关系</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pandas <span class="token keyword">import</span> SeriesA <span class="token operator">=</span> Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>B <span class="token operator">=</span> Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'first'</span><span class="token punctuation">,</span> <span class="token string">'second'</span><span class="token punctuation">,</span> <span class="token string">'third'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>B<span class="token punctuation">[</span><span class="token string">'first'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>B<span class="token punctuation">[</span><span class="token string">'second'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>B<span class="token punctuation">[</span><span class="token string">'third'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>运行结果：<br>14<br>26<br>31<br>14<br>26<br>31  </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pandas <span class="token keyword">import</span> Series<span class="token comment" spellcheck="true">#混合定义一个序列</span>X <span class="token operator">=</span> Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'first'</span><span class="token punctuation">,</span> <span class="token string">'second'</span><span class="token punctuation">,</span> <span class="token string">'third'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#根据索引访问</span><span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#按索引号访问</span><span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token string">'second'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#按索引名访问</span><span class="token comment" spellcheck="true"># print(X[3]) 越界访问</span><span class="token comment" spellcheck="true">#X.append('2') </span><span class="token comment" spellcheck="true">#不可以追加单个元素，但是可以追加系列</span>x <span class="token operator">=</span> Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'100分'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'forth'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>X <span class="token operator">=</span> X<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#切片</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#定位获取，常用于随机抽样</span></code></pre><p><img src="https://pic.downk.cc/item/5ee9e6a3a240b370e30b02a1.jpg" alt="运行结果"></p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> Series<span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>x<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">in</span> x<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2'</span> <span class="token keyword">in</span> x<span class="token punctuation">.</span>values<span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5ee9e861a240b370e30e0daf.jpg" alt="运行图片"> </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pandas <span class="token keyword">import</span> Series<span class="token comment" spellcheck="true">#根据index删除</span>x <span class="token operator">=</span> Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'first'</span><span class="token punctuation">,</span> <span class="token string">'second'</span><span class="token punctuation">,</span> <span class="token string">'third'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>nx <span class="token operator">=</span> x<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">'first'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#按照索引名</span>ny <span class="token operator">=</span> y<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#按照索引号</span><span class="token comment" spellcheck="true"># 删除的时候只能使用索引号名删除</span><span class="token keyword">print</span><span class="token punctuation">(</span>nx<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ny<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#可以使用索引号和索引名查看元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token string">'second'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5ee9efc5a240b370e31a91fb.jpg" alt="运行结果"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pandas <span class="token keyword">import</span> Seriesx <span class="token operator">=</span> Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>index<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#根据索引号找到对应的索引名</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>index<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>index<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#根据位置删除得到一个新的序列</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>x<span class="token punctuation">.</span>index<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#根据值删除，显示值不等于'a'的系列。即删除‘a’，返回一个新的序列</span>z <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token string">'a'</span> <span class="token operator">!=</span> x<span class="token punctuation">.</span>values<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#修改系列的值，把值为'a'的值修改成'd',先找到值'a'对应的索引，然后修改</span>x<span class="token punctuation">[</span>x<span class="token punctuation">.</span>index<span class="token punctuation">[</span>x<span class="token punctuation">.</span>values <span class="token operator">==</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'d'</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#通过值访问系列index</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>x<span class="token punctuation">.</span>values <span class="token operator">==</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>index<span class="token punctuation">[</span>x<span class="token punctuation">.</span>values <span class="token operator">==</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#修改系列的index，可以通过赋值的方式，或者使用reindex方法</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>index<span class="token punctuation">)</span>x<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'AA'</span><span class="token punctuation">,</span> <span class="token string">'BB'</span><span class="token punctuation">,</span> <span class="token string">'CC'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>index<span class="token punctuation">)</span>x <span class="token operator">=</span> x<span class="token punctuation">.</span>reindex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'AAA'</span><span class="token punctuation">,</span> <span class="token string">'BBB'</span><span class="token punctuation">,</span> <span class="token string">'CCC'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#第二种方法</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#把字典转换成Series</span>d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span>s <span class="token operator">=</span> Series<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5ee9f603a240b370e3247b8c.jpg" alt=""><br><img src="https://pic.downk.cc/item/5ee9f650a240b370e324f33e.jpg" alt=""></p><ul><li>Series 的 <strong>sort_index(ascending=True)</strong> 方法可以对index进行排序操作，ascending用来控制 <strong>升序</strong> 或者 <strong>降序</strong> 。</li><li>Series 使用 <strong>reindex()</strong> 方法重新排序。在Series调用 reindex方法重排数据，如果索引不存在就引入 <strong>缺失值</strong> 。</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pandas <span class="token keyword">import</span> Series<span class="token comment" spellcheck="true">#reindex重排序</span>s <span class="token operator">=</span> Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token number">7.2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5.3</span><span class="token punctuation">,</span> <span class="token number">3.6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">15</span><span class="token punctuation">)</span>s1 <span class="token operator">=</span> s<span class="token punctuation">.</span>reindex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">15</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> s<span class="token punctuation">.</span>reindex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fill_value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5ee9f88fa240b370e3287ad1.jpg" alt=""></p><p><strong>Series</strong> 本质上是 <strong>Numpy数组（矩阵）</strong> ，因此Numpy的数组处理函数可以直接对Series处理。但是Series除了可以使用 <strong>位置</strong> 作为下标存取元素，还可以使用 <strong>标签</strong> 存取元素。每个Series是由两个数组组成</p><ul><li>index&ensp;从 <strong>Numpy数组继承的index对象</strong> ，保存标签信息</li><li>values&ensp;保存值的 <strong>Numpy数组</strong></li></ul><p><strong>Series</strong> 需要注意几点：  </p><ul><li>类似Numpy的ndarray</li><li>Series的数据类型没有限制</li><li>Series由索引，把索引看成 <strong>数据的标签</strong> ，类似于字典</li></ul><h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><p>DataFrame 数据框用于存储多行和多列的数据集合，是 Series的容器。</p><h4 id="axis使用"><a href="#axis使用" class="headerlink" title="axis使用"></a>axis使用</h4><p>axis使用的时候只需要知道它的作用是指明方向即可。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddf <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"col1"</span><span class="token punctuation">,</span> <span class="token string">"col2"</span><span class="token punctuation">,</span> <span class="token string">"col3"</span><span class="token punctuation">,</span> <span class="token string">"col4"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df</code></pre><p><img src="https://pic.downk.cc/item/5f04611714195aa59491cd8c.jpg" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#在pandas中，axis=1作用于某一行，axis=0作用于某一列</span>df<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#作用于一行</span></code></pre><p><img src="https://pic.downk.cc/item/5f04613a14195aa59491e114.jpg" alt=""></p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> df<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#作用于一列</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token string">'col1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token string">'col2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token string">'col3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token string">'col4'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5f04615f14195aa59491f1a0.jpg" alt=""></p><pre class=" language-python"><code class="language-python">df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">"col4"</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#原来的df实际上没有发生变化</span></code></pre><p><img src="https://pic.downk.cc/item/5f04618114195aa5949203ec.jpg" alt=""></p><pre class=" language-python"><code class="language-python">df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token number">0</span> <span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5f0461a214195aa59492160b.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语法 读取or写入文本文件</title>
      <link href="/2020/06/17/64557.html"/>
      <url>/2020/06/17/64557.html</url>
      
        <content type="html"><![CDATA[<h1 id="python语法-读取or写入文本文件"><a href="#python语法-读取or写入文本文件" class="headerlink" title="python语法 读取or写入文本文件"></a>python语法 读取or写入文本文件</h1><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><pre class=" language-python"><code class="language-python">filepath <span class="token operator">=</span> r<span class="token string">'D:\hexo\source\_posts\python语法-Numpy.md'</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fileobject<span class="token punctuation">:</span>    contents <span class="token operator">=</span> fileobject<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#读取并输入文件的所有内容</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span></code></pre><ul><li>参数 <strong><code>&#39;w&#39;</code></strong> 表示以 <strong>写入模式</strong> 打开文件</li><li>参数 <strong><code>&#39;r&#39;</code></strong> 表示以 <strong>只读模式</strong> 打开文件</li><li>参数 <strong><code>&#39;a&#39;</code></strong> 表示以 <strong>附加模式</strong> 打开文件</li><li>参数 <strong><code>&#39;r+&#39;</code></strong> 表示以 <strong>读取和写入模式</strong> 打开文件</li></ul><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#写入操作的例子</span>filename <span class="token operator">=</span> r<span class="token string">'D:\hexo\source\_posts\python语法-Numpy.md'</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fileobject<span class="token punctuation">:</span>    fileobject<span class="token punctuation">.</span>write<span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><p>如果写入的文件不存在，函数open()自动的创建这个文件。以 <strong><code>&#39;w&#39;</code></strong> 打开文件的时候，如果指定的文件已经存在，Python在返回文件对象前 <strong>清空</strong> 文件</p><h3 id="实际例子"><a href="#实际例子" class="headerlink" title="实际例子"></a>实际例子</h3><p>读取一个.md文件，然后把文件中多行代码块中的左边空格去除</p><pre class=" language-python"><code class="language-python">filename <span class="token operator">=</span> r<span class="token string">'D:\hexo\source\_posts\python语法-Numpy.md'</span>flag <span class="token operator">=</span> <span class="token boolean">False</span>res <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fileobject<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> fileobject<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#逐行读取</span>        <span class="token keyword">if</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'```python'</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">elif</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'```'</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>line<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                line <span class="token operator">=</span> line<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> res <span class="token operator">+</span> line<span class="token comment" spellcheck="true">#print(res)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fileobject<span class="token punctuation">:</span>    fileobject<span class="token punctuation">.</span>write<span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#写入文件</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python数据分析工具 numpy scipy pandas</title>
      <link href="/2020/06/17/15665.html"/>
      <url>/2020/06/17/15665.html</url>
      
        <content type="html"><![CDATA[<h1 id="python数据分析工具-numpy-scipy-pandas"><a href="#python数据分析工具-numpy-scipy-pandas" class="headerlink" title="python数据分析工具 numpy scipy pandas"></a>python数据分析工具 numpy scipy pandas</h1><ul><li>Numpy是python的 <strong>数值计算</strong> 扩展包，主要用来处理 <strong>矩阵</strong>，它的运行效率比列表更加高效</li><li>Scipy是基于Numpy的科学计算包，包括 <strong>线性代数</strong> ，<strong>统计</strong> 等工具</li><li>Pandas是基于Numpy的 <strong>数据分析工具</strong> ， 能方便的操作 <strong>大型数据集</strong></li></ul><p>安装包的流程：  </p><ul><li>Anaconda-&gt;Anaconda Prompt  </li><li>输入conda install scrapy命令进行安装，如果出现PackageNotFoundError，使用pip install scrapy安装。</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> numpy </tag>
            
            <tag> python </tag>
            
            <tag> scipy </tag>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语法 备份数据</title>
      <link href="/2020/06/17/39949.html"/>
      <url>/2020/06/17/39949.html</url>
      
        <content type="html"><![CDATA[<h1 id="python语法-备份数据"><a href="#python语法-备份数据" class="headerlink" title="python语法 备份数据"></a>python语法 备份数据</h1><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>b <span class="token operator">=</span> a  <span class="token comment" spellcheck="true">#b仅仅是a的一个标签，实际上没有复制</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">14</span><span class="token punctuation">)</span>c <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#复制了a的一个副本c</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">14</span><span class="token punctuation">)</span>d <span class="token operator">=</span> a<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#复制了a的一个副本d</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">14</span><span class="token punctuation">)</span></code></pre><p>运行结果： </p><p><img src="https://pic.downk.cc/item/5ee9031c7b18c7f86fcd40a8.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语法 常用的函数</title>
      <link href="/2020/06/16/49988.html"/>
      <url>/2020/06/16/49988.html</url>
      
        <content type="html"><![CDATA[<h1 id="python语法-常用的函数"><a href="#python语法-常用的函数" class="headerlink" title="python语法 常用的函数"></a>python语法 常用的函数</h1><h3 id="查询已经安装的模块信息-help-‘modules’"><a href="#查询已经安装的模块信息-help-‘modules’" class="headerlink" title="查询已经安装的模块信息 help(‘modules’)"></a>查询已经安装的模块信息 help(‘modules’)</h3><p>返回指定模块或者函数的说明文档</p><h3 id="查询命令相关的属性和方法使用dir函数"><a href="#查询命令相关的属性和方法使用dir函数" class="headerlink" title="查询命令相关的属性和方法使用dir函数"></a>查询命令相关的属性和方法使用dir函数</h3><pre class=" language-python"><code class="language-python">dir<span class="token punctuation">(</span>list<span class="token punctuation">)</span></code></pre><p>或者</p><pre class=" language-python"><code class="language-python">L <span class="token operator">=</span> list<span class="token punctuation">(</span>dir<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5ee8d6412cb53f50fefd3562.jpg" alt=""></p><h3 id="查询字符的ASCII码"><a href="#查询字符的ASCII码" class="headerlink" title="查询字符的ASCII码"></a>查询字符的ASCII码</h3><p><code>ord(&#39;a&#39;)</code>&ensp;结果为97<br><code>chr(97)</code>&ensp;结果为‘a’</p><h3 id="使用len-str-查询字符串的长度"><a href="#使用len-str-查询字符串的长度" class="headerlink" title="使用len(str)查询字符串的长度"></a>使用len(str)查询字符串的长度</h3><h3 id="Str使用索引找到对应的元素；通过元素找到索引"><a href="#Str使用索引找到对应的元素；通过元素找到索引" class="headerlink" title="Str使用索引找到对应的元素；通过元素找到索引"></a>Str使用索引找到对应的元素；通过元素找到索引</h3><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">"I like you!"</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'k'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果：<br>I<br>4  </p><h3 id="tuple-list-string函数的相同点"><a href="#tuple-list-string函数的相同点" class="headerlink" title="tuple,list,string函数的相同点"></a>tuple,list,string函数的相同点</h3><ul><li>每一个元素都可以通过索引来读取</li><li>可以使用len检测长度</li><li>可以使用”+”和”*”</li></ul><pre class=" language-python"><code class="language-python">li <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>li <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token string">"a"</span><span class="token keyword">print</span><span class="token punctuation">(</span>s <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span>t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5ee8dad72cb53f50fe0415ac.jpg" alt=""></p><p>list.append, list.insert, list.pop, del和list[n]赋值等方法均不能用于tuple和str。</p><h3 id="str-split函数把字符型转换成list列表"><a href="#str-split函数把字符型转换成list列表" class="headerlink" title="str.split函数把字符型转换成list列表"></a>str.split函数把字符型转换成list列表</h3><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'I like you very much.'</span>L <span class="token operator">=</span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span></code></pre><p>运行结果： <code>[&#39;I&#39;, &#39;like&#39;, &#39;you&#39;, &#39;very&#39;, &#39;much.&#39;]</code></p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'I,like,you,very,much.'</span>L <span class="token operator">=</span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span></code></pre><p>运行结果： <code>[&#39;I&#39;, &#39;like&#39;, &#39;you&#39;, &#39;very&#39;, &#39;much.&#39;]</code></p><h3 id="split的逆运算-join"><a href="#split的逆运算-join" class="headerlink" title="split的逆运算 join"></a>split的逆运算 join</h3><pre class=" language-python"><code class="language-python">li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">'like'</span><span class="token punctuation">,</span> <span class="token string">'you'</span><span class="token punctuation">,</span> <span class="token string">'very'</span><span class="token punctuation">,</span> <span class="token string">'much.'</span><span class="token punctuation">]</span>conn <span class="token operator">=</span> <span class="token string">'-'</span>s <span class="token operator">=</span> conn<span class="token punctuation">.</span>join<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></code></pre><p>运行结果：<code>I-like-you-very-much.</code></p><h3 id="列表和元组之间可以进行相互转换"><a href="#列表和元组之间可以进行相互转换" class="headerlink" title="列表和元组之间可以进行相互转换"></a>列表和元组之间可以进行相互转换</h3><p>使用list(tuple)和tuple(list)进行操作。<strong>元组的操作速度比列表快</strong></p><h3 id="字符串检测开头和结尾"><a href="#字符串检测开头和结尾" class="headerlink" title="字符串检测开头和结尾"></a>字符串检测开头和结尾</h3><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'I,like,you,very,much.'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'I,like,you'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'much.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'much'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果：<br>True<br>True<br>False  </p><h3 id="字符串的查找和替换"><a href="#字符串的查找和替换" class="headerlink" title="字符串的查找和替换"></a>字符串的查找和替换</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> re  <span class="token comment" spellcheck="true">#导入正则模块</span>S <span class="token operator">=</span> <span class="token string">'I like wanggongsheng, do you like wanggongsheng?'</span>res <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'wanggongsheng'</span><span class="token punctuation">,</span> <span class="token string">'沙耶加'</span><span class="token punctuation">,</span> S<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#在S中用'沙耶加'替换wanggongsheng</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>res <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'WangGongSheng'</span><span class="token punctuation">,</span> <span class="token string">'沙耶加'</span><span class="token punctuation">,</span> S<span class="token punctuation">,</span> flags <span class="token operator">=</span> re<span class="token punctuation">.</span>IGNORECASE<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#替换的时候忽略大小写</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>res <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'WangGongSheng'</span><span class="token punctuation">,</span> <span class="token string">'沙耶加'</span><span class="token punctuation">,</span> S<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> flags <span class="token operator">=</span> re<span class="token punctuation">.</span>IGNORECASE<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><p>运行结果：  </p><p><code>I like 沙耶加, do you like 沙耶加?</code><br><code>I like 沙耶加, do you like 沙耶加?</code><br><code>I like 沙耶加</code> </p>]]></content>
      
      
      <categories>
          
          <category> python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语法 map filter reduce</title>
      <link href="/2020/06/16/48020.html"/>
      <url>/2020/06/16/48020.html</url>
      
        <content type="html"><![CDATA[<h1 id="python语法-map-filter-reduce"><a href="#python语法-map-filter-reduce" class="headerlink" title="python语法 map filter reduce"></a>python语法 map filter reduce</h1><p>map和filter属于内置函数，reduce是python2中的内置函数，python3移到了functools模块中。</p><h2 id="遍历函数map"><a href="#遍历函数map" class="headerlink" title="遍历函数map"></a>遍历函数map</h2><p>作用：map函数用于遍历序列。对序列中的每个元素进行操作，获得一个新的序列，即从a映射到b。</p><pre class=" language-python"><code class="language-python">li1 <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>li2 <span class="token operator">=</span> list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">*</span> x<span class="token punctuation">,</span> li1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>li1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>li2<span class="token punctuation">)</span></code></pre><p>运行结果：<br>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]<br>[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</p><h2 id="筛选函数filter"><a href="#筛选函数filter" class="headerlink" title="筛选函数filter"></a>筛选函数filter</h2><p>作用：filter函数用于对序列中的元素进行筛选，最终获得符合条件的序列。</p><pre class=" language-python"><code class="language-python">li1 <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>li2 <span class="token operator">=</span> list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x <span class="token punctuation">:</span> x <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">,</span> li1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>li1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>li2<span class="token punctuation">)</span></code></pre><p>运行结果：<br>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]<br>[5, 6, 7, 8, 9]</p><h2 id="累计函数reduce"><a href="#累计函数reduce" class="headerlink" title="累计函数reduce"></a>累计函数reduce</h2><p>作用：reduce 函数用于对序列中的所有元素进行 <strong>累计</strong> 操作。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> reduceli <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>res <span class="token operator">=</span> reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> arg1<span class="token punctuation">,</span>arg2<span class="token punctuation">:</span>arg1<span class="token operator">+</span>arg2<span class="token punctuation">,</span> li<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># reduce第一个参数是有两个参数的函数，即该函数必须有两个参数</span><span class="token comment" spellcheck="true"># reduce第二个参数是要进行循环的序列</span><span class="token comment" spellcheck="true"># reduce第三个参数是初始值</span></code></pre><p>运行结果：145  </p><p>计算过程：  </p><ol><li>先计算初始值和第一个元素，即 100 + 0 = 100</li><li>把结果和第二个参数做运算，即 100 + 1 = 101</li><li>把结果和第三个参数做运算，即 101 + 2 = 103  </li></ol><p>依此类推。最后的结果是145。</p>]]></content>
      
      
      <categories>
          
          <category> python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语法 yield</title>
      <link href="/2020/06/16/39759.html"/>
      <url>/2020/06/16/39759.html</url>
      
        <content type="html"><![CDATA[<h1 id="python语法-yield"><a href="#python语法-yield" class="headerlink" title="python语法 yield"></a>python语法 yield</h1><h3 id="yield关键字作用"><a href="#yield关键字作用" class="headerlink" title="yield关键字作用"></a>yield关键字作用</h3><p>将函数执行的中间结果返回但是不结束函数。该关键字的作用是把函数变成一个 <strong><code>生成器</code></strong> 。带有 <strong>yield</strong> 的函数不是普通的函数，python把这个函数当成一个 <strong><code>生成器</code></strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>        <span class="token keyword">yield</span> i        i <span class="token operator">+=</span> <span class="token number">1</span>res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> func<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><p>运行结果：<code>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</code></p><p>下面的三个函数不断提高斐波那契数列的可用性：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 复用性差，其他函数无法获得该函数的输出序列。函数返回值为  None</span><span class="token keyword">def</span> <span class="token function">fab</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">:</span>    n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token keyword">while</span> n <span class="token operator">&lt;</span> max<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b        n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span>fab<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><p>运行结果：<br>1<br>1<br>2<br>3<br>5<br>8<br>13<br>21<br>34<br>55  </p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 使用列表保存结果，提高函数的可复用性</span><span class="token keyword">def</span> <span class="token function">fab</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">:</span>    n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>    L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> n <span class="token operator">&lt;</span> max<span class="token punctuation">:</span>        L<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token punctuation">)</span>        a <span class="token punctuation">,</span> b <span class="token operator">=</span> b <span class="token punctuation">,</span> a <span class="token operator">+</span> b        n <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> LL <span class="token operator">=</span> fab<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span></code></pre><p>问题：上面的函数运行的过程中占用的内存会随着参数max的增加而增加。如果需要控制内存占用，那么最好不要使用列表保存中间结果，而是使用可迭代对象进行迭代。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fab</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">:</span>    n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token keyword">while</span> n <span class="token operator">&lt;</span> max<span class="token punctuation">:</span>        <span class="token keyword">yield</span> b        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b        n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">for</span> x <span class="token keyword">in</span> fab<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre><p>运行结果：<br>1<br>1<br>2<br>3<br>5<br>8<br>13<br>21<br>34<br>55  </p>]]></content>
      
      
      <categories>
          
          <category> python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020.6.16学习内容记录</title>
      <link href="/2020/06/16/15194.html"/>
      <url>/2020/06/16/15194.html</url>
      
        <content type="html"><![CDATA[<h1 id="2020-6-16学习内容记录"><a href="#2020-6-16学习内容记录" class="headerlink" title="2020.6.16学习内容记录"></a>2020.6.16学习内容记录</h1><ul><li>吴恩达机器学习课程<ul><li>39.7-1.过拟合问题(Av50747658,P39).mp4</li><li>40.7-2.代价函数(Av50747658,P40).mp4</li><li>41.7-3.线性回归的正则化(Av50747658,P41).mp4<br>&lt;!– * 《python深度学习-基于python》</li><li>第一章节 Numpy基础</li><li>第二章节 PyTorch基础</li><li>第三章节 PyTorch神经网络工具箱</li><li>第四章节 PyTorch数据处理工具箱 –&gt;</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习内容记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习内容记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习中一些数学概念</title>
      <link href="/2020/06/15/38767.html"/>
      <url>/2020/06/15/38767.html</url>
      
        <content type="html"><![CDATA[<h1 id="机器学习中一些数学概念"><a href="#机器学习中一些数学概念" class="headerlink" title="机器学习中一些数学概念"></a>机器学习中一些数学概念</h1><p><a href="https://blog.csdn.net/zealfory/article/details/53707608" target="_blank" rel="noopener">闭式解（解析解）and 数值解</a></p>]]></content>
      
      
      <categories>
          
          <category> 数学概念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率统计 小知识点汇总</title>
      <link href="/2020/06/13/42530.html"/>
      <url>/2020/06/13/42530.html</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="概率统计-小知识点汇总"><a href="#概率统计-小知识点汇总" class="headerlink" title="概率统计 小知识点汇总"></a>概率统计 小知识点汇总</h1><ul><li>$$ \int_{0 }^{\infty }x^{n}e^{-x}dx=n! $$</li><li>$$ \int_{-\infty }^{+\infty }e^{-t^{2}}dt=\sqrt{\pi} $$</li><li>相关性和独立性<ul><li>相关性是指两个随机变量之间的线性关系，不相关只是说明他们之间没有线性关系，但是可以有别的关系，所以不相关不一定意味着相互独立。</li><li>如果两个变量独立，就是说明他们之间没有任何的关系，自然也就没有线性关系，所以意味着它们不相关。反过来说如果两个变量相关，也就是说他们之间有线性关系，那么自然这两个变量不独立。</li></ul></li><li>离散型随机变量和连续型随机变量的期望<ul><li>离散型随机变量的期望：<br>$$ E(X)=\sum_{i=1}^{m}x_{i}p_{i} $$</li><li>连续型随机变量的期望：<br>$$ E(X)=\int_{-\infty }^{+\infty}xf(x)dx $$<br>其中f(x)是概率密度函数，f(x)dx是x对应的概率面积。 </li><li>基本性质<ul><li>E(C) = C</li><li>E(CX) = CE(x)</li><li>E(X+Y) = E(X)+E(Y)</li><li>E(X-Y) = E(X)-E(Y)</li><li>若X,Y独立，则E(XY) = E(X)*E(Y)</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 概率统计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概率统计 </tag>
            
            <tag> 王式安网课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语法 Numpy</title>
      <link href="/2020/06/10/50420.html"/>
      <url>/2020/06/10/50420.html</url>
      
        <content type="html"><![CDATA[<h1 id="python语法-Numpy"><a href="#python语法-Numpy" class="headerlink" title="python语法 Numpy"></a>python语法 Numpy</h1><h4 id="创建np-ndarray数组-矩阵"><a href="#创建np-ndarray数组-矩阵" class="headerlink" title="创建np.ndarray数组(矩阵)"></a>创建np.ndarray数组(矩阵)</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> random<span class="token comment" spellcheck="true"># 使用numpy生成数组，得到ndarray类型</span>t1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">)</span>t3 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10.25</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看ndarray类型对象中保存的数据类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>t3<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置numpy数组数据类型</span>t4 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t4<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t4<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># numpy中的bool类型</span>t5 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>bool<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t5<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>t5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调整数据类型</span>t6 <span class="token operator">=</span> t5<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">"int8"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t6<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>t6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># numpy中的小数</span>t7 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t7<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>t7<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 取小数，保留小数点后的两位</span>t8 <span class="token operator">=</span> np<span class="token punctuation">.</span>round<span class="token punctuation">(</span>t7<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t8<span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5ee0e4aec2a9a83be5ee9479.jpg" alt="运行的结果"></p><ul><li>数组的形状</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># numpy数组的形状</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npt1 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t2<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>t3 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t3<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5ee0fd4ac2a9a83be5121074.jpg" alt="运行结果">  </p><h4 id="改变数组的形状"><a href="#改变数组的形状" class="headerlink" title="改变数组的形状"></a>改变数组的形状</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 改变numpy数组的形状</span>t4 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t4<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t4<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># t4原先有12个数据，3*4刚好是12</span><span class="token comment" spellcheck="true"># resize是改变原数组的,但是reshape却不改变</span>t5 <span class="token operator">=</span> t4<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t5<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t5<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>t6 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t6<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t6<span class="token punctuation">.</span>shape<span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5ee0fdb4c2a9a83be512d399.jpg" alt="运行结果"></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 把t6改变成为一个1维的数组</span>t6 <span class="token operator">=</span> t6<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t6<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t6<span class="token punctuation">.</span>shape<span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5ee0fdf1c2a9a83be51338de.jpg" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 当不知道t6的具体形状的时候（需要知道维度），将t6改变成为一个1维数组</span>t6 <span class="token operator">=</span> t6<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span>t6<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>t6<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>t6<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 使用flatten()方法把数组转换成1维</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>b <span class="token operator">=</span> a<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 把数组转化成1维的数组</span></code></pre><p><img src="https://pic.downk.cc/item/5ee0fe71c2a9a83be514205b.jpg" alt=""></p><h4 id="数组和数的操作（numpy的广播机制使得加减乘除操作作用到每一个元素上）"><a href="#数组和数的操作（numpy的广播机制使得加减乘除操作作用到每一个元素上）" class="headerlink" title="数组和数的操作（numpy的广播机制使得加减乘除操作作用到每一个元素上）"></a>数组和数的操作（numpy的广播机制使得加减乘除操作作用到每一个元素上）</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npm <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">*</span> <span class="token number">25</span> <span class="token operator">+</span> <span class="token string">"分割线"</span> <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># +1的操作时对数组的每一个元素施加操作（numpy的广播机制）</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">*</span> <span class="token number">25</span> <span class="token operator">+</span> <span class="token string">"分割线"</span> <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">*</span> <span class="token number">25</span> <span class="token operator">+</span> <span class="token string">"分割线"</span> <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5ee1019ec2a9a83be519741b.jpg" alt="运行结果"></p><p>注意：m / 0 的结果比较特殊。其中nan表示非数，inf表示无穷大值。</p><p><img src="https://pic.downk.cc/item/5ee101f0c2a9a83be51a009c.jpg" alt="m/0的结果"></p><h4 id="数组和数组进行计算-两个数组的维度相同"><a href="#数组和数组进行计算-两个数组的维度相同" class="headerlink" title="数组和数组进行计算(两个数组的维度相同)"></a>数组和数组进行计算(两个数组的维度相同)</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npm1 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>m2 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">124</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m1 <span class="token operator">+</span> m2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">*</span> <span class="token number">25</span> <span class="token operator">+</span> <span class="token string">"分割线"</span> <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m1 <span class="token operator">-</span> m2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">*</span> <span class="token number">25</span> <span class="token operator">+</span> <span class="token string">"分割线"</span> <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m1 <span class="token operator">*</span> m2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">*</span> <span class="token number">25</span> <span class="token operator">+</span> <span class="token string">"分割线"</span> <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m1 <span class="token operator">/</span> m2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">*</span> <span class="token number">25</span> <span class="token operator">+</span> <span class="token string">"分割线"</span> <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5ee10833c2a9a83be523a900.jpg" alt=""></p><h4 id="数组和数组进行计算-两个数组的维度不同"><a href="#数组和数组进行计算-两个数组的维度不同" class="headerlink" title="数组和数组进行计算(两个数组的维度不同)"></a>数组和数组进行计算(两个数组的维度不同)</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npm1 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>m2 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>m3 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m3 <span class="token operator">-</span> m1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 对每一行进行操作</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m3 <span class="token operator">-</span> m2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 对每一列进行操作</span></code></pre><p><img src="https://pic.downk.cc/item/5ee10fccc2a9a83be531774f.jpg" alt=""></p><p><img src="https://pic.downk.cc/item/5ee11a0bc2a9a83be5442d4e.jpg" alt=""></p><h4 id="轴-axis"><a href="#轴-axis" class="headerlink" title="轴(axis)"></a>轴(axis)</h4><ul><li>在Numpy中可以理解为方向，用数字0，1，2，…表示，对于一个一维的数组，只有一个0轴，对于二位的数组，有0轴和1轴，对于三维的数组，有0轴，1轴和2轴。</li><li>有了轴的概念，计算会更加的方便。比如计算2维数组的平均值，必须指定是那个方向上的数字平均值。</li></ul><p><img src="https://pic.downk.cc/item/5ee12ac2c2a9a83be5598ee0.jpg" alt=""></p><p><img src="https://pic.downk.cc/item/5ee12b14c2a9a83be559eb45.jpg" alt=""></p><h4 id="numpy读取CSV文件（实际使用中用pandas）"><a href="#numpy读取CSV文件（实际使用中用pandas）" class="headerlink" title="numpy读取CSV文件（实际使用中用pandas）"></a>numpy读取CSV文件（实际使用中用pandas）</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#fname是文件路径和名称；</span><span class="token comment" spellcheck="true">#dtype是文件中的数据类型；</span><span class="token comment" spellcheck="true">#delimiter是文件中的分隔符；</span><span class="token comment" spellcheck="true">#unpack是True实现类似矩阵的转置；</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npnp<span class="token punctuation">.</span>loadtxt<span class="token punctuation">(</span>fname<span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"float"</span><span class="token punctuation">,</span> comments<span class="token operator">=</span><span class="token string">'#'</span><span class="token punctuation">,</span> delimiter<span class="token operator">=</span><span class="token string">","</span><span class="token punctuation">,</span> converters<span class="token operator">=</span>None<span class="token punctuation">,</span> skiprows<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> usecols<span class="token operator">=</span>None<span class="token punctuation">,</span> unpack<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> ndmin<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5ee41bfec2a9a83be55ac2a5.jpg" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npfile_path <span class="token operator">=</span> r<span class="token string">"c:\users\wanggongsheng\desktop\students.csv"</span>m <span class="token operator">=</span> np<span class="token punctuation">.</span>loadtxt<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> delimiter<span class="token operator">=</span><span class="token string">","</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"str"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span></code></pre><h4 id="numpy转置一个array"><a href="#numpy转置一个array" class="headerlink" title="numpy转置一个array"></a>numpy转置一个array</h4><p><img src="https://pic.downk.cc/item/5ee41de4c2a9a83be55bb53b.jpg" alt=""></p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>a <span class="token operator">=</span> a<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5ee42205c2a9a83be55f5ead.jpg" alt="运行结果"></p><h3 id="numpy索引和切片"><a href="#numpy索引和切片" class="headerlink" title="numpy索引和切片"></a>numpy索引和切片</h3>]]></content>
      
      
      <categories>
          
          <category> python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
            <tag> numpy </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高数 求导与积分公式</title>
      <link href="/2020/06/10/60452.html"/>
      <url>/2020/06/10/60452.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic.downk.cc/item/5ee0c57bc2a9a83be5b76067.jpg" alt=""></p><p><img src="https://pic.downk.cc/item/5ee0c5e5c2a9a83be5b81d56.jpg" alt=""></p><p><img src="https://pic.downk.cc/item/5ee0c60cc2a9a83be5b85f66.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 高数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习方法总结</title>
      <link href="/2020/06/10/7567.html"/>
      <url>/2020/06/10/7567.html</url>
      
        <content type="html"><![CDATA[<h1 id="学习方法总结"><a href="#学习方法总结" class="headerlink" title="学习方法总结"></a>学习方法总结</h1><ul><li>多实践感受</li><li>做好学习的过程记录</li><li>基础知识很重要</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习 Logistic Regression</title>
      <link href="/2020/06/09/39058.html"/>
      <url>/2020/06/09/39058.html</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="机器学习-Logistic-Regression"><a href="#机器学习-Logistic-Regression" class="headerlink" title="机器学习 Logistic Regression"></a>机器学习 Logistic Regression</h1><p>Logistic Regression是目前最流行使用最广泛的一种学习算法。常见的分类任务：</p><ul><li>Email: Spam / Not Spam ?</li><li>Online Transcations: Fraudulent(YES / NO) ?</li><li>Tumor: Malignant / Benign</li></ul><h2 id="6-1-分类问题"><a href="#6-1-分类问题" class="headerlink" title="6.1 分类问题"></a>6.1 分类问题</h2><p>&ensp;&ensp;&ensp;&ensp;分类问题包括二元的分类问题和多元分类问题，先研究二元分类问题：  </p><p>&ensp;&ensp;&ensp;&ensp;dependent variable可能属于两个类别，negative class 和 positive class 。即 \( y \in \{0, 1\} \) 。其中 0 表示负向类(negative class)， 1 表示正向类(positive class)。  </p><p><img src="https://pic.downk.cc/item/5edf4deec2a9a83be5ce93d8.jpg" alt=""></p><p>&ensp;&ensp;&ensp;&ensp;当我们使用 <strong><code>线性回归</code></strong> 的时候，我们 <strong><code>假设函数</code></strong> 的输出值可能大于1，也可能远远小于0，即使我们使用的 <strong><code>训练样本</code></strong> 的 <strong><code>标签y</code></strong> 都等于 0 or 1。 <strong>假设函数</strong> 得到的值远大于1 or 远小于0会让人感觉奇怪。</p><p>&ensp;&ensp;&ensp;&ensp;引入 <strong><code>逻辑回归算法</code></strong> ，这个算法的性质是： 它的输出值永远在 0 到 1 之间。</p><p>&ensp;&ensp;&ensp;&ensp;eg. <strong>逻辑回归算法</strong> 是分类算法，它适合用于标签值 <strong>离散</strong> 的状况。</p><h2 id="6-2-假说表示（Hypothesis-Representation）"><a href="#6-2-假说表示（Hypothesis-Representation）" class="headerlink" title="6.2 假说表示（Hypothesis Representation）"></a>6.2 假说表示（Hypothesis Representation）</h2><p>&ensp;&ensp;&ensp;&ensp;我们希望得到一个函数，这个函数的预测值要在0到1之间。之前使用<strong>线性回归</strong>求出适合数据的一条直线。</p><p><img src="https://pic.downk.cc/item/5edf51d9c2a9a83be5d4bac7.jpg" alt=""></p><p>&ensp;&ensp;&ensp;&ensp;如果使用<strong>线性回归</strong>，我们只能预测<strong>连续的值</strong>，而这个分类问题需要输出0 or 1。我们可以预测：<br>若\( h_{\Theta}(x)&gt;=0.5 \)，预测\( y = 1 \)。<br>若\( h_{\Theta}(x)&lt;0.5 \)，预测\( y = 0 \)。<br>&ensp;&ensp;&ensp;&ensp;对于上面的数据，使用线性模型似乎可以完成分类任务。但是，如果我们加入一个新的Tumor size非常大的样本。加入训练集之后，这样就可以得到一个新的拟合直线。发现此时的使用0.5作为阈值已经不合适了。所有由此可见，线性回归模型不适合解决分类问题。</p><ul><li>线性回归的预测值是连续值的形式，不适概率的形式</li><li>对数据分布比较敏感</li><li><a href="https://blog.csdn.net/dpengwang/article/details/100159369" target="_blank" rel="noopener">参考资料：线性回归为什么不适合做分类</a></li></ul><p><img src="https://pic.downk.cc/item/5edf59bcc2a9a83be5e09046.jpg" alt=""></p><p>&ensp;&ensp;&ensp;&ensp;引入新的模型：<strong>逻辑回归</strong>， 该模型的输出变量始终在0到1之间。假设\( h_{\Theta }(x) = g(\Theta^{T}x) \)。 其中\( x \)代表特征向量，\( g \)代表一个常用的逻辑函数 Sigmoid function，公式为 \( g(z) = \frac{1}{1+e^{-z}} \)。则可以得出\( h_{\theta }(x) = \frac{1}{1 + e^{-\Theta^{T}x }} \)</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">def</span> <span class="token function">sigmoid</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5edf76ffc2a9a83be50ac2d5.jpg" alt="sigmoid函数图像"></p><p>&ensp;&ensp;&ensp;&ensp;\( h_{\theta }(x) \)的作用是根据给定的输入变量，根据选择的参数给出输出变量等于1的可能性（estimated probablity），即\( h_{\theta }(x) = P\{y = 1|x;\Theta \} \)。例如：如果对于给定的\( x \)，通过计算机得出\( h_{\theta }(x) = 0.7 \)，则表示70%的概率\( y \)为正向类，相应的30%的概率为负向类。</p><h2 id="6-3-判定边界-Decision-Boundary"><a href="#6-3-判定边界-Decision-Boundary" class="headerlink" title="6.3 判定边界 Decision Boundary"></a>6.3 判定边界 Decision Boundary</h2><p><strong>加深理解逻辑回归的假设函数在计算什么？</strong>  </p><p><img src="https://pic.downk.cc/item/5edf80a9c2a9a83be5186b59.jpg" alt=""></p><p>在逻辑回归当中，我们预测：  </p><ul><li>若\( h_{\Theta}(x)&gt;=0.5 \)，预测\( y = 1 \)。  </li><li>若\( h_{\Theta}(x)&lt;0.5 \)，预测\( y = 0 \)。</li></ul><p>根据绘制的 S 形函数图像，可以知道 \( z \) 和 \( g(z) \)之间的关系。 </p><ul><li>\( z = 0 \) 时，\( g(z) = 0.5 \)</li><li>\( z &gt; 0 \) 时，\( g(z) &gt; 0.5 \)</li><li>\( z &lt; 0 \) 时，\( g(z) &lt; 0.5 \) </li></ul><p>又 \( z=\Theta ^{T}x \)，即：\( \Theta ^{T}x&gt;=0 \)时，预测\( y=1 \)； \( \Theta ^{T}x&lt;0 \)时，预测\( y=0 \)；   </p><p>假设有这样一个模型：  </p><p><img src="https://pic.downk.cc/item/5edf8f0ac2a9a83be52e1eb7.jpg" alt=""></p><p>并且参数是向量\( [-3, 1, 1] \)。当\( -3+x_{1}+x_{2}&gt;=0  \)，即\( x_{1}+x_{2}&gt;=3 \)，我们预测\( y=1 \)。我们可以绘制直线\( x_{1}+x_{2}=3 \)，这条直线便是我们模型的分界线(它就是决策界限，是假设函数和参数两者对应的一个属性，而不是数据集的属性)，把我们预测为1和预测为0的区域分隔开。  </p><p><img src="https://pic.downk.cc/item/5ee06958c2a9a83be511c149.jpg" alt=""></p><p>如果数据分布是这样的话，需要什么样的模型呢？</p><p><img src="https://pic.downk.cc/item/5ee06a6dc2a9a83be51490bc.jpg" alt=""></p><p>以为是需要用到曲线才可以分割\( y=1 \)和\( y=0 \)的区域，因此我们需要二次方特征：$$ h_{\Theta }(x)=g(\Theta_{0}+\Theta_{1}x_{1}+\Theta_{2}x_{2}+\Theta_{3}x_{1}^{2}+\Theta_{4}x_{2}^{2})<br>$$参数\( \Theta^{T}=[-1, 0, 0, 1, 1] \)，可以得到判定边界恰好是圆心在原点且半径为1的圆形。现在已经可以使用非常复杂的模型来适应非常复杂形状的判定边界。</p><h2 id="6-4-代价函数（Cost-Function）"><a href="#6-4-代价函数（Cost-Function）" class="headerlink" title="6.4 代价函数（Cost Function）"></a>6.4 代价函数（Cost Function）</h2><p>问题：之前已经学会了如何拟合线性回归模型的参数\( \Theta \)，那么如何拟合逻辑回归模型的参数\( \Theta \)？定义用来拟合参数的<strong>优化目标</strong>或者说是<strong>代价函数</strong>，便是监督学习问题中逻辑回归模型的拟合问题。</p><p><img src="https://pic.downk.cc/item/5ee07144c2a9a83be523a97a.jpg" alt="">  </p><p>对于<strong>线性回归模型</strong>，我们定义的代价函数是所有<strong>模型误差</strong>的平方和。如果对逻辑回归模型继续使用这个定义，问题出现了，当我们把我们把\( h_{\Theta}(x)=\frac{1}{1+e^{-\Theta^{T}x}} \)带入到定义的代价函数中时候，我们可以得到一个<strong>非凸函数（non-convexfunction）</strong>  </p><p><img src="https://pic.downk.cc/item/5ee0734ac2a9a83be528d8f2.jpg" alt=""></p><p>这种情况下，代价函数有很多局部最小值，这将会影响<strong>梯度下降算法</strong>寻找局部最小值。<br><strong>线性回归的代价函数</strong>\( J(\Theta)=\frac{1}{m}\sum_{i=1}^{m}\frac{1}{2}(h_{\Theta}(x^{(i)})-y^{(i)})^{2} \)。这里重新定义逻辑回归的代价函数为：$$ J(\Theta)=\frac{1}{m}\prod_{i=1}^{m}Cost(h_\Theta (x^{(i)})-y^{(i)}) $$其中</p><p><img src="https://pic.downk.cc/item/5ee08d08c2a9a83be560f4dd.jpg" alt=""></p><p>\( h_{\Theta}(x) \)和\( Cost(h_\Theta (x)-y) \)之间的关系如下：  </p><p><img src="https://pic.downk.cc/item/5ee08f1bc2a9a83be566874a.jpg" alt=""></p><p>这里的\( Cost(h_\Theta (x)-y) \)的特点是：若实际\( y=1 \)且\( h_\Theta (x) \)也是1时候误差为0，当\( h_\Theta (x) \)不是1时候误差随着\( h_\Theta (x) \)变小而增大；当实际的\( y=0 \)且\( h_\Theta (x) \)也是0的时候误差为0，当\( h_\Theta (x) \)不是0的时候误差随着\( h_\Theta (x) \)变大而变大。即：$$ Cost(h_\Theta (x)-y)=-ylog(h_{\Theta}(x))-(1-y)log(1-h_{\Theta}(x)) $$带入到代价函数得到：$$ J(\Theta)=\frac{1}{m}\prod_{i=1}^{m}Cost(h_\Theta (x^{(i)})-y^{(i)}) $$ $$ =\frac{1}{m}\prod_{i=1}^{m}(-y^{(i)}log(h_{\Theta}(x^{(i)}))-(1-y^{(i)})log(1-h_{\Theta}(x^{(i)})) $$ $$=-\frac{1}{m}\prod_{i=1}^{m}(y^{(i)}log(h_{\Theta}(x^{(i)}))+(1-y^{(i)})log(1-h_{\Theta}(x^{(i)})) $$</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">def</span> <span class="token function">sigmoid</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">cost</span><span class="token punctuation">(</span>theta<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    theta <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>theta<span class="token punctuation">)</span>    X <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>X<span class="token punctuation">)</span>    y <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    first <span class="token operator">=</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span><span class="token operator">-</span>y<span class="token punctuation">,</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>sigmoid<span class="token punctuation">(</span>X <span class="token operator">*</span> theta<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    second <span class="token operator">=</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>y<span class="token punctuation">)</span> <span class="token punctuation">,</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> sigmoid<span class="token punctuation">(</span>X <span class="token operator">*</span> theta<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>first <span class="token operator">+</span> second<span class="token punctuation">)</span> <span class="token operator">/</span> len<span class="token punctuation">(</span>X<span class="token punctuation">)</span></code></pre><p>在使用了这样的一个<strong>代价函数</strong>之后,我们就可以使用梯度下降算法计算使得代价函数最小的函数了。算法为：<br>$$ \frac{\partial }{\partial \Theta_{j}}J(\Theta ):=\frac{1}{m}\sum_{i=1}^{m}[h_{\Theta }(x^{(i)})-y^{(i)}]x_{j}^{(i)} $$ 计算的过程如下：$$ J(\Theta)=\frac{1}{m}\sum_{i=1}^{m}[-y^{(i)}log(h_{\Theta}(x^{(i)}))-(1-y^{(i)})log(1-h_{\Theta}(x^{(i)}))] $$ $$ =-\frac{1}{m}\sum_{i=1}^{m}[y^{(i)}log(h_{\Theta}(x^{(i)}))+(1-y^{(i)})log(1-h_{\Theta}(x^{(i)}))] $$ 而且 $$ y^{(i)}log(\frac{1}{1+e^{-\Theta^{T}x^{(i)}}})+(1-y^{(i)})log(1-\frac{1}{1+e^{-\Theta^{T}x^{(i)}}}) $$ $$ =-y^{(i)}log(1+e^{-\Theta^{T}x^{(i)}})-(1-y^{(i)})log(1+e^{\Theta^{T}x^{(i)}}) $$ 由此可以得到： $$ \frac{\partial}{\partial \Theta_{j}}J(\Theta)=-\frac{1}{m}\sum_{i=1}^{m}\frac{\partial}{\partial \Theta_{j}}[-y^{(i)}log(1+e^{-\Theta^{T}x^{(i)}})-(1-y^{(i)})log(1+e^{\Theta^{T}x^{(i)}})] $$ $$ =-\frac{1}{m}\sum_{i=1}^{m}[-y^{(i)}\frac{\partial}{\partial \Theta_{j}}log(1+e^{-\Theta^{T}x^{(i)}})-(1-y^{(i)})\frac{\partial }{\partial \Theta_{j}}log(1+e^{\Theta^{T}x^{(i)}})] $$ $$ =-\frac{1}{m}\sum_{i=1}^{m}[\frac{x_{j}^{(i)}y^{(i)}}{1+e^{\Theta^{T}x^{(i)}}}+\frac{e^{-\Theta ^{T}x^{(i)}}x_{j}^{(i)}(y^{(i)}-1)}{1+e^{\Theta^{T}x^{(i)}}}] $$ $$ =\frac{1}{m}\sum_{i=1}^{m}[h_{\Theta}(x^{(i)})-y^{(i)}]x_{j}^{(i)} $$</p><p>这里的我们定义了单训练样本的代价函数，这里选择的代价函数给了一个凸优化问题，没有局部最优值。因此可以使用梯度下降算法进行求使得代价函数最小的参数。<br>eg. 在使用梯度下降算法之前，使用特征缩放是有必要的。这样加快梯度下降算法的运行时间。除了梯度下降算法，还有一些经常用来使得代价函数最小的算法。这些算法更加的复杂和优秀，而且通常不需要人工选择学习率，通常比梯度下降算法更加的优秀。例如：</p><ul><li>共轭梯度（Conjugate Gradient）</li><li>局部优化法（BFGS,Broyden fletcher goldfarbg shann）</li><li>有限内存局部优化法（LBFGS）</li></ul><h2 id="6-5-简化的成本函数和梯度下降"><a href="#6-5-简化的成本函数和梯度下降" class="headerlink" title="6.5 简化的成本函数和梯度下降"></a>6.5 简化的成本函数和梯度下降</h2><h2 id="6-6-高级优化"><a href="#6-6-高级优化" class="headerlink" title="6.6 高级优化"></a>6.6 高级优化</h2><p>上面6.4已经讲过了。补充一下：这里使用的逻辑回归对应的假设函数的预测值是一个概率，表示 \( p(y=1|x;\Theta) \) ，就是关于x以\( \theta \)为参数，y = 1的概率。即假设就是估计y=1的概率。<br>注意监控梯度下降算法以保证梯度下降算法收敛。</p><h2 id="6-7-多类别分类：一对多"><a href="#6-7-多类别分类：一对多" class="headerlink" title="6.7 多类别分类：一对多"></a>6.7 多类别分类：一对多</h2><p>例如判断天气：y=1表示晴天，y=2表示多云，y=3表示雨天，y=4表示下雪天。<br>之前学过二分类问题：</p><p><img src="https://pic.downk.cc/item/5ee73b91c2a9a83be5239645.jpg" alt=""></p><p>多分类问题是这样的：</p><p><img src="https://pic.downk.cc/item/5ee73bb7c2a9a83be523bdeb.jpg" alt=""></p><p>这里使用三种符号表示三种不同的类别，问题是给出三个类别的数据集，如何进行分类呢？可以使用”一对余”的方法。</p><p><img src="https://pic.downk.cc/item/5ee73c47c2a9a83be5246149.jpg" alt=""></p><p>现在有一个训练集，如上图表示一共有三种类别，这里使用三角形表示y=1；用方框表示y=2；用叉叉表示y=3。下面要做的事情就是使用一个训练集，将其分成3个二元分类问题。 </p><p>这里从三角形表示的类别1开始，我们是是实际上创建一个新的伪的训练集。将类别2和类别3定义为父类，类别1定义为正类，创建的新的训练集如下图所以，我们根据新的训练集拟合出一个合适的分类器。  </p><p><img src="https://pic.downk.cc/item/5ee73dbdc2a9a83be52699b2.jpg" alt=""></p><p>这里的三角形是正样例，而圆形是负样例。设置三角形的值为1，圆形的值为0，这样我们可以训练一个标准的逻辑回归分类器，这样我们可以得到一个决策边界。  </p><p>为了能够实现上面的想法，我们把多个类别中的一个类别标记为正向类（y=1），然后其余的类别标记为负向类，这个模型记作\( h_{\Theta }^{(1)}(x) \)。类似的，我们选择另一个类标记为正向类（y=2），再将其他的类别标记为负向类，将这个模型记作\( h_{\Theta }^{(2)}(x) \)。依次类推，最后得到一个模型简记为：\( h_{\Theta }^{(i)}(x)=p(y=i| x;\Theta) \),其中: \( i=(1,2,3,..k) \)，k是不同的类别总数。这样，一共可以得到k个分类器。  </p><p>在进行预测的时候，把k个分类器都运行一遍，然后对每一个输入的变量，选择最高可能性的输出变量。  </p><p>训练逻辑分类器\( h_{\Theta }^{(i)}(x) \)，其中 i 对应每一个可能的 y = i 。最后，为了预测，给出一个新的 x 的值，对它进行预测。在分类器中输入 x ，然后选择一个让 \( h_{\Theta }^{(i)}(x) \) 最大的 i ，即 \( \max_{i} h_{\Theta }^{(i)}(x) \)。  </p><p>到此已经知道了挑选分类器的方法，选择出的分类器是可信度最高效果最好的，那么可以认为是一个正确的分类。无论 i 的值是多少，我们都有最高的概率值，我们的预测 y 就是那个值。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 吴恩达机器学习课程 </tag>
            
            <tag> Logistic Regression </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>考研复习经验</title>
      <link href="/2020/06/09/7268.html"/>
      <url>/2020/06/09/7268.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、我的考研概况"><a href="#一、我的考研概况" class="headerlink" title="一、我的考研概况"></a>一、我的考研概况</h3><table><thead><tr><th>初试成绩</th><th align="center">政治</th><th align="center">英语一</th><th align="center">数学一</th><th align="center">专业课845</th><th align="center">初试排名</th><th align="center">复试成绩</th><th align="center">总成绩</th><th align="right">总排名</th></tr></thead><tbody><tr><td>328</td><td align="center">64</td><td align="center">74</td><td align="center">86</td><td align="center"><strong><code>104</code></strong></td><td align="center">65/84</td><td align="center">167</td><td align="center">495</td><td align="right">50/70</td></tr></tbody></table><ul><li>因为专业课成绩在2020年考研中还可以，所以我这里主要讲一下 <strong><code>845专业课</code></strong> 的复习，希望给以后打算考南大计算机的同学做一个参考。另外，每个人的方法都是不同的，合适自己的才是最好的。</li></ul><h3 id="二、专业课复习"><a href="#二、专业课复习" class="headerlink" title="二、专业课复习"></a>二、专业课复习</h3><p><strong>845专业课目录</strong></p><ul><li><strong>计算机系统基础</strong></li><li>数据结构</li><li>计算机网络</li><li><strong>算法</strong></li><li>操作系统</li></ul><hr><p><strong><code>计算机系统基础</code></strong>：(从2017年加入845共计考了4年，可以参考的考试题目较少)  </p><p>推荐的书籍： 《计算机系统基础》，《计算机系统基础-习题解答与教学指导》</p><p>推荐网课：MOOC四门网课《计算机系统基础（一）》，《计算机系统基础（二）》，《计算机系统基础（三）》，《计算机系统基础（四）》  </p><p>推荐资料：袁春风对应课程PPT（MOOC上相应的课程有PPT，或者加个QQ群直接下载群文件即可）</p><p>建议：</p><ul><li><p>复习的时候 <strong>不建议</strong> 直接阅读《计算机系统基础》，因为《计算机系统基础》书籍中很多内容并不会进行考查，而且内容 <strong>难度</strong> 相比其他科目较大，建议把这本书当成一本工具书使用，就是网课内容如果某个地方讲的不够非常的详细，那么可以看看这本书相应的内容。建议直接看MOOC上袁春凤的课程，在每一章结束之后做《计算机系统基础-习题解答与教学指导》上对应的习题。</p></li><li><p>章节复习：</p><ul><li><p>第二章节–数据的机器级表示和处理</p><blockquote><p><font color="green">容易考查选择题，另外这个章节是第三章节的基础。</font></p></blockquote></li><li><p>第三章节–程序的转换与机器级表示</p><blockquote><p><font color="green">重要&ensp;!&ensp;南京大学的845科目自从添加了计算机系统基础课程后每年都从这个地方出大题目，这个章节学好了之后，应该这门专业课的成绩不会太差。此外，在做完相应的章节练习之后，最好能够独立完成”<a href="http://files.cnblogs.com/remlostime/bomb.zip" target="_blank" rel="noopener">二进制炸弹</a>“(IA-32)，因为它包含了字符串、循环、条件/分支、递归调用和栈、指针、链表/指针/结构各个题型的内容。<a href="https://blog.csdn.net/nandawys/article/details/9837815" target="_blank" rel="noopener">这是题解</a></font><br><img src="https://i.loli.net/2020/06/24/xCc81YQrZOIlL4z.png" alt=""><br><img src="https://i.loli.net/2020/06/24/YD7rCPI2A5tvzaO.png" alt="2018年"><br><img src="https://i.loli.net/2020/06/24/cZIe7C2wiukAB8q.png" alt=""><br><img src="https://i.loli.net/2020/06/24/Qv5zaMgL69AeR3c.png" alt="2017年"></p></blockquote></li><li><p>第六章节–层次结构存储系统 </p><blockquote><p><font color="green">在845没有加入计算机系统基础课程之前，曾经考察过层次存储系统的大题目。另外该章节的内容容易在其他的题目中进行简单的考察。</font><br><img src="https://i.loli.net/2020/06/24/4sNqPmxodI5R1M3.png" alt=""><br><img src="https://i.loli.net/2020/06/24/loWNFtxQs4586ka.png" alt=""><br><img src="https://i.loli.net/2020/06/24/ve1b6dcMlDX8B2j.png" alt="2016年的计算机组成原理，2017年开始调整为计算机系统基础"></p></blockquote></li></ul></li><li><p><strong>《计算机系统基础》</strong> 参照 <strong>《深入理解计算机系统》</strong> 进行编写，因此如果看过《深入理解计算机系统》，那么这门专业课复习就比较容易。不建议使用 <strong>《深入理解计算机系统》</strong> 进行考研复习，因为这本书采用的是 <strong>X86</strong> 体系架构，而《计算机系统基础》采用的是 <strong>IA-32</strong>。而且 <strong>《深入理解计算机系统》</strong> 内容较多，建议 <strong>考研之前</strong> 进行阅读or <strong>考研之后</strong> 进行阅读。</p></li><li><p>没有上过《计算机系统基础》课程的同学需要留出 <strong><code>足够的时间</code></strong> 复习计算系统基础，建议留出 <strong>不少于</strong> 数据结构的时间，这门课程的难度应该是845中最难的一门了，所以要给出充足的时间进行复习。</p></li><li><p>加入相应的群，遇到不会的问题问一下。21届的学生可以加入“2021南大CS考研劝退”群（qq群号：550150534），里面有很多已经上岸的学长学姐和正在考研的同学。里面经常会交流一些专业课的内容。</p></li></ul><hr><p><strong><code>算法</code></strong> :</p><ul><li><p>官网推荐的书籍是黄宇的书。首先建议同学买一本看看。我当时因为一些原因没看过这本书，但是一起考研的群友挺推荐这本书的。</p><p><img src="https://img9.doubanio.com/view/subject/s/public/s29510924.jpg" alt=""></p></li><li><p>845的算法题主要是以 <strong>图</strong> 和 <strong>动态规划</strong> 为主（图更加重要），目前只考过者两种题型（有可能以后要考察贪心算法等其他类型的算法，大家复习的时候争取做到全面）。2019年考了一次 <code>动态规划</code> 的经典模板题型。 我今年考场考的是 <code>图</code> 的搜索，复试的 C++ 科目考察了 <code>动态规划</code> 的经典模板题 <code>编辑距离</code>（20分）。此外，选导师的时候编程考查了 <code>树的遍历</code> 和 <code>贪心算法</code>。</p></li><li><p>（推荐内容）对于有过 <strong>算法经验</strong> 并且 <strong>时间充裕</strong> 的同学，建议阅读 <strong>《信息竞赛一本通》</strong> 中的 <strong><code>图</code></strong>，  <strong><code>动态规划</code></strong> 以及《算法笔记》中的 <strong><code>图</code></strong> 部分内容。</p></li><li><p>想要考南京大学的学生要多多练习练习自己的算法能力。特别是18级学生可以多多进行一些算法的练习，不仅仅是为了考研，找工作的时候，基本的算法能力是基础（参加招聘的时候，需要首先通过笔试（一般会包含算法编程题）测试，笔试测试通过之后才可以进入面试）。</p></li></ul><hr><p><strong><code>数据结构</code></strong> :</p><p><img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=2054310334,785908068&fm=26&gp=0.jpg" alt=""></p><p>推荐的书籍：  《王道 数据结构》，《数据结构 殷人昆》（可以不用买，直接看南大上课使用的PPT） </p><p>建议：  </p><ul><li><p>先做王道的习题。《数据结构 殷人昆》这本书可以不用全部都看，做完王道之后需要看看《数据结构 殷人昆》上的经典例子，例如：<a href="https://blog.csdn.net/Lionel_SSL/article/details/97440323" target="_blank" rel="noopener">约瑟夫环</a>。之前有考查书上经典例子。</p><p><img src="https://i.loli.net/2020/06/24/gCUndZfjDLNXM84.png" alt="约瑟夫环"></p></li><li><p>王道的数据结构缺少的内容包括</p><ul><li>P/NP/NPC/NP-Hard问题（南大考查一道选择题）</li><li>时间复杂度的符号（包括O在内的一共五个，考查选择题，大题会考查时间复杂度）</li><li>广义表</li><li>并查集(王道讲的很少)，图(王道关于图的算法讲的很少)</li><li>…………</li></ul></li><li><p>数据结构的内容比较 <strong>零碎</strong>，建议做 <strong>两遍</strong> 王道数据结构，第一遍以 <strong><code>理解</code></strong> 为主，第二遍是以 <strong><code>记忆</code></strong> 为主（在冲刺阶段开始，如果基础感觉第一遍做的雨里雾里的同学可以早一点开始）。可以把一些比较难记的内容背下来，比如：B树和B+树各有什么特点、哪些排序算法是稳定的等等、深度优先搜索和宽度优先搜索的模板。</p></li><li><p>数据结构的编程题要明白思路是什么样的，清楚 <strong>每一步操作</strong> 的含义。</p></li><li><p>数据结构做第一遍的时候，把自己的编程过程记录下来，方便第二次做题的时候检查自己是否已经改正了先前的错误。<a href="https://www.jianshu.com/p/be7aa06a7ad6" target="_blank" rel="noopener">一个示范，同学也可以记录在笔记本上</a></p></li><li><p>建议时间充裕的同学将王道上的编程题 <strong>上机</strong> 运行一下，因为很多问题如果不在机器上面运行很难发现问题。</p></li><li><p>18级的同学可以直接使用王道的数据结构作为课程‘数据结构’的习题册。</p></li></ul><hr><p><strong><code>操作系统</code></strong> :</p><p>  <img src="http://img1.imgtn.bdimg.com/it/u=1345542341,3165018960&fm=11&gp=0.jpg" alt=""></p><ul><li>推荐书籍：《天勤 操作系统》。不建议使用王道的操作系统，主要是因为感觉王道的操作系统有很多东西没有讲清楚。(因为我首先买了王道的操作系统，然后重新买了天勤的操作系统)</li><li>推荐课程：腾讯课堂的《天勤率辉考研操作系统》，我当时趁着优惠花了几百元买的课程。感觉非常适合我，因为讲课的速度很慢并且知识点非常的清晰，刚好我可以接受。建议同学先去试听一下，感觉合适再购买课程。</li><li>对于操作系统，845主要考察的就是 <strong><code>PV操作</code></strong> ，<strong><code>银行家算法</code></strong>， <strong><code>死锁</code></strong> 等经典的题型， 特别是 <strong>PV操作</strong> 。这里的PV经典问题要熟记到脑海中有对应的代码。以 <strong>读写者问题</strong> 为例，熟记 <code>读者优先</code>，<code>写者优先</code>， <code>读写公平</code> 三种实现的方法， 知道如何从 <code>读者优先</code> 转化为 <code>写者优先</code> or <code>读写公平</code>， 能够 <strong>默写</strong> 相关的操作代码。</li><li>补充推荐书籍 <a href="https://max.book118.com/html/2018/1231/5202303331001343.shtm" target="_blank" rel="noopener">PV 金典</a> 。这本书上面有很多的PV操作题目（虽然这本书错误内容有点多），但是要多做做各种PV题才能真正的掌握，这样遇到变形的题目才可以游刃有余。</li><li>操作系统部分的知识很多与计算机系统基础上面的范围重叠且不一致，这里不一致的内容一律采用计算机系统基础的说法。</li></ul><hr><p><strong><code>计算机网络</code></strong>：</p><p><img src="https://ns-strategy.cdn.bcebos.com/ns-strategy/upload/fc_big_pic/part-00284-2984.jpg" alt=""></p><ul><li>书籍：我使用的是《天勤 计算机网络》，但是效果并不是很好。因为到了后期刷真题的时候发现大题目都不会做（主要是没有学过对应的知识点），估计是因为没有使用参考书籍的原因。（《自顶向下计算机机网络》这本书是推荐的教材，大家最好买一本，我之前没有买这本书，等我想买的时候，已经临近考试了。）</li><li>2020的考试计算机网络的大题相对比往年要容易了一些，因为今年考查的内容是我们考研复习书籍包括的内容（<code>845最让人头秃的操作就是没有考试范围，不知道从哪里下手。今年手下留情了</code>）。不知道能够成为以后的趋势。</li><li>推荐材料：<strong>南京大学软件学院的计算机网络PPT</strong> ，可以下载浏览浏览。</li></ul><h3 id="三、其他方面的建议"><a href="#三、其他方面的建议" class="headerlink" title="三、其他方面的建议"></a>三、其他方面的建议</h3><ul><li><p>考研复习的时候最好有一个 <strong><code>稳定且安静</code></strong> 的环境。之前我是在致明楼316复习的，那里的环境非常的安静，学习氛围非常好。这里加上张图片。  </p><p><img src="https://pic.downk.cc/item/5edf06c4c2a9a83be54872c0.jpg" alt=""></p><p>后来，暑假的时候我转移到了竞秀北楼2楼复习，这里也非常好，就是太热了。再贴上一张图片。  </p><p><img src="https://pic.downk.cc/item/5edf0934c2a9a83be54c8bf8.jpg" alt=""></p><p>最后，就是最痛苦的图书馆学习生活，每天抢座位让人头秃。</p></li><li><p>最好有一起考同一所学校小伙伴一起学习，这样可以相互监督一下。</p></li><li><p>845专业课复习比较慢且不容易拿到高分，所以不要太在意别人专业课复习的 <strong><code>进度</code></strong> 。</p></li><li><p>确定了学校之后，<strong><code>不要不断的降低自己的目标</code></strong> ，适当的时候可以询问老师的意见。另外，觉得学的不错的同学可以适当的提高自己的目标。</p></li><li><p><strong><code>四六级</code></strong> 要通过，因为四六级也是后面复试要使用的材料。( 特别担心后面英语复试的同学 )</p></li></ul><h3 id="四、学长寄语"><a href="#四、学长寄语" class="headerlink" title="四、学长寄语"></a>四、学长寄语</h3><p>&ensp;&ensp;&ensp;&ensp;希望大家考研和出国的都考上心仪的大学、就业的都找到自己心仪的工作。另外，大家考研最后一定要 <strong><code>坚持下去</code></strong> ，<strong><code>&quot;研路慢慢，唯有坚持&quot;</code></strong>。相信我们信息工程学院的学子都越来越好。</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1591652328265&di=6052af60568b24d7fcefb056d533e010&imgtype=0&src=http%3A%2F%2Fi1.hdslb.com%2Fbfs%2Farchive%2Fe6151424e7a55792235114c3edd44adb10b43b90.jpg" alt="电影《垫底辣妹》女主" title="嗨！我是沙耶加"></p><p><font color="purple" size = "5">如果没有目标，就不会被任何人期待。    —-《垫底辣妹》</font></p>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 常用命令</title>
      <link href="/2020/06/08/19568.html"/>
      <url>/2020/06/08/19568.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux常用的命令"><a href="#Linux常用的命令" class="headerlink" title="Linux常用的命令"></a>Linux常用的命令</h1><ul><li>命令的格式 <code>命令 [-选项] [参数]</code>，例如：<code>ls -la /etc</code><ul><li>个别命令不遵守该格式</li><li>有多个选项的时候，可以写在一起</li><li>简化选项和完整选项，例如 -a 等于 –all</li></ul></li></ul><h3 id="目录处理命令-ls"><a href="#目录处理命令-ls" class="headerlink" title="目录处理命令 ls"></a>目录处理命令 <code>ls</code></h3><ul><li><p>语法： <code>ls 选项[-ald] [文件或者目录]</code></p></li><li><p><code>-a</code>&ensp;显示隐藏文件（以.开头的文件）</p></li><li><p><code>-l</code>&ensp;文件的长格式显示。  </p><p>  <img src="https://pic.downk.cc/item/5ede5fecc2a9a83be5441b44.jpg" alt="">  </p><p>  标出的部分：<strong>在Linux系统当中，每一个文件把用户分成三类：所有者，所有组，其他人</strong> 。所有者或者所有组只能有 <strong>一个</strong>。</p></li><li><p>上面文件的长格式显示文件大小使用的是字节，可以使用命令<code>ls -lh</code>使用kB方式显示文件的大小。</p></li><li><p>文件没有创建时间，只有最后修改时间。</p></li><li><p><code>-rw-r--r--</code>:</p><ul><li>第一个位置表示 <strong>文件类型</strong>，<code>-</code>表示二进制文件，<code>d</code>表示目录文件，<code>l</code>表示软连接文件。</li><li>剩下的九个位置分成三个部分：<code>rw-</code> , <code>r--</code> , <code>r--</code>。表示三类用户的权限（u所有者， g所属组， o其他人），r表示读取，w表示写入，x表示执行。<code>-</code>表示没有权限。</li></ul></li><li><p><code>-ld</code>&ensp;表示只显示目录本身的信息，例如<code>ls -ld /etc</code>则只显示<code>/etc</code>这个目录文件的信息，不会显示该目录下文件的信息。</p></li><li><p><code>ls -i</code>&ensp;查看索引节点的编号，该编号唯一标记该节点。</p></li></ul><h3 id="目录处理命令"><a href="#目录处理命令" class="headerlink" title="目录处理命令"></a>目录处理命令</h3><ul><li><p>创建目录mkdir</p><ul><li>可以直接使用<code>makedir /tmp/Japan/movie</code>，但是如果没有<code>/tmp/Japan</code>目录，那么不可以创建成功。此时加上参数 -p 进行递归的创建目录。</li><li>可以在makedir后面添加多个目录，同时进行多个目录的创建。</li></ul></li><li><p>查看当前的目录 <code>pwd</code>，用于查看当前的工作目录。</p></li><li><p>删除目录 <code>rmdir</code>（删除<strong>空</strong>目录）</p><ul><li>当删除非空的目录时候，需要先把该目录下的所有内容删除，然后删除该目录。</li></ul></li><li><p>复制文件或者目录 <code>cp</code>，参数两个，一个是要被复制的文件，一个是要放置的位置。例如：<code>cp /root/install.log /tmp/movie</code>。（此时文件的最后修改时间发生的变化）</p><ul><li>添加参数-p，那么可以保留源文件的属性，例如最后修改时间。例如：<code>cp -p /root/install.log /tmp/movie</code></li><li>复制文件夹使用参数 -r</li><li>在复制的时候进行名称的修改，例如：<code>cp -r /root/Janpan/longze  /root/longzemovie</code></li></ul></li><li><p>剪切和更名 <code>mv</code></p><ul><li>剪切操作，例如<code>mv /tmp/cangjin /root</code>，eg.可以同时剪切多个文件</li><li>更名操作(剪切的操作同时进行改名)，例如<code>mv /tmp/changjin /root//nvshen</code></li></ul></li><li><p>删除命令 <code>rm</code></p><ul><li>删除文件 <code>rm /tmp/demo.txt</code></li><li>强制删除，使用参数-f， <code>rm -f /tmp/demo.txt</code></li><li>删除目录，添加参数-r，如果强制删除目录，则使用-rf，例如:<code>rm -rf /tmp/Janpan</code>。这样就把<code>/tmp/Janpan</code>这个目录给删除了。</li></ul></li></ul><h3 id="文件处理命令"><a href="#文件处理命令" class="headerlink" title="文件处理命令"></a>文件处理命令</h3><ul><li>创建文件 <code>touch 文件名</code>，例如<code>touch /tmp/Janpanlovestory.list</code>，也可以使用<code>touch Janpanlovestory.list</code>表示在当前的目录下创建一个文件。<ul><li>如果创建的文件名称包含空格的时候，则需要使用双引号把文件名包裹。例如：<code>touch &quot;Janpan lovestory.list&quot;</code>。不建议使用空格。</li></ul></li><li>查看文件的内容使用<code>cat</code>命令：使用cat在后面添加文件的名称。可以使用参数-n显示行号。<ul><li>如果文件非常长的时候，那么不适合使用cat参看。</li><li>使用倒着的命令<code>tac</code>，那么可以反着显示文件的内容。</li></ul></li><li>文件非常长的时候使用<code>more</code>进行分页显示（在more 后添加文件名称）：使用f进行翻页，使用回车进行换行，使用q or Q退出。（不能往前翻页，只能往后翻页）</li><li>文件非常长的时候使用<code>less</code><ul><li>和命令more的不同之处在于：该命令可以往前翻页</li><li>使用<code>/关键词</code>可以进行检索，使用n查看下一个关键词所在的位置。</li></ul></li><li>查看文件的前几行，使用<code>head -n 10 /tmp/hello.txt</code>表示查看文件<code>/tmp/hello.txt</code>这个大文件的前10行。</li><li>查看文件最后的几行，使用<code>tail -n 20 /tmp/hello.txt</code>表示查看文件<code>/tmp/hello.txt</code>这个大文件的最后20行。<ul><li>使用参数 -f 动态的显示文件末尾的内容。</li></ul></li></ul><h3 id="链接命令"><a href="#链接命令" class="headerlink" title="链接命令"></a>链接命令</h3><ul><li>链接命令 <code>ln</code><ul><li>只有一个参数 -s. 语法<code>ln [-s] [源文件] [目标文件]</code><ul><li>（软连接）例如：<code>ln -s /etc/issue /tmp/issue.soft</code></li><li>（硬链接）例如：<code>ln /etc/issue /tmp/issue.hard</code></li><li>软链接的文件类型是<code>l</code>。类型windows中的快捷方式。软连接是一个符号链接，它非常的小。属性是<code>lrwxrwxrwx</code>。(软链接有一个箭头指向)</li><li>硬链接的特点<ul><li>与<code>cp -p</code>不同的是，硬链接文件能够实现同步更新。</li><li>硬链接在源文件被删除之后依旧可以正常的使用。而软连接在源文件被删除之后便不能够继续使用了。（硬链接是共用一个i结点）</li><li>不能跨分区（软链接阔以的）</li><li>不能针对目录使用。（软链接阔以的）</li></ul></li></ul></li></ul></li></ul><h3 id="权限管理命令-chmod"><a href="#权限管理命令-chmod" class="headerlink" title="权限管理命令 chmod"></a>权限管理命令 <code>chmod</code></h3><ul><li>可以修改文件权限的人：root和文件所有者</li><li>语法<code>chmod [{ugoa} {+-=} {rxw}] [文件或目录] [mode=421] [文件或目录]</code></li><li>给文件所有者添加执行权限 <code>chmod u+x /tmp/Janpan/Janpanlovestory.list</code></li><li>修改文件所属组的权限：<code>chmod g=rwx /tmp/Janpan/Janpanlovestory.list</code></li><li>权限的数字表示：<ul><li>r 4</li><li>w 2</li><li>x 1</li><li>例：rwxrw-r– 7 6 4</li><li>使用数字的方式修改权限非常的直观<code>chmod 640 /tmp/Japan/Japanlovestory.txt</code></li></ul></li><li><code>-R的作用</code>:递归的进行修改，即使用<code>chmod ... -R 目录名称</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 兄弟连Linux课程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 服务器的维护和管理建议</title>
      <link href="/2020/06/08/4975.html"/>
      <url>/2020/06/08/4975.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-服务器的维护和管理建议"><a href="#Linux-服务器的维护和管理建议" class="headerlink" title="Linux 服务器的维护和管理建议"></a>Linux 服务器的维护和管理建议</h1><h2 id="一、Linux各个目录的用作"><a href="#一、Linux各个目录的用作" class="headerlink" title="一、Linux各个目录的用作"></a>一、Linux各个目录的用作</h2><ul><li><code>/bin/</code>&ensp;存放系统命令的目录， <strong><code>普通用户</code></strong> 和 <strong><code>超级用户</code></strong> 都可以执行。放在 <strong><code>/bin</code></strong> 目录下的命令可以在 <strong>单用户模式</strong>下执行。</li><li><code>/sbin/</code>&ensp;保存和系统环境设置相关的命令，只有 <strong><code>超级用户</code></strong> 可以使用这些命令进行系统环境设置，有些命令允许普通用户进行查看。</li><li><code>/usr/bin/</code>&ensp;存放系统命令的目录，<strong>普通用户</strong> 和 <strong>超级用户</strong> 都可以执行。这些命令和系统启动无关，在单用户模式下无法执行。</li><li><code>/usr/sbin/</code>&ensp;存在于根系统 <strong>不必要的系统管理命令</strong> 。只有超级用户可以使用。</li><li><code>/boot/</code>&ensp;系统启动目录，保存和 <strong><code>系统启动相关的文件</code></strong> ，例如内核文件和启动引导程序文件等。eg.这个目录大小只有200M，因为为了让系统能够正常的启动，不要在该目录下面放其他的文件。</li><li><code>/dev/</code>&ensp; <strong><code>设备文件</code></strong> 保存位置。Linux所以的内容都是以文件的形式进行保存，包括硬件。这个目录就是用来保存所有的硬件设备文件的。</li><li><code>/etc/</code>&ensp; <strong><code>配置文件</code></strong> 保存的位置。系统中所有采用默认的安装方式(npm安装)的配置文件全部保存在该目录下面。例如用户的账号和密码，服务的启动的脚本，常用的服务配置文件等等。 </li><li><code>/home/</code>&ensp;普通用户的家目录。建立每个用户的时候，每个用户都有一个默认的登陆位置，这个位置就是用户的家目录，所有的普通的用户都在 <code>/home/</code>目录下建立一个和用户名相同的目录。例如用户wanggongsheng的家目录是<code>/home/wanggongsheng</code></li><li><code>/lib/</code>&ensp;<strong>系统调用的函数库</strong> 保存的位置。 </li><li><code>/lost+found/</code>&ensp;这个目录不仅存放在根目录下，在每一个分区下都有这样的一个目录，例如<code>/boot</code>目录。当系统系统意外崩溃或者意外的关机，产生的一些 <strong>文件碎片</strong> 放在这里。当 <strong>系统启动的过程中，fsck工具会检查这里，修改已经损坏的文件系统</strong> 。这个目录只在每个分区中出现，例如<code>/lost+found</code>就是根目录的备份恢复目录，<code>/boot/lost+found</code>就是<code>/boot</code>分区的备份恢复目录。</li><li><code>/media/</code>&ensp;<strong><code>挂载目录</code></strong>。系统建议是挂载 <strong>媒体设备</strong>，例如 <strong>软盘</strong> 和 <strong>光盘</strong> 。</li><li><code>/mnt/</code>&ensp;<strong><code>挂载目录</code></strong>。早期的Linux只要一个挂载目录，没有细分。该目录建议 <strong>挂载额外的设备</strong> ，如 <strong>U盘</strong> ，<strong>移动硬盘</strong> 和 <strong>其他操作系统的分区</strong> 。</li><li><code>/mist/</code>&ensp;<strong><code>挂载目录</code></strong>。系统建议挂载NFS服务的共享目录。</li><li>虽然系统准备了三个默认的挂载目录，但是到底在什么目录挂载什么设备由管理员进行决定。</li><li><code>/opt/</code>&ensp;第三方安装软件的保存位置。这个目录就是放置和安装其他软件的，手工安装的源码包都可以安装到这个目录下。不过把软件安装到<code>/usr/local/</code>&ensp;目录当中也非常好（Linux行业默认的行为）。</li><li><code>/proc/</code>&ensp;虚拟文件系统，该目录中的数据并不是保存到磁盘当中，而是 <strong>保存到内存</strong> 当中。主要保存系统的 <strong>内核</strong> ，<strong>进程</strong>，<strong>外部设备状态</strong> 和 <strong>网络状态</strong> 等。</li><li><code>/sys/</code>&ensp;虚拟文件系统。和<code>/proc/</code>目录相似，都是保存在内存当中的，主要保存和内核相关的信息。</li><li><code>/root/</code>&ensp; <strong><code>超级用户的家目录</code></strong> 。普通用户的家目录在<code>/home/</code>下。超级用户的家目录直接在<code>/</code>下面。</li><li><code>/srv/</code>&ensp;服务数据目录。一些服务启动了之后，可以在这个目录保存所需要的数据。</li><li><code>/tmp/</code>&ensp;临时目录。<strong>系统存放临时文件</strong> 的目录，该目录下的文件所有的用户都可以访问。此目录不能保存重要的文件，最好每次开机都把该目录清空。</li><li><code>/usr/</code>&ensp;系统资源目录。这里usr不是user简写，而是Unix Softwre Resource缩写。不是用于存放用户的数据，而是放系统的软件资源。系统中大多数安装的软件资源都保存在这里。</li><li><code>/var/</code>&ensp;动态数据保存的位置。主要保存缓存，日志以及软件运行所产生的文件。</li></ul><h2 id="二、服务器的注意事项"><a href="#二、服务器的注意事项" class="headerlink" title="二、服务器的注意事项"></a>二、服务器的注意事项</h2><ul><li><strong>远程服务器不允许关机，只能重启</strong></li><li>重启的时候应该 <strong>关闭服务</strong></li><li>不要在服务器访问高峰运行高负载指令</li><li>远程配置 <strong>防火墙</strong> 时不要把自己提出防火墙。<blockquote><p><font color="purple">防火墙相当于一个过滤器，通过IP地址，端口地址，包中数据判断该数据能不能通过防火墙。防火墙不能取代杀毒软件。）</font></p></blockquote></li><li>指定合理的密码规范并定时更新</li><li>合理分配权限（权限越小越好）</li><li>定期备份重要数据和日志</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 兄弟连Linux课程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 注意事项</title>
      <link href="/2020/06/08/37499.html"/>
      <url>/2020/06/08/37499.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-注意事项"><a href="#Linux-注意事项" class="headerlink" title="Linux 注意事项"></a>Linux 注意事项</h1><ul><li><p>Linux严格区分大小写</p></li><li><p>Linux所有内容都是以 <strong><code>文件</code></strong> 的形式保存，包括硬件</p><ul><li>Windows使用设备管理器管理硬件，Linux使用文件管理硬件 </li><li>对配置的修改需要写入到文件当中才可以永久生效，否则只能临时生效</li><li>硬盘文件是 <code>/dev/sd[a-p]</code></li><li>光盘文件是<code>/dev/sr0</code>等</li></ul></li><li><p><strong><code>Linux文件不靠扩展名识别文件</code></strong>，Windows使用扩展名判断文件类型，例如.exe表示可执行文件。Linux不使用扩展名识别文件，它使用 <strong><code>文件的权限</code></strong> 来指定。Linux有些文件使用了扩展名是为了使用方便系统的管理员（Linux）识别文件，对于Linux而言，不使用这些扩展名依然可以识别文件的类型。</p><ul><li>压缩包：&ensp;.gz&ensp;.bz2&ensp;.tar.bz2&ensp;.tgz</li><li>二进制软件包：&ensp;.rpm</li><li>脚本文件：&ensp;.sh</li><li>配置文件：&ensp;.conf</li><li>网页文件：&ensp;.html&ensp;.php</li></ul></li><li><p>Linux的所有的存储设备都必须 <strong><code>挂载（mount）</code></strong> 之后用户才可以使用，包括硬件、U盘、光盘。</p><blockquote><p><font color="purple">在Unix系统中，所有可访问的文件都是被组织在一个文件树中，即文件层次结构（file hierarchy），其根为 /。mount命令用于把在某些设备上的文件系统附加到大文件树，这样的话，系统才可以访问这些设备上的文件。Unix操作系统只有一个单一的目录树结构，该目录树的最顶层就是 / ， 所有可访问文件都必须与这个目录树结构关联。这一点和Windows操作系统不同，在Windows中，每一个硬盘都有独立的目录树结构，比如D:\workspace\algorithm ，C:\Users 这样的。挂载（mount）这一动作就是把某个设备与目录树中的某个特定位置进行关联，以便于操作系统能够从根目录开始找到这个刚刚加入的设备，从而访问该设备的内的文件数据。（需要注意的是，这里的设备是泛指，既可以指usb、CD-ROM这样真实的设备，也可以是操作系统中的某个目录）。比如，当系统启动的时候，一个特殊的存储设备（通常被称为root 分区）就会与目录树的根进行关联，换句话说，把root分区挂载到了/ 上。</font>  </p></blockquote><p><a href="https://www.cnblogs.com/kkbill/p/11979082.html" target="_blank" rel="noopener">关于挂载的详细信息文章链接</a></p></li><li><p>Linux服务器一般不会使用图形化界面的，因为对于存储设备，需要我们的手动 <strong><code>挂载</code></strong>。</p></li><li><p>Windows下的程序不能直接在Linux中安装和运行。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 兄弟连Linux课程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 990 等式方程的可满足性</title>
      <link href="/2020/06/08/15733.html"/>
      <url>/2020/06/08/15733.html</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-990-等式方程的可满足性"><a href="#LeetCode-990-等式方程的可满足性" class="headerlink" title="LeetCode 990 等式方程的可满足性"></a>LeetCode 990 等式方程的可满足性</h1><p>给定一个由表示变量之间关系的字符串方程组成的数组，每个字符串方程 <code>equations[i]</code> 的长度为 4，并采用两种不同的形式之一：<code>&quot;a==b&quot;</code> 或 <code>&quot;a!=b&quot;</code>。在这里，a 和 b 是小写字母（不一定不同），表示单字母变量名。只有当可以将整数分配给变量名，以便满足所有给定的方程时才返回 true，否则返回 false。 </p><p>示例 1：</p><p>输入：<code>[&quot;a==b&quot;,&quot;b!=a&quot;]</code><br>输出：<code>false</code> </p><p>解释：如果我们指定，a = 1 且 b = 1，那么可以满足第一个方程，但无法满足第二个方程。没有办法分配变量同时满足这两个方程。  </p><p>示例 2：</p><p>输出：<code>[&quot;b==a&quot;,&quot;a==b&quot;]</code><br>输入：<code>true</code> </p><p>解释：我们可以指定 a = 1 且 b = 1 以满足满足这两个方程。  </p><p>示例 3：</p><p>输入：<code>[&quot;a==b&quot;,&quot;b==c&quot;,&quot;a==c&quot;]</code><br>输出：<code>true</code></p><p>示例 4：</p><p>输入：<code>[&quot;a==b&quot;,&quot;b!=c&quot;,&quot;c==a&quot;]</code><br>输出：<code>false</code>  </p><p>示例 5：</p><p>输入：<code>[&quot;c==c&quot;,&quot;b==d&quot;,&quot;x!=z&quot;]</code><br>输出：<code>true</code></p><p>提示：</p><ul><li>1 &lt;= equations.length &lt;= 500</li><li>equations[i].length == 4</li><li>equations[i][0] 和 equations[i][3] 是小写字母</li><li>equations[i][1] 要么是 ‘=’，要么是 ‘!’</li><li>equations[i][2] 是 ‘=’</li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/satisfiability-of-equality-equations" target="_blank" rel="noopener">https://leetcode-cn.com/problems/satisfiability-of-equality-equations</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p>思路： <strong>并查集</strong>、<strong>路径压缩</strong>，注意先处理合并内容。  </p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">equationsPossible</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> equations<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        :type equations: List[str]        :rtype: bool        '''</span>        pre <span class="token operator">=</span> <span class="token punctuation">{</span>chr<span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">:</span>chr<span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token keyword">for</span> ch <span class="token keyword">in</span> range<span class="token punctuation">(</span>ord<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ord<span class="token punctuation">(</span><span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> equation <span class="token keyword">in</span> equations<span class="token punctuation">:</span>            <span class="token keyword">if</span> equation<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'='</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>union<span class="token punctuation">(</span>pre<span class="token punctuation">,</span> equation<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> equation<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> equation <span class="token keyword">in</span> equations<span class="token punctuation">:</span>            <span class="token keyword">if</span> equation<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'!'</span><span class="token punctuation">:</span>                x <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>pre<span class="token punctuation">,</span> equation<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                y <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>pre<span class="token punctuation">,</span> equation<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> x <span class="token operator">==</span> y<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pre<span class="token punctuation">,</span> root1<span class="token punctuation">,</span> root2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        并查集合并        '''</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>pre<span class="token punctuation">,</span> root1<span class="token punctuation">)</span>        y <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>pre<span class="token punctuation">,</span> root2<span class="token punctuation">)</span>        <span class="token keyword">if</span> x <span class="token operator">!=</span> y<span class="token punctuation">:</span>            pre<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> x    <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pre<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        并查集查找        '''</span>        x <span class="token operator">=</span> root        <span class="token keyword">while</span> pre<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">!=</span> root<span class="token punctuation">:</span>            root <span class="token operator">=</span> pre<span class="token punctuation">[</span>root<span class="token punctuation">]</span>        <span class="token keyword">while</span> pre<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> root<span class="token punctuation">:</span>            temp <span class="token operator">=</span> pre<span class="token punctuation">[</span>x<span class="token punctuation">]</span>            pre<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> root            x <span class="token operator">=</span> temp        <span class="token keyword">return</span> root</code></pre>]]></content>
      
      
      <categories>
          
          <category> 基础算法练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语法 异常</title>
      <link href="/2020/06/08/22133.html"/>
      <url>/2020/06/08/22133.html</url>
      
        <content type="html"><![CDATA[<h1 id="python语法-异常"><a href="#python语法-异常" class="headerlink" title="python语法 异常"></a>python语法 异常</h1><h3 id="一、程序中的问题"><a href="#一、程序中的问题" class="headerlink" title="一、程序中的问题"></a>一、程序中的问题</h3><ul><li>代码语法错误</li><li>代码存在的隐形错误</li><li>软件面对不确定性的异常错误。软件代码本身没有什么问题，问题来自运行过程中环境带来的不确定性异常。<ul><li>软件尝试打开一个文件，但是文件已经被占用或者损毁。</li><li>软件插入数据的过程中，网络中断导致数据丢失。</li><li>软件运行过程中硬件出现故障。</li><li>软件输入出现错误</li></ul></li></ul><h3 id="二、捕获异常"><a href="#二、捕获异常" class="headerlink" title="二、捕获异常"></a>二、捕获异常</h3><p>基本语法：  </p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    代码模块<span class="token number">1</span><span class="token keyword">except</span><span class="token punctuation">:</span>    代码模块<span class="token number">2</span></code></pre><p>带有finally子句的异常处理：<br>处理程序运行过程中，无论是否报错，都要处理的一些代码功能。比如打开文件读取字符，如果出错，先提示打开文件错误，然后关闭打开的文件，避免反复打开文件带来的内存消耗。文件正常打开的情况下，读取完文件之后，也要及时关闭这个文件。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    代码模块<span class="token number">1</span><span class="token keyword">except</span> <span class="token punctuation">(</span>Exception1<span class="token punctuation">,</span> Exception2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    代码模块<span class="token number">2</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    代码模块<span class="token number">3</span></code></pre><h3 id="三、抛出异常"><a href="#三、抛出异常" class="headerlink" title="三、抛出异常"></a>三、抛出异常</h3><p><code>raise [Exception]</code>&ensp;其中Exception是可选的。</p>]]></content>
      
      
      <categories>
          
          <category> python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语法 模块</title>
      <link href="/2020/06/07/44565.html"/>
      <url>/2020/06/07/44565.html</url>
      
        <content type="html"><![CDATA[<h1 id="python语法-模块"><a href="#python语法-模块" class="headerlink" title="python语法 模块"></a>python语法 模块</h1><p>python的模块分为<strong>标准库模块</strong>和<strong>自定义模块</strong>，<strong>自定义模块</strong>分为以下几类：</p><ul><li><strong>函数模块文件</strong>：&ensp;存放自定义函数模块的代码文件，主要供主程序调用使用  </li><li><strong>类模块文件</strong>：&ensp;存放自定义类模块的代码文件，主要用于主函数调用</li><li><strong>主程序模块</strong>：&ensp;直接被编译器调用并首先执行的代码文件</li></ul><p>导入一个非搜索路径下的模块文件：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> syssys<span class="token punctuation">.</span>path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token string">'d:'</span> <span class="token comment" spellcheck="true"># 在非搜索路径下，必须指定文件的绝对路径</span><span class="token keyword">import</span> Solution     <span class="token comment" spellcheck="true"># 导入绝对路径下的Solution模块文件</span>help<span class="token punctuation">(</span>Solution<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 使用help函数读取模块文件的相关描述信息</span></code></pre><p>运行结果：<br><img src="https://pic.downk.cc/item/5edda146c2a9a83be5d18b2b.jpg" alt=""></p><p><strong>可以考虑建立子文件夹把模块文件分类保存</strong></p><ul><li>建立定义包目录，如package1，然后在该文件夹下存放一个<code>__init__.py</code>的空文件，用于说明该文件夹是一个包。</li><li>可以把模块文件分类放到包下面，也可以在顶级目录下面存放模块文件</li><li>导入格式&ensp;<code>import 包名.模块名称.函数or类名称</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 126 单词接龙II</title>
      <link href="/2020/06/07/58721.html"/>
      <url>/2020/06/07/58721.html</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-126-单词接龙II"><a href="#LeetCode-126-单词接龙II" class="headerlink" title="LeetCode 126 单词接龙II"></a>LeetCode 126 单词接龙II</h1><p>给定两个单词（beginWord 和 endWord）和一个字典 wordList，找出所有从 beginWord 到 endWord 的最短转换序列。转换需遵循如下规则：</p><ul><li>每次转换只能改变一个字母。</li><li>转换过程中的中间单词必须是字典中的单词。</li></ul><p>说明:</p><ul><li>如果不存在这样的转换序列，返回一个空列表。</li><li>所有单词具有相同的长度。</li><li>所有单词只由小写字母组成。</li><li>字典中不存在重复的单词。</li><li>你可以假设 beginWord 和 endWord 是非空的，且二者不相同。</li></ul><p>示例 1:</p><p>输入:  </p><p>beginWord = “hit”,<br>endWord = “cog”,<br>wordList = [“hot”,”dot”,”dog”,”lot”,”log”,”cog”]</p><p><strong>输出</strong>:<br>[<br>  [“hit”,”hot”,”dot”,”dog”,”cog”],<br>  [“hit”,”hot”,”lot”,”log”,”cog”]<br>]</p><p>示例 2:</p><p>输入:<br>beginWord = “hit”<br>endWord = “cog”<br>wordList = [“hot”,”dot”,”dog”,”lot”,”log”]</p><p>输出: []</p><p>解释: endWord “cog” 不在字典中，所以不存在符合要求的转换序列。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/word-ladder-ii" target="_blank" rel="noopener">https://leetcode-cn.com/problems/word-ladder-ii</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p>eg. 运行超时</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findLadders</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> beginWord<span class="token punctuation">,</span> endWord<span class="token punctuation">,</span> wordList<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type beginWord: str        :type endWord: str        :type wordList: List[str]        :rtype: List[List[str]]        """</span>        <span class="token keyword">if</span> endWord <span class="token operator">not</span> <span class="token keyword">in</span> wordList<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        vis <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>wordList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        G <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>wordList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>wordList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>wordList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">(</span>wordList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>diff<span class="token punctuation">(</span>wordList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> wordList<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>wordList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>diff<span class="token punctuation">(</span>wordList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> beginWord<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>beginWord<span class="token punctuation">,</span> endWord<span class="token punctuation">,</span> wordList<span class="token punctuation">,</span> G<span class="token punctuation">,</span> vis<span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>                vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        minLen <span class="token operator">=</span> len<span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> p <span class="token keyword">in</span> res<span class="token punctuation">:</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&lt;</span> minLen<span class="token punctuation">:</span>                minLen <span class="token operator">=</span> len<span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> p <span class="token keyword">in</span> res<span class="token punctuation">:</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">==</span> minLen<span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> beginWord<span class="token punctuation">,</span> endWord<span class="token punctuation">,</span> wordList<span class="token punctuation">,</span> G<span class="token punctuation">,</span> vis<span class="token punctuation">,</span> path<span class="token punctuation">,</span> dep<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> wordList<span class="token punctuation">[</span>path<span class="token punctuation">[</span>dep<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> endWord<span class="token punctuation">:</span>            ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>beginWord<span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> path<span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>wordList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ans<span class="token punctuation">)</span>            <span class="token keyword">return</span>         <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>wordList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">False</span> <span class="token operator">and</span> G<span class="token punctuation">[</span>path<span class="token punctuation">[</span>dep<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>beginWord<span class="token punctuation">,</span> endWord<span class="token punctuation">,</span> wordList<span class="token punctuation">,</span> G<span class="token punctuation">,</span> vis<span class="token punctuation">,</span> path<span class="token punctuation">,</span> dep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>                vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">diff</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> word1<span class="token punctuation">,</span> word2<span class="token punctuation">)</span><span class="token punctuation">:</span>        num <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>word1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> word1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> word2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 基础算法练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习 推荐书籍和课程</title>
      <link href="/2020/06/06/undefined.html"/>
      <url>/2020/06/06/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="机器学习-推荐书籍和课程"><a href="#机器学习-推荐书籍和课程" class="headerlink" title="机器学习 推荐书籍和课程"></a>机器学习 推荐书籍和课程</h1><h2 id="推荐书籍"><a href="#推荐书籍" class="headerlink" title="推荐书籍"></a>推荐书籍</h2><p><img src="https://pic.downk.cc/item/5edba88cc2a9a83be54738db.jpg" alt=""></p><h2 id="推荐课程"><a href="#推荐课程" class="headerlink" title="推荐课程"></a>推荐课程</h2><p><img src="https://pic.downk.cc/item/5edba986c2a9a83be549d148.jpg" alt=""></p><p><a href="https://www.coursera.org/learn/machine-learning" target="_blank" rel="noopener">https://www.coursera.org/learn/machine-learning</a></p><p><a href="https://study.163.com/course/courseLearn.htm?courseId=1004570029#/learn/video?lessonId=1049052745&courseId=1004570029" target="_blank" rel="noopener">https://study.163.com/course/courseLearn.htm?courseId=1004570029#/learn/video?lessonId=1049052745&amp;courseId=1004570029</a></p><p><a href="http://cs231n.stanford.edu/2019/" target="_blank" rel="noopener">http://cs231n.stanford.edu/2019/</a><br><a href="http://cs231n.stanford.edu/2019/" target="_blank" rel="noopener"></a></p><p><a href="https://www.youtube.com/playlist?list=PL3FW7Lu3i5JvHM8ljYjzLfQRF3EO8sYv" target="_blank" rel="noopener">https://www.youtube.com/playlist?list=PL3FW7Lu3i5JvHM8ljYjzLfQRF3EO8sYv</a></p><h3 id="深度学习平台"><a href="#深度学习平台" class="headerlink" title="深度学习平台"></a>深度学习平台</h3><p><img src="https://pic.downk.cc/item/5edbaa9dc2a9a83be54cdf0c.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语法 常用模块</title>
      <link href="/2020/06/06/33040.html"/>
      <url>/2020/06/06/33040.html</url>
      
        <content type="html"><![CDATA[<h1 id="python语法-常用模块"><a href="#python语法-常用模块" class="headerlink" title="python语法 常用模块"></a>python语法 常用模块</h1><h2 id="一、datetime模块"><a href="#一、datetime模块" class="headerlink" title="一、datetime模块"></a>一、datetime模块</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span>date<span class="token punctuation">,</span>time<span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># datetime.now()返回当天的日期和时间</span>today <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span>today<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># datetime.date(t)返回t对应的日期,t是datetime类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>time<span class="token punctuation">(</span>today<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># datetime.time(t)返回t对应的时间，t是datetime类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span>today<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># datetime.ctime(t)返回t对应的“星期，月，日，时，分，秒，年”格式的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># datetime.utcnow()获取当前的UTC时间，datetime类型.eg.UTC是世界标准时间</span><span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>timestamp<span class="token punctuation">(</span>today<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># datetime.timestamp(t)返回t对应的时间戳</span><span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>fromtimestamp<span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>timestamp<span class="token punctuation">(</span>today<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># datetime.fromtimestamp(时间戳)，返回值是datetime类型</span>date1 <span class="token operator">=</span> date<span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 使用date类，生成date1对象</span>time1 <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 使用time类，生成time1对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>time1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>combine<span class="token punctuation">(</span>date1<span class="token punctuation">,</span> time1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 绑定时间和日期，生成一个新的datetime对象</span>dt <span class="token operator">=</span> datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span><span class="token string">"2020/6/6 18:08"</span><span class="token punctuation">,</span> <span class="token string">"%Y/%m/%d %H:%M"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 用字符串和自定的格式生成datetime对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span>isocalendar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># ISO格式的日期</span><span class="token keyword">print</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y years %m months %d days %I hours %M minutes %S seconds %p"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 对datetime格式自定义对象</span></code></pre><p>运行结果：<br><img src="https://pic.downk.cc/item/5edb7b57c2a9a83be5d48277.jpg" alt=""></p><p>时间日期格式化符号：<br><img src="https://pic.downk.cc/item/5edb7c42c2a9a83be5d6a3c4.jpg" alt=""><br><img src="https://pic.downk.cc/item/5edb7c5bc2a9a83be5d6db6b.jpg" alt=""></p><h2 id="二、math模块"><a href="#二、math模块" class="headerlink" title="二、math模块"></a>二、math模块</h2><ul><li>浮点数取整，用trunc(x)取整，x是浮点数。返回结果是整数。注意：x//1也是取整，但是返回的结果是浮点数。</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> mathmath<span class="token punctuation">.</span>trunc<span class="token punctuation">(</span><span class="token number">3.9</span><span class="token punctuation">)</span></code></pre><p>&ensp;&ensp;&ensp;&ensp;&ensp;运行结果：3<br>&ensp;&ensp;&ensp;&ensp;&ensp;eg. <code>3.9//1</code> 的运行结果是3.0</p><ul><li>取大整数，使用math.ceil(x)，x是浮点数</li></ul><pre class=" language-python"><code class="language-python">price <span class="token operator">=</span> <span class="token number">3.28</span>math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>price<span class="token punctuation">)</span></code></pre><p>&ensp;&ensp;&ensp;&ensp;&ensp;运行结果：4 </p><ul><li><p>round(x)进行四舍五入，x是浮点数</p></li><li><p>对元组中的每个数求和<code>math.fsum(元组)</code></p></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> mathnums <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">3.3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>fsum<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>&ensp;&ensp;&ensp;&ensp;&ensp;运行结果： 6.6<br>&ensp;&ensp;&ensp;&ensp;&ensp;<code>math.fsum()</code>和<code>sum()</code>的区别是：<code>math.fsum()</code>只返回浮点数，<code>sum()</code>根据参数决定返回值类型，如果参数是整数，返回值是整数。如果参数是浮点数，返回值是浮点数。</p><ul><li>求数的绝对值，浮点数使用<code>math.fabs()</code>，整数使用<code>abs()</code> </li></ul><h2 id="三、random模块"><a href="#三、random模块" class="headerlink" title="三、random模块"></a>三、random模块</h2><ul><li><code>random()</code> : 生成一个基于 <strong>[0.0, 1.0)</strong> 之间的浮点数</li><li><code>uniform(a,b)</code>: 在指定的范围获取随机浮点数 N， N在[a, b]范围内</li><li><code>triangular(low, high, mode)</code>:返回三角分布的随机数， low、high是返回值的上下界，mode为中值。low和high的默认值分别为0和1。mode参数默认为两个边界的<strong>中间点</strong>。持续使用该方法，可以得到<strong>以mode为对称点的随机分布数据集</strong>。</li><li><code>betavariate(alpha, beta)</code>: 求Beta分布的随机数，alpha和beta都要大于0，返回值介于0,1之间。</li></ul><p>&ensp;&ensp;&ensp;&ensp;<a href="漫谈三点估算法中关于贝塔分布、三角分布的理解"><strong>补充知识:漫谈三点估算法中关于贝塔分布、三角分布的理解</strong></a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>triangular<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>triangular<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>nums <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>triangular<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">]</span>num1 <span class="token operator">=</span> <span class="token number">0</span>num2 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> x <span class="token keyword">in</span> nums<span class="token punctuation">:</span>    <span class="token keyword">if</span> x <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>        num1 <span class="token operator">=</span> num1 <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        num2 <span class="token operator">=</span> num2 <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"num1 = %d num2 = %d"</span><span class="token operator">%</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%f%%   %f%%"</span><span class="token operator">%</span><span class="token punctuation">(</span>num1<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">,</span> num2<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>betavariate<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="四、os模块"><a href="#四、os模块" class="headerlink" title="四、os模块"></a>四、os模块</h2><ul><li><p>os模块为访问操作系统提供了相关的之处功能，包括Windows,linux,UNIX,Max OS等。</p></li><li><p>os模块的功能包括：</p><ul><li>对文件的相关操作功能</li><li>系统访问Path路径的操作</li><li>Shell命令行操作</li><li>Linux扩展属性操作</li><li>流程管理</li><li>CPU等硬件信息的获取</li><li>基于操作系统的真正的随机数的操作</li><li>相关的一些系统常量的提供</li></ul></li><li><p>os模块常用的函数</p><ul><li><p><code>environ函数</code>：获取操作系统的环境变量</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> osos<span class="token punctuation">.</span>environ</code></pre></li><li><p><code>getcwd函数</code>：获取当前路径对应的字符串</p><pre class=" language-python"><code class="language-python">os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p><code>system(commend)函数</code>:在shell中执行命令（command，是一个命令对应的字符串）</p><pre class=" language-python"><code class="language-python">os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"ping 127.0.0.0"</span><span class="token punctuation">)</span></code></pre></li><li><p><code>urandom(n)函数</code>:获取适合用于加密的n字节大小的随机数字符串</p><pre class=" language-python"><code class="language-python">os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre></li></ul></li></ul><h2 id="五、sys模块"><a href="#五、sys模块" class="headerlink" title="五、sys模块"></a>五、sys模块</h2><ul><li><p>sys模块提供与python解释器紧密相关的一些变量和函数。</p></li><li><p>常用的函数</p><ul><li><p><code>path</code>&ensp;获取模块文件搜索路径的字符串，或者临时指定新的搜索路径</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> syssys<span class="token punctuation">.</span>path</code></pre><p><img src="https://pic.downk.cc/item/5edbd23fc2a9a83be5afc667.jpg" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> syssys<span class="token punctuation">.</span>path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'d:test'</span></code></pre><p><img src="https://pic.downk.cc/item/5edbd2e1c2a9a83be5b0fe0b.jpg" alt=""></p><p>eg. sys.path是list类型的变量，可以进行暂时的修改，用于临时指定新的搜索路径。</p></li><li><p><code>sys.platform</code>&ensp;操作系统识别符判断函数</p><ul><li><p>Linux -&gt; linux</p></li><li><p>Windows -&gt; win32</p></li><li><p>Windows/Cygwin -&gt; cygwin</p></li><li><p>Mac OS -&gt; darwin<br><img src="https://pic.downk.cc/item/5edbd437c2a9a83be5b42e94.jpg" alt=""></p></li><li><p>函数作用：<strong>根据platform和path实现不同版本的模块文件的导入</strong>。例如在Windows操作系统下导入Windows版本的模块，在Linux操作系统下导入Linux版本的模块。</p><pre class=" language-python"><code class="language-python">  <span class="token keyword">if</span> sys<span class="token punctuation">.</span>platform<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'win32'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'调用Windows版本的模块文件代码'</span><span class="token punctuation">)</span>  <span class="token keyword">elif</span> sys<span class="token punctuation">.</span>platform<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'linux'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'调用Linux版本的模块文件代码'</span><span class="token punctuation">)</span></code></pre><p>  <img src="https://pic.downk.cc/item/5edbd619c2a9a83be5b8e1be.jpg" alt=""></p></li></ul></li><li><p><code>sys.getwindowsversion()</code>&ensp;获取当前正在运行的Windows版本信息的元组。<br><img src="https://pic.downk.cc/item/5edbd77cc2a9a83be5bc3179.jpg" alt="">  </p><ul><li>major -&gt; 主要版本号</li><li>minor -&gt; 次要版本号</li><li>build -&gt; 发布的年月</li><li>platform -&gt; 操作系统产品类型，2应该表示用户PC版本，3表示服务器版本。</li><li>service_pack -&gt; 表示一个字符串 </li></ul></li></ul></li></ul><h2 id="六、time模块"><a href="#六、time模块" class="headerlink" title="六、time模块"></a>六、time模块</h2><ul><li><p><code>time.sleep(s)</code>&ensp;程序进程暂停s秒</p></li><li><p><code>time.clock()</code>&ensp;函数把当前的CPU处理器时间用秒为单位的浮点数进行返回。EG.该方法被舍弃，不提倡使用。</p></li><li><p><code>time.strftime(str)</code>&ensp;函数根据时间格式字符串解释当前的时间</p><pre class=" language-python"><code class="language-python">  time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%H hours %M minutes %S seconds'</span><span class="token punctuation">)</span></code></pre><p>  <img src="https://pic.downk.cc/item/5edbdcc7c2a9a83be5c9767a.jpg" alt=""></p></li><li><p><code>time.time()</code>&ensp;函数返回自纪元年起以秒为单位的浮点数时间，就是时间戳  </p><pre class=" language-python"><code class="language-python">  <span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime  <span class="token keyword">import</span> time  <span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>timestamp<span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>  <img src="https://pic.downk.cc/item/5edbda6ac2a9a83be5c3c272.jpg" alt=""></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语法 类的基本语法</title>
      <link href="/2020/06/06/15377.html"/>
      <url>/2020/06/06/15377.html</url>
      
        <content type="html"><![CDATA[<h1 id="python语法-类的基本语法"><a href="#python语法-类的基本语法" class="headerlink" title="python语法 类的基本语法"></a>python语法 类的基本语法</h1><h2 id="一、类的格式"><a href="#一、类的格式" class="headerlink" title="一、类的格式"></a>一、类的格式</h2><ul><li><p>类的第一行格式  </p></li><li><p><code>class 类名():</code></p></li><li><p>类文档说明，使用三个单引号</p></li><li><p>类函数：或者叫做类方法，这种方法必须依赖类或者实例而存在。</p></li><li><p><code>__init__</code> 是类的构造函数，例子如下：  </p></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 必须加上self</span>    name <span class="token operator">=</span> <span class="token string">"西瓜"</span></code></pre><ul><li><p>self关键字作用：用于传输示例对象，实际上传递的是实例对象在<strong>内存中的一个地址</strong>。调用实例的方法时候，self是<strong>隐形</strong>传递的。</p><p>例子:</p></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">watermelon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>attributes <span class="token operator">=</span> attributes    <span class="token keyword">def</span> <span class="token function">disp</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> attribute <span class="token keyword">in</span> self<span class="token punctuation">.</span>attributes<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span>watermelon <span class="token operator">=</span> watermelon<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'绿色'</span><span class="token punctuation">,</span> <span class="token string">'甜的'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>watermelon<span class="token punctuation">.</span>disp<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行结果：<br><img src="https://pic.downk.cc/item/5edb3892c2a9a83be5437326.jpg" alt=""></p><h2 id="二、类的属性和方法"><a href="#二、类的属性和方法" class="headerlink" title="二、类的属性和方法"></a>二、类的属性和方法</h2><ul><li>属性的调用格式：<br><code>实例名.属性名</code></li><li>方法的调用格式：<br><code>实例名.方法名()</code></li></ul><h2 id="三、类的改造（继承、重写方法）"><a href="#三、类的改造（继承、重写方法）" class="headerlink" title="三、类的改造（继承、重写方法）"></a>三、类的改造（继承、重写方法）</h2><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li>继承的格式1：<br><code>class 子类名(父类名)</code></li><li>继承的格式2：<br><code>class 子类名(父类名1, 父类名2, 父类名3)</code></li></ul><p>例子：  </p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">watermelon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>attributes <span class="token operator">=</span> attributes    <span class="token keyword">def</span> <span class="token function">disp</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> attribute <span class="token keyword">in</span> attributes<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">bigwatermelon</span><span class="token punctuation">(</span>watermelon<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attributes<span class="token punctuation">,</span> newattribute<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>attributes<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>newattribute <span class="token operator">=</span> newattribute    <span class="token keyword">def</span> <span class="token function">disp</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 重写方法</span>        <span class="token keyword">for</span> attribute <span class="token keyword">in</span> self<span class="token punctuation">.</span>attributes<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>newattribute<span class="token punctuation">)</span>bigwatermelon <span class="token operator">=</span> bigwatermelon<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'绿色'</span><span class="token punctuation">,</span> <span class="token string">'甜的'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'大的'</span><span class="token punctuation">)</span>bigwatermelon<span class="token punctuation">.</span>disp<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="重写方法"><a href="#重写方法" class="headerlink" title="重写方法"></a>重写方法</h3><ul><li>要求：子类的方法名称和父类方法名称相同</li></ul><h2 id="四、私有"><a href="#四、私有" class="headerlink" title="四、私有"></a>四、私有</h2><ul><li>让类定义的 <strong>函数</strong> or <strong>变量</strong> 变成 <strong>私有</strong> ，只需要在它的名称前面加上双下划线即可。 </li></ul><h2 id="五、把类放到模块当中"><a href="#五、把类放到模块当中" class="headerlink" title="五、把类放到模块当中"></a>五、把类放到模块当中</h2><ul><li>将类的信息保存到xxx.py文件中。使用下面方法导入该xxx.py文件中的所有类：<br><code>from  xxx import *   # 从xxx模块中导入所有类</code><br><code>import xxx as yyy   # 导入xxx模块并简称为yyy</code><br><code>from xxx import clazz   # 从xxx模块中导入clazz这个类</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语法 匿名函数</title>
      <link href="/2020/06/06/34114.html"/>
      <url>/2020/06/06/34114.html</url>
      
        <content type="html"><![CDATA[<h1 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h1><h2 id="匿名函数特点"><a href="#匿名函数特点" class="headerlink" title="匿名函数特点"></a>匿名函数特点</h2><ul><li>匿名函数的格式<br><code>lambda [para1, para2, ...]: expression</code></li><li>labmbda函数没有函数名称</li><li>函数的参数是可选的，可以是任意类型的</li><li>expression实现匿名函数的功能，并返回结果，具有return的功能</li><li>整个匿名函数在一行内实现所有功能</li></ul><pre class=" language-python"><code class="language-python">sum <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">*</span>xnums <span class="token operator">=</span> <span class="token punctuation">[</span>sum<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span></code></pre><p>运行结果：<br><strong>[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</strong></p><h2 id="匿名函数高级使用方法：把匿名函数作为一个函数参数"><a href="#匿名函数高级使用方法：把匿名函数作为一个函数参数" class="headerlink" title="匿名函数高级使用方法：把匿名函数作为一个函数参数"></a>匿名函数高级使用方法：把匿名函数作为一个函数参数</h2><p><strong>优点</strong>  </p><ul><li>在调用函数的时候，可以随时修改lambda函数的逻辑表达式来改变函数的逻辑</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">:</span>    nums <span class="token operator">=</span> <span class="token punctuation">[</span>method<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> nums<span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="匿名函数高级使用方法：-动态传入匿名函数"><a href="#匿名函数高级使用方法：-动态传入匿名函数" class="headerlink" title="匿名函数高级使用方法： 动态传入匿名函数"></a>匿名函数高级使用方法： 动态传入匿名函数</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">:</span>    nums <span class="token operator">=</span> <span class="token punctuation">[</span>method<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> numss <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入匿名函数表达式："</span><span class="token punctuation">)</span>method <span class="token operator">=</span> eval<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果：<br><img src="https://pic.downk.cc/item/5edb2ca4c2a9a83be5222d92.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语法 函数和变量作用域</title>
      <link href="/2020/06/06/10740.html"/>
      <url>/2020/06/06/10740.html</url>
      
        <content type="html"><![CDATA[<h1 id="python语法-函数和变量作用域"><a href="#python语法-函数和变量作用域" class="headerlink" title="python语法 函数和变量作用域"></a>python语法 函数和变量作用域</h1><h2 id="1-全局变量和局部变量"><a href="#1-全局变量和局部变量" class="headerlink" title="1. 全局变量和局部变量"></a>1. 全局变量和局部变量</h2><ul><li>全局变量自定义赋值开始，后续代码都可以访问变量</li><li>局部变量只能在被定义的函数和类内部被访问</li><li>不提倡在函数中直接引用全局变量</li><li>变量的作用范围与变量的赋值位置紧密相关，例如: a是后续代码的全部变量，b是后续代码的全局变量</li></ul><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    b <span class="token operator">=</span> <span class="token number">100</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">return</span> bb <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5edb13abc2a9a83be5e13465.jpg" alt="运行结果"></p><p><strong>局部变量特点：</strong></p><h2 id="2-global关键字"><a href="#2-global关键字" class="headerlink" title="2. global关键字"></a>2. global关键字</h2><ul><li><strong>函数内部默认只能读全局变量，如果想要修改，需要使用global关键字</strong></li></ul><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> x<span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5edb174fc2a9a83be5e79be6.jpg" alt="没有使用global产生的报错"></p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> x    x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> x<span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果： 2</p><h2 id="3-闭包"><a href="#3-闭包" class="headerlink" title="3. 闭包"></a>3. 闭包</h2><ul><li>介于全局变量和局部变量之间</li><li>使用范围： 全局变量 &gt; 闭包变量 &gt; 局部变量</li></ul><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">sum0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">sum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        z <span class="token operator">=</span> <span class="token number">3</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z    <span class="token keyword">return</span> sum1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum0<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li><strong>此处的y就是一个闭包变量。它位于外部函数和内部嵌套函数之间</strong><h2 id="4-nonlocal变量"><a href="#4-nonlocal变量" class="headerlink" title="4. nonlocal变量"></a>4. nonlocal变量</h2></li></ul><p>在上面的例子中：如果想要<strong>修改</strong>闭包变量y，那么需要添加关键字nonlocal</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">sum0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">sum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        z <span class="token operator">=</span> <span class="token number">3</span>        nonlocal y        y <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z    <span class="token keyword">return</span> sum1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum0<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语法 传递元组，列表，字典值</title>
      <link href="/2020/06/06/18572.html"/>
      <url>/2020/06/06/18572.html</url>
      
        <content type="html"><![CDATA[<h1 id="python语法-传递元组，列表，字典值"><a href="#python语法-传递元组，列表，字典值" class="headerlink" title="python语法 传递元组，列表，字典值"></a>python语法 传递元组，列表，字典值</h1><h2 id="一、传递元组"><a href="#一、传递元组" class="headerlink" title="一、传递元组"></a>一、传递元组</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">watermelon</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> attributeswm <span class="token operator">=</span> watermelon<span class="token punctuation">(</span><span class="token string">'西瓜'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'甜'</span><span class="token punctuation">,</span> <span class="token string">'圆形'</span><span class="token punctuation">,</span> <span class="token string">'绿色'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>wm<span class="token punctuation">)</span></code></pre><p>运行结果：<br><img src="https://i.loli.net/2020/06/06/OhmK2vlJ9oCRg45.png" alt=""></p><h2 id="二、传递列表"><a href="#二、传递列表" class="headerlink" title="二、传递列表"></a>二、传递列表</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">watermelon</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> attributeswm <span class="token operator">=</span> watermelon<span class="token punctuation">(</span><span class="token string">'西瓜'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'甜'</span><span class="token punctuation">,</span> <span class="token string">'圆形'</span><span class="token punctuation">,</span> <span class="token string">'绿色'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>wm<span class="token punctuation">)</span></code></pre><p>运行结果：<br><img src="https://i.loli.net/2020/06/06/DdgK7ZpjyXTIika.png" alt=""></p><h2 id="三、传递字典"><a href="#三、传递字典" class="headerlink" title="三、传递字典"></a>三、传递字典</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">watermelon</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> attributeswm <span class="token operator">=</span> watermelon<span class="token punctuation">(</span><span class="token string">'西瓜'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'taste'</span><span class="token punctuation">:</span><span class="token string">'甜'</span><span class="token punctuation">,</span> <span class="token string">'shape'</span><span class="token punctuation">:</span><span class="token string">'圆形'</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span><span class="token string">'绿色'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>wm<span class="token punctuation">)</span></code></pre><p>运行结果：<br><img src="https://i.loli.net/2020/06/06/wVbFtIh5TJc3gzy.png" alt=""></p><h2 id="四、注意点"><a href="#四、注意点" class="headerlink" title="四、注意点"></a>四、注意点</h2><ul><li>自定义函数内部修改传递过来的元组、列表、字典后，会影响函数外部对应的变量。两者对应内存中同一个地址的对象。</li><li>采用复制列表、元组、字典的方法解决上面的问题</li></ul><h3 id="没有使用复制方法："><a href="#没有使用复制方法：" class="headerlink" title="没有使用复制方法："></a>没有使用复制方法：</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">watermelon</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">:</span>    attributes<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'少籽'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> attributesattr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'甜'</span><span class="token punctuation">,</span> <span class="token string">'圆形'</span><span class="token punctuation">,</span> <span class="token string">'绿色'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>attr1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>attr1<span class="token punctuation">)</span><span class="token punctuation">)</span>attr2 <span class="token operator">=</span> watermelon<span class="token punctuation">(</span><span class="token string">'西瓜'</span><span class="token punctuation">,</span> attr1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>attr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>attr2<span class="token punctuation">)</span></code></pre><p>运行结果：<br><img src="https://pic.downk.cc/item/5edb0f13c2a9a83be5d7c6a7.jpg" alt=""></p><h3 id="使用复制的方法"><a href="#使用复制的方法" class="headerlink" title="使用复制的方法"></a>使用复制的方法</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">watermelon</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">:</span>    attributes<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'少籽'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> attributesattr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'甜'</span><span class="token punctuation">,</span> <span class="token string">'圆形'</span><span class="token punctuation">,</span> <span class="token string">'绿色'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>attr1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>attr1<span class="token punctuation">)</span><span class="token punctuation">)</span>attr2 <span class="token operator">=</span> watermelon<span class="token punctuation">(</span><span class="token string">'西瓜'</span><span class="token punctuation">,</span> attr1<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>attr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>attr2<span class="token punctuation">)</span></code></pre><p>运行结果：<br><img src="https://pic.downk.cc/item/5edb1027c2a9a83be5da5da6.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 128 最长连续序列</title>
      <link href="/2020/06/06/31522.html"/>
      <url>/2020/06/06/31522.html</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-128-最长连续序列"><a href="#LeetCode-128-最长连续序列" class="headerlink" title="LeetCode 128 最长连续序列"></a>LeetCode 128 最长连续序列</h1><p>给定一个未排序的整数数组，找出最长连续序列的长度。</p><p>要求算法的时间复杂度为 O(n)。</p><p>示例:</p><p>输入: [100, 4, 200, 1, 3, 2]<br>输出: 4<br>解释: 最长连续序列是 [1, 2, 3, 4]。它的长度为 4。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-consecutive-sequence" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-consecutive-sequence</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。  </p><p><strong>我的思路</strong>：  </p><ul><li>保存最大值和最小值，使用桶的思想，将最小元素放入第一个位置。List长度为max - min + 1。但是经过验证，数据max - min + 1值非常大，造成内存溢出。</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestConsecutive</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: int        """</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        maxnum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        minnum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            <span class="token keyword">if</span> num <span class="token operator">></span> maxnum<span class="token punctuation">:</span>                maxnum <span class="token operator">=</span> num            <span class="token keyword">if</span> num <span class="token operator">&lt;</span> minnum<span class="token punctuation">:</span>                minnum <span class="token operator">=</span> num        has <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>maxnum <span class="token operator">-</span> minnum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            has<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            has<span class="token punctuation">[</span>num<span class="token operator">-</span>minnum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>        maxlen <span class="token operator">=</span> <span class="token number">1</span>        templen <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> has<span class="token punctuation">:</span>            <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                templen <span class="token operator">=</span> templen <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">if</span> templen <span class="token operator">></span> maxlen<span class="token punctuation">:</span>                    maxlen <span class="token operator">=</span> templen            <span class="token keyword">else</span><span class="token punctuation">:</span>                templen <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">return</span> maxlen</code></pre><p><strong>官网题解：</strong>  思路清晰<br><img src="https://i.loli.net/2020/06/06/RfiVgwJumsUrte2.png" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestConsecutive</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: int        """</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        numset <span class="token operator">=</span> set<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 时间复杂度O(n)</span>        maxlen <span class="token operator">=</span> <span class="token number">1</span>        curlen <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> numset<span class="token punctuation">:</span>            <span class="token keyword">if</span> num <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">in</span> numset<span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                curlen <span class="token operator">=</span> <span class="token number">1</span>                nextnum <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">while</span> nextnum <span class="token keyword">in</span> numset<span class="token punctuation">:</span>                    curlen <span class="token operator">=</span> curlen <span class="token operator">+</span> <span class="token number">1</span>                    nextnum <span class="token operator">=</span> nextnum <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">if</span> curlen <span class="token operator">></span> maxlen<span class="token punctuation">:</span>                    maxlen <span class="token operator">=</span> curlen        <span class="token keyword">return</span> maxlen</code></pre>]]></content>
      
      
      <categories>
          
          <category> 基础算法练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语法 不定长参数</title>
      <link href="/2020/06/05/10789.html"/>
      <url>/2020/06/05/10789.html</url>
      
        <content type="html"><![CDATA[<h1 id="python语法-不定长参数"><a href="#python语法-不定长参数" class="headerlink" title="python语法 不定长参数"></a>python语法 不定长参数</h1><h3 id="一、任意数量的参数值"><a href="#一、任意数量的参数值" class="headerlink" title="一、任意数量的参数值"></a>一、任意数量的参数值</h3><p>特点：一个函数只能有一个该参数，且只能放在最右边。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">watermelon</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token operator">*</span>attributes<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> attribute <span class="token keyword">in</span> attributes<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span>watermelon<span class="token punctuation">(</span><span class="token string">"西瓜"</span><span class="token punctuation">,</span> <span class="token string">"厚皮"</span><span class="token punctuation">,</span> <span class="token string">"少籽"</span><span class="token punctuation">,</span> <span class="token string">"甜"</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2020/06/05/IbNR5PsqhfxOXiW.png" alt="运行结果"></p><h3 id="二、任意数量的键值对"><a href="#二、任意数量的键值对" class="headerlink" title="二、任意数量的键值对"></a>二、任意数量的键值对</h3><p>特点：用法和前面的相同，但是传递的键值对。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">watermelon</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token operator">**</span>attributes<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> attribute <span class="token keyword">in</span> attributes<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span>watermelon<span class="token punctuation">(</span><span class="token string">"西瓜"</span><span class="token punctuation">,</span> attribute1<span class="token operator">=</span><span class="token string">"厚皮"</span><span class="token punctuation">,</span> attribute2<span class="token operator">=</span><span class="token string">"少籽"</span><span class="token punctuation">,</span> attribute3<span class="token operator">=</span><span class="token string">"甜"</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2020/06/05/lRXEdeaLMu47oW8.png" alt="运行结果"></p>]]></content>
      
      
      <categories>
          
          <category> python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 29.顺时针打印矩阵</title>
      <link href="/2020/06/05/47753.html"/>
      <url>/2020/06/05/47753.html</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-29-顺时针打印矩阵"><a href="#LeetCode-29-顺时针打印矩阵" class="headerlink" title="LeetCode 29.顺时针打印矩阵"></a>LeetCode 29.顺时针打印矩阵</h1><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p><p>示例 1：</p><p>输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]<br>输出：[1,2,3,6,9,8,7,4,5]<br>示例 2：</p><p>输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]<br>输出：[1,2,3,4,8,12,11,10,9,5,6,7]</p><p>限制：</p><p>0 &lt;= matrix.length &lt;= 100<br>0 &lt;= matrix[i].length &lt;= 100</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof" target="_blank" rel="noopener">https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type matrix: List[List[int]]        :rtype: List[int]        """</span>        lenM <span class="token operator">=</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span>        <span class="token keyword">if</span> lenM <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        lenN <span class="token operator">=</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> lenN <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        i <span class="token operator">=</span> <span class="token number">0</span>        j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        change <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> change <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            change <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">while</span> j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> lenN <span class="token operator">and</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0.1</span><span class="token punctuation">:</span>                j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.1</span>                change <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">while</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> lenM <span class="token operator">and</span> matrix<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0.1</span><span class="token punctuation">:</span>                i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.1</span>                change <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">while</span> j <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">and</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0.1</span><span class="token punctuation">:</span>                j <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.1</span>                change <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">while</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">and</span> matrix<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0.1</span><span class="token punctuation">:</span>                i <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.1</span>                change <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> result</code></pre><p><img src="https://i.loli.net/2020/06/05/Coqw2Sj9ytFAKLH.png" alt="运行结果"></p>]]></content>
      
      
      <categories>
          
          <category> 基础算法练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown基础</title>
      <link href="/2020/06/04/47745.html"/>
      <url>/2020/06/04/47745.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><pre><code># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h2><ul><li><strong>加粗</strong><br>使用两个星号进行左右包围</li><li><em>斜体</em><br>使用一个星号进行左右包围</li><li><strong><em>斜体加粗</em></strong><br>使用三个星号进行左右包围</li><li><del>删除线</del><br>使用两个波浪线进行左右包围</li></ul><pre><code>**加粗***斜体****斜体加粗***~~删除线~~</code></pre><h2 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h2><blockquote><p>欢迎来南京！<br>欢迎来南京市！<br>南京欢迎您!</p></blockquote><pre><code>&gt;欢迎来南京！  欢迎来南京市！   南京欢迎您!</code></pre><p>引用可以进行嵌套：</p><blockquote><p>欢迎来南京！  </p><blockquote><p>南京欢迎您!<br>南京欢迎你！</p></blockquote></blockquote><pre><code>&gt;欢迎来南京！  &gt;&gt;南京欢迎您!  南京欢迎你！</code></pre><h2 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h2><p>连续使用三个或者三个以上的*或者-，使用-需要前面有一个空行：<br>分割线1：</p><hr><p>分割线2：</p><hr><p>分割线3:</p><hr><p>分割线4：</p><hr><pre><code>分割线1：***  分割线2：****   分割线3:--- 分割线4：----</code></pre><h2 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h2><pre><code>![图片alt](图片地址 &quot;图片title&quot;)alt是图片下面的文字，是对图片的解释。图片title是图片的标题，当鼠标移动到图片上方时候显示的内容。title可以省略</code></pre><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1591272769510&di=89aa0907917561ecd8d5e3f792d887be&imgtype=0&src=http%3A%2F%2Fhbimg.b0.upaiyun.com%2F1da23d64a0749781c691b8987caf295153a120c2fb7c-k4QrXs_fw658" alt="棉花糖" title="这是棉花糖哦！">  </p><p>上传本地图片直接点击导航栏的图片标识，然后选择图片。<br><a href="https://www.jianshu.com/p/ea1eb11db63f" target="_blank" rel="noopener">图床的使用</a></p><h2 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h2><p>语法：</p><pre><code>[超链接名称](超链接地址 &quot;超链接title&quot;)title是可选的内容</code></pre><p>例如：<br><a href="https://www.baidu.com/" target="_blank" rel="noopener">百度官网地址</a><br><a href="https://www.nju.edu.cn/" target="_blank" rel="noopener" title="这是百度的官网哦">百度官网地址</a>  </p><pre><code>[百度官网地址](https://www.baidu.com/)  [百度官网地址](https://www.nju.edu.cn/ &quot;这是百度的官网哦&quot;) </code></pre><p>注意：不支持链接在新的页面打开，简书做了处理是可以的。如果想要打开新的页面使用下面的语法：  </p><pre><code>&lt;a href=&quot;超链接的地址&quot; target=&quot;_blank&quot;&gt;超链接名称&lt;/a&gt;  &lt;a href=&quot;www.baidu.com/&quot; target=&quot;_blank&quot;&gt;百度官网&lt;/a&gt;</code></pre><p><a href="www.baidu.com/" target="_blank">百度官网</a></p><h2 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a><strong>无序列表</strong></h3><p>语法：<br>使用+ - *任何一种都是可以的：</p><pre><code>- 狗子1号+ 狗子2号* 狗子3号</code></pre><ul><li>狗子1号</li></ul><ul><li>狗子2号</li></ul><ul><li>狗子3号<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a><strong>有序列表</strong></h3>语法：<br>数字加点  </li></ul><pre><code>1. 狗子一号2. 狗子二号3. 狗子三号</code></pre><ol><li>狗子一号</li><li>狗子二号</li><li>狗子三号<h3 id="列表的嵌套"><a href="#列表的嵌套" class="headerlink" title="列表的嵌套"></a><strong>列表的嵌套</strong></h3>语法：<br>上一级和下一级之间敲三个空格即可</li></ol><ul><li>这是第一级<ul><li>这是第二级<ul><li>这是第三级</li></ul></li></ul></li></ul><pre><code>- 这是第一级   - 这是第二级      - 这是第三级</code></pre><ul><li>这是第一级第一个元素</li><li>这是第一级第二个元素<ol><li>这是第二级第一个元素</li><li>这是第二级第二个元素</li><li>这是第二级第三个元素<ul><li>这是第三级第一个元素</li><li>这是第三季第二个元素</li></ul></li></ol></li></ul><pre><code>* 这是第一级第一个元素* 这是第一级第二个元素   1. 这是第二级第一个元素   2. 这是第二级第二个元素   3. 这是第二级第三个元素      * 这是第三级第一个元素      * 这是第三级第二个元素</code></pre><h2 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h2><p>语法：</p><pre><code>表头|表头|表头---|:--:|--:内容|内容|内容|内容|内容|内容|</code></pre><p>示例：<br>姓名|年龄|性别<br>—|:–:|–:<br>狗子|100|女|<br>二哈|100|女|</p><h2 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h2><p>语法：<br>当行代码：代码使用`左右包起来</p><pre><code>`int main(void)`</code></pre><p><code>int main(void)</code><br>多行代码：使用三个反引号左右包起来</p><pre><code>#include&lt;stdio.h&gt;int main(void){    printf(&quot;Hello world&quot;);}</code></pre><h2 id="十、补充"><a href="#十、补充" class="headerlink" title="十、补充"></a>十、补充</h2><ul><li><p>两个空格 + 回车 = 换行<br>eg.markdown直接换行是没有效果的</p></li><li><p>使用<code>&lt;font color=&quot;red&quot;&gt;中间写上想说的话&lt;/font&gt;</code>修改字体的颜色。例如：<br> <font color="red">中间写上想说的话</font></p></li><li><p>在markdown写作首部添加如下代码：</p><pre><code> &lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;</code></pre><pre><code> eg.$$公式$$表示行间公式，本来Tex中使用\(公式\)表示行内公式。</code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo提交文章方式</title>
      <link href="/2020/06/04/16107.html"/>
      <url>/2020/06/04/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
