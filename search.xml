<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux 常用命令</title>
      <link href="/2020/06/08/19568.html"/>
      <url>/2020/06/08/19568.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 兄弟连Linux课程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 服务器的维护和管理建议</title>
      <link href="/2020/06/08/4975.html"/>
      <url>/2020/06/08/4975.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-服务器的维护和管理建议"><a href="#Linux-服务器的维护和管理建议" class="headerlink" title="Linux 服务器的维护和管理建议"></a>Linux 服务器的维护和管理建议</h1><h2 id="一、Linux各个目录的用作"><a href="#一、Linux各个目录的用作" class="headerlink" title="一、Linux各个目录的用作"></a>一、Linux各个目录的用作</h2><ul><li><code>/bin/</code>&ensp;存放系统命令的目录， <strong><code>普通用户</code></strong> 和 <strong><code>超级用户</code></strong> 都可以执行。放在 <strong><code>/bin</code></strong> 目录下的命令可以在 <strong>单用户模式</strong>下执行。</li><li><code>/sbin/</code>&ensp;保存和系统环境设置相关的命令，只有 <strong><code>超级用户</code></strong> 可以使用这些命令进行系统环境设置，有些命令允许普通用户进行查看。</li><li><code>/usr/bin/</code>&ensp;存放系统命令的目录，<strong>普通用户</strong> 和 <strong>超级用户</strong> 都可以执行。这些命令和系统启动无关，在单用户模式下无法执行。</li><li><code>/usr/sbin/</code>&ensp;存在于根系统 <strong>不必要的系统管理命令</strong> 。只有超级用户可以使用。</li><li><code>/boot/</code>&ensp;系统启动目录，保存和 <strong><code>系统启动相关的文件</code></strong> ，例如内核文件和启动引导程序文件等。eg.这个目录大小只有200M，因为为了让系统能够正常的启动，不要在该目录下面放其他的文件。</li><li><code>/dev/</code>&ensp; <strong><code>设备文件</code></strong> 保存位置。Linux所以的内容都是以文件的形式进行保存，包括硬件。这个目录就是用来保存所有的硬件设备文件的。</li><li><code>/etc/</code>&ensp; <strong><code>配置文件</code></strong> 保存的位置。系统中所有采用默认的安装方式(npm安装)的配置文件全部保存在该目录下面。例如用户的账号和密码，服务的启动的脚本，常用的服务配置文件等等。 </li><li><code>/home/</code>&ensp;普通用户的家目录。建立每个用户的时候，每个用户都有一个默认的登陆位置，这个位置就是用户的家目录，所有的普通的用户都在 <code>/home/</code>目录下建立一个和用户名相同的目录。例如用户wanggongsheng的家目录是<code>/home/wanggongsheng</code></li><li><code>/lib/</code>&ensp;<strong>系统调用的函数库</strong> 保存的位置。 </li><li><code>/lost+found/</code>&ensp;这个目录不仅存放在根目录下，在每一个分区下都有这样的一个目录，例如<code>/boot</code>目录。当系统系统意外崩溃或者意外的关机，产生的一些 <strong>文件碎片</strong> 放在这里。当 <strong>系统启动的过程中，fsck工具会检查这里，修改已经损坏的文件系统</strong> 。这个目录只在每个分区中出现，例如<code>/lost+found</code>就是根目录的备份恢复目录，<code>/boot/lost+found</code>就是<code>/boot</code>分区的备份恢复目录。</li><li><code>/media/</code>&ensp;<strong><code>挂载目录</code></strong>。系统建议是挂载 <strong>媒体设备</strong>，例如 <strong>软盘</strong> 和 <strong>光盘</strong> 。</li><li><code>/mnt/</code>&ensp;<strong><code>挂载目录</code></strong>。早期的Linux只要一个挂载目录，没有细分。该目录建议 <strong>挂载额外的设备</strong> ，如 <strong>U盘</strong> ，<strong>移动硬盘</strong> 和 <strong>其他操作系统的分区</strong> 。</li><li><code>/mist/</code>&ensp;<strong><code>挂载目录</code></strong>。系统建议挂载NFS服务的共享目录。</li><li>虽然系统准备了三个默认的挂载目录，但是到底在什么目录挂载什么设备由管理员进行决定。</li><li><code>/opt/</code>&ensp;第三方安装软件的保存位置。这个目录就是放置和安装其他软件的，手工安装的源码包都可以安装到这个目录下。不过把软件安装到<code>/usr/local/</code>&ensp;目录当中也非常好（Linux行业默认的行为）。</li><li><code>/proc/</code>&ensp;虚拟文件系统，该目录中的数据并不是保存到磁盘当中，而是 <strong>保存到内存</strong> 当中。主要保存系统的 <strong>内核</strong> ，<strong>进程</strong>，<strong>外部设备状态</strong> 和 <strong>网络状态</strong> 等。</li><li><code>/sys/</code>&ensp;虚拟文件系统。和<code>/proc/</code>目录相似，都是保存在内存当中的，主要保存和内核相关的信息。</li><li><code>/root/</code>&ensp; <strong><code>超级用户的家目录</code></strong> 。普通用户的家目录在<code>/home/</code>下。超级用户的家目录直接在<code>/</code>下面。</li><li><code>/srv/</code>&ensp;服务数据目录。一些服务启动了之后，可以在这个目录保存所需要的数据。</li><li><code>/tmp/</code>&ensp;临时目录。<strong>系统存放临时文件</strong> 的目录，该目录下的文件所有的用户都可以访问。此目录不能保存重要的文件，最好每次开机都把该目录清空。</li><li><code>/usr/</code>&ensp;系统资源目录。这里usr不是user简写，而是Unix Softwre Resource缩写。不是用于存放用户的数据，而是放系统的软件资源。系统中大多数安装的软件资源都保存在这里。</li><li><code>/var/</code>&ensp;动态数据保存的位置。主要保存缓存，日志以及软件运行所产生的文件。</li></ul><h2 id="二、服务器的注意事项"><a href="#二、服务器的注意事项" class="headerlink" title="二、服务器的注意事项"></a>二、服务器的注意事项</h2><ul><li><strong>远程服务器不允许关机，只能重启</strong></li><li>重启的时候应该 <strong>关闭服务</strong></li><li>不要在服务器访问高峰运行高负载指令</li><li>远程配置 <strong>防火墙</strong> 时不要把自己提出防火墙。<blockquote><p><font color="purple">防火墙相当于一个过滤器，通过IP地址，端口地址，包中数据判断该数据能不能通过防火墙。防火墙不能取代杀毒软件。）</font></p></blockquote></li><li>指定合理的密码规范并定时更新</li><li>合理分配权限（权限越小越好）</li><li>定期备份重要数据和日志</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux, 兄弟连Linux课程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 注意事项</title>
      <link href="/2020/06/08/37499.html"/>
      <url>/2020/06/08/37499.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-注意事项"><a href="#Linux-注意事项" class="headerlink" title="Linux 注意事项"></a>Linux 注意事项</h1><ul><li><p>Linux严格区分大小写</p></li><li><p>Linux所有内容都是以 <strong><code>文件</code></strong> 的形式保存，包括硬件</p><ul><li>Windows使用设备管理器管理硬件，Linux使用文件管理硬件 </li><li>对配置的修改需要写入到文件当中才可以永久生效，否则只能临时生效</li><li>硬盘文件是 <code>/dev/sd[a-p]</code></li><li>光盘文件是<code>/dev/sr0</code>等</li></ul></li><li><p><strong><code>Linux文件不靠扩展名识别文件</code></strong>，Windows使用扩展名判断文件类型，例如.exe表示可执行文件。Linux不使用扩展名识别文件，它使用 <strong><code>文件的权限</code></strong> 来指定。Linux有些文件使用了扩展名是为了使用方便系统的管理员（Linux）识别文件，对于Linux而言，不使用这些扩展名依然可以识别文件的类型。</p><ul><li>压缩包：&ensp;.gz&ensp;.bz2&ensp;.tar.bz2&ensp;.tgz</li><li>二进制软件包：&ensp;.rpm</li><li>脚本文件：&ensp;.sh</li><li>配置文件：&ensp;.conf</li><li>网页文件：&ensp;.html&ensp;.php</li></ul></li><li><p>Linux的所有的存储设备都必须 <strong><code>挂载（mount）</code></strong> 之后用户才可以使用，包括硬件、U盘、光盘。</p><blockquote><p><font color="purple">在Unix系统中，所有可访问的文件都是被组织在一个文件树中，即文件层次结构（file hierarchy），其根为 /。mount命令用于把在某些设备上的文件系统附加到大文件树，这样的话，系统才可以访问这些设备上的文件。Unix操作系统只有一个单一的目录树结构，该目录树的最顶层就是 / ， 所有可访问文件都必须与这个目录树结构关联。这一点和Windows操作系统不同，在Windows中，每一个硬盘都有独立的目录树结构，比如D:\workspace\algorithm ，C:\Users 这样的。挂载（mount）这一动作就是把某个设备与目录树中的某个特定位置进行关联，以便于操作系统能够从根目录开始找到这个刚刚加入的设备，从而访问该设备的内的文件数据。（需要注意的是，这里的设备是泛指，既可以指usb、CD-ROM这样真实的设备，也可以是操作系统中的某个目录）。比如，当系统启动的时候，一个特殊的存储设备（通常被称为root 分区）就会与目录树的根进行关联，换句话说，把root分区挂载到了/ 上。</font>  </p></blockquote><p><a href="https://www.cnblogs.com/kkbill/p/11979082.html" target="_blank" rel="noopener">关于挂载的详细信息文章链接</a></p></li><li><p>Linux服务器一般不会使用图形化界面的，因为对于存储设备，需要我们的手动 <strong><code>挂载</code></strong>。</p></li><li><p>Windows下的程序不能直接在Linux中安装和运行。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 兄弟连Linux课程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 990 等式方程的可满足性</title>
      <link href="/2020/06/08/15733.html"/>
      <url>/2020/06/08/15733.html</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-990-等式方程的可满足性"><a href="#LeetCode-990-等式方程的可满足性" class="headerlink" title="LeetCode 990 等式方程的可满足性"></a>LeetCode 990 等式方程的可满足性</h1><p>给定一个由表示变量之间关系的字符串方程组成的数组，每个字符串方程 <code>equations[i]</code> 的长度为 4，并采用两种不同的形式之一：<code>&quot;a==b&quot;</code> 或 <code>&quot;a!=b&quot;</code>。在这里，a 和 b 是小写字母（不一定不同），表示单字母变量名。只有当可以将整数分配给变量名，以便满足所有给定的方程时才返回 true，否则返回 false。 </p><p>示例 1：</p><p>输入：<code>[&quot;a==b&quot;,&quot;b!=a&quot;]</code><br>输出：<code>false</code> </p><p>解释：如果我们指定，a = 1 且 b = 1，那么可以满足第一个方程，但无法满足第二个方程。没有办法分配变量同时满足这两个方程。  </p><p>示例 2：</p><p>输出：<code>[&quot;b==a&quot;,&quot;a==b&quot;]</code><br>输入：<code>true</code> </p><p>解释：我们可以指定 a = 1 且 b = 1 以满足满足这两个方程。  </p><p>示例 3：</p><p>输入：<code>[&quot;a==b&quot;,&quot;b==c&quot;,&quot;a==c&quot;]</code><br>输出：<code>true</code></p><p>示例 4：</p><p>输入：<code>[&quot;a==b&quot;,&quot;b!=c&quot;,&quot;c==a&quot;]</code><br>输出：<code>false</code>  </p><p>示例 5：</p><p>输入：<code>[&quot;c==c&quot;,&quot;b==d&quot;,&quot;x!=z&quot;]</code><br>输出：<code>true</code></p><p>提示：</p><ul><li>1 &lt;= equations.length &lt;= 500</li><li>equations[i].length == 4</li><li>equations[i][0] 和 equations[i][3] 是小写字母</li><li>equations[i][1] 要么是 ‘=’，要么是 ‘!’</li><li>equations[i][2] 是 ‘=’</li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/satisfiability-of-equality-equations" target="_blank" rel="noopener">https://leetcode-cn.com/problems/satisfiability-of-equality-equations</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p>思路： <strong>并查集</strong>、<strong>路径压缩</strong>，注意先处理合并内容。  </p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">equationsPossible</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> equations<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        :type equations: List[str]        :rtype: bool        '''</span>        pre <span class="token operator">=</span> <span class="token punctuation">{</span>chr<span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">:</span>chr<span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token keyword">for</span> ch <span class="token keyword">in</span> range<span class="token punctuation">(</span>ord<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ord<span class="token punctuation">(</span><span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> equation <span class="token keyword">in</span> equations<span class="token punctuation">:</span>            <span class="token keyword">if</span> equation<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'='</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>union<span class="token punctuation">(</span>pre<span class="token punctuation">,</span> equation<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> equation<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> equation <span class="token keyword">in</span> equations<span class="token punctuation">:</span>            <span class="token keyword">if</span> equation<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'!'</span><span class="token punctuation">:</span>                x <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>pre<span class="token punctuation">,</span> equation<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                y <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>pre<span class="token punctuation">,</span> equation<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> x <span class="token operator">==</span> y<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pre<span class="token punctuation">,</span> root1<span class="token punctuation">,</span> root2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        并查集合并        '''</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>pre<span class="token punctuation">,</span> root1<span class="token punctuation">)</span>        y <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>pre<span class="token punctuation">,</span> root2<span class="token punctuation">)</span>        <span class="token keyword">if</span> x <span class="token operator">!=</span> y<span class="token punctuation">:</span>            pre<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> x    <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pre<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        并查集查找        '''</span>        x <span class="token operator">=</span> root        <span class="token keyword">while</span> pre<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">!=</span> root<span class="token punctuation">:</span>            root <span class="token operator">=</span> pre<span class="token punctuation">[</span>root<span class="token punctuation">]</span>        <span class="token keyword">while</span> pre<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> root<span class="token punctuation">:</span>            temp <span class="token operator">=</span> pre<span class="token punctuation">[</span>x<span class="token punctuation">]</span>            pre<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> root            x <span class="token operator">=</span> temp        <span class="token keyword">return</span> root</code></pre>]]></content>
      
      
      <categories>
          
          <category> 基础算法练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语法 异常</title>
      <link href="/2020/06/08/22133.html"/>
      <url>/2020/06/08/22133.html</url>
      
        <content type="html"><![CDATA[<h1 id="python语法-异常"><a href="#python语法-异常" class="headerlink" title="python语法 异常"></a>python语法 异常</h1><h3 id="一、程序中的问题"><a href="#一、程序中的问题" class="headerlink" title="一、程序中的问题"></a>一、程序中的问题</h3><ul><li>代码语法错误</li><li>代码存在的隐形错误</li><li>软件面对不确定性的异常错误。软件代码本身没有什么问题，问题来自运行过程中环境带来的不确定性异常。<ul><li>软件尝试打开一个文件，但是文件已经被占用或者损毁。</li><li>软件插入数据的过程中，网络中断导致数据丢失。</li><li>软件运行过程中硬件出现故障。</li><li>软件输入出现错误</li></ul></li></ul><h3 id="二、捕获异常"><a href="#二、捕获异常" class="headerlink" title="二、捕获异常"></a>二、捕获异常</h3><p>基本语法：  </p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    代码模块<span class="token number">1</span><span class="token keyword">except</span><span class="token punctuation">:</span>    代码模块<span class="token number">2</span></code></pre><p>带有finally子句的异常处理：<br>处理程序运行过程中，无论是否报错，都要处理的一些代码功能。比如打开文件读取字符，如果出错，先提示打开文件错误，然后关闭打开的文件，避免反复打开文件带来的内存消耗。文件正常打开的情况下，读取完文件之后，也要及时关闭这个文件。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    代码模块<span class="token number">1</span><span class="token keyword">except</span> <span class="token punctuation">(</span>Exception1<span class="token punctuation">,</span> Exception2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    代码模块<span class="token number">2</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    代码模块<span class="token number">3</span></code></pre><h3 id="三、抛出异常"><a href="#三、抛出异常" class="headerlink" title="三、抛出异常"></a>三、抛出异常</h3><p><code>raise [Exception]</code>&ensp;其中Exception是可选的。</p>]]></content>
      
      
      <categories>
          
          <category> python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语法 模块</title>
      <link href="/2020/06/07/44565.html"/>
      <url>/2020/06/07/44565.html</url>
      
        <content type="html"><![CDATA[<h1 id="python语法-模块"><a href="#python语法-模块" class="headerlink" title="python语法 模块"></a>python语法 模块</h1><p>python的模块分为<strong>标准库模块</strong>和<strong>自定义模块</strong>，<strong>自定义模块</strong>分为以下几类：</p><ul><li><strong>函数模块文件</strong>：&ensp;存放自定义函数模块的代码文件，主要供主程序调用使用  </li><li><strong>类模块文件</strong>：&ensp;存放自定义类模块的代码文件，主要用于主函数调用</li><li><strong>主程序模块</strong>：&ensp;直接被编译器调用并首先执行的代码文件</li></ul><p>导入一个非搜索路径下的模块文件：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> syssys<span class="token punctuation">.</span>path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token string">'d:'</span> <span class="token comment" spellcheck="true"># 在非搜索路径下，必须指定文件的绝对路径</span><span class="token keyword">import</span> Solution     <span class="token comment" spellcheck="true"># 导入绝对路径下的Solution模块文件</span>help<span class="token punctuation">(</span>Solution<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 使用help函数读取模块文件的相关描述信息</span></code></pre><p>运行结果：<br><img src="https://pic.downk.cc/item/5edda146c2a9a83be5d18b2b.jpg" alt=""></p><p><strong>可以考虑建立子文件夹把模块文件分类保存</strong></p><ul><li>建立定义包目录，如package1，然后在该文件夹下存放一个<code>__init__.py</code>的空文件，用于说明该文件夹是一个包。</li><li>可以把模块文件分类放到包下面，也可以在顶级目录下面存放模块文件</li><li>导入格式&ensp;<code>import 包名.模块名称.函数or类名称</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 126 单词接龙II</title>
      <link href="/2020/06/07/58721.html"/>
      <url>/2020/06/07/58721.html</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-126-单词接龙II"><a href="#LeetCode-126-单词接龙II" class="headerlink" title="LeetCode 126 单词接龙II"></a>LeetCode 126 单词接龙II</h1><p>给定两个单词（beginWord 和 endWord）和一个字典 wordList，找出所有从 beginWord 到 endWord 的最短转换序列。转换需遵循如下规则：</p><ul><li>每次转换只能改变一个字母。</li><li>转换过程中的中间单词必须是字典中的单词。</li></ul><p>说明:</p><ul><li>如果不存在这样的转换序列，返回一个空列表。</li><li>所有单词具有相同的长度。</li><li>所有单词只由小写字母组成。</li><li>字典中不存在重复的单词。</li><li>你可以假设 beginWord 和 endWord 是非空的，且二者不相同。</li></ul><p>示例 1:</p><p>输入:  </p><p>beginWord = “hit”,<br>endWord = “cog”,<br>wordList = [“hot”,”dot”,”dog”,”lot”,”log”,”cog”]</p><p><strong>输出</strong>:<br>[<br>  [“hit”,”hot”,”dot”,”dog”,”cog”],<br>  [“hit”,”hot”,”lot”,”log”,”cog”]<br>]</p><p>示例 2:</p><p>输入:<br>beginWord = “hit”<br>endWord = “cog”<br>wordList = [“hot”,”dot”,”dog”,”lot”,”log”]</p><p>输出: []</p><p>解释: endWord “cog” 不在字典中，所以不存在符合要求的转换序列。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/word-ladder-ii" target="_blank" rel="noopener">https://leetcode-cn.com/problems/word-ladder-ii</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p>eg. 运行超时</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findLadders</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> beginWord<span class="token punctuation">,</span> endWord<span class="token punctuation">,</span> wordList<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type beginWord: str        :type endWord: str        :type wordList: List[str]        :rtype: List[List[str]]        """</span>        <span class="token keyword">if</span> endWord <span class="token operator">not</span> <span class="token keyword">in</span> wordList<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        vis <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>wordList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        G <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>wordList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>wordList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>wordList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">(</span>wordList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>diff<span class="token punctuation">(</span>wordList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> wordList<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>wordList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>diff<span class="token punctuation">(</span>wordList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> beginWord<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>beginWord<span class="token punctuation">,</span> endWord<span class="token punctuation">,</span> wordList<span class="token punctuation">,</span> G<span class="token punctuation">,</span> vis<span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>                vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        minLen <span class="token operator">=</span> len<span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> p <span class="token keyword">in</span> res<span class="token punctuation">:</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&lt;</span> minLen<span class="token punctuation">:</span>                minLen <span class="token operator">=</span> len<span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> p <span class="token keyword">in</span> res<span class="token punctuation">:</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">==</span> minLen<span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> beginWord<span class="token punctuation">,</span> endWord<span class="token punctuation">,</span> wordList<span class="token punctuation">,</span> G<span class="token punctuation">,</span> vis<span class="token punctuation">,</span> path<span class="token punctuation">,</span> dep<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> wordList<span class="token punctuation">[</span>path<span class="token punctuation">[</span>dep<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> endWord<span class="token punctuation">:</span>            ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>beginWord<span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> path<span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>wordList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ans<span class="token punctuation">)</span>            <span class="token keyword">return</span>         <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>wordList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">False</span> <span class="token operator">and</span> G<span class="token punctuation">[</span>path<span class="token punctuation">[</span>dep<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>beginWord<span class="token punctuation">,</span> endWord<span class="token punctuation">,</span> wordList<span class="token punctuation">,</span> G<span class="token punctuation">,</span> vis<span class="token punctuation">,</span> path<span class="token punctuation">,</span> dep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>                vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">diff</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> word1<span class="token punctuation">,</span> word2<span class="token punctuation">)</span><span class="token punctuation">:</span>        num <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>word1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> word1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> word2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 基础算法练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习 推荐书籍和课程</title>
      <link href="/2020/06/06/undefined.html"/>
      <url>/2020/06/06/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="机器学习-推荐书籍和课程"><a href="#机器学习-推荐书籍和课程" class="headerlink" title="机器学习 推荐书籍和课程"></a>机器学习 推荐书籍和课程</h1><h2 id="推荐书籍"><a href="#推荐书籍" class="headerlink" title="推荐书籍"></a>推荐书籍</h2><p><img src="https://pic.downk.cc/item/5edba88cc2a9a83be54738db.jpg" alt=""></p><h2 id="推荐课程"><a href="#推荐课程" class="headerlink" title="推荐课程"></a>推荐课程</h2><p><img src="https://pic.downk.cc/item/5edba986c2a9a83be549d148.jpg" alt=""></p><p><a href="https://www.coursera.org/learn/machine-learning" target="_blank" rel="noopener">https://www.coursera.org/learn/machine-learning</a></p><p><a href="https://study.163.com/course/courseLearn.htm?courseId=1004570029#/learn/video?lessonId=1049052745&courseId=1004570029" target="_blank" rel="noopener">https://study.163.com/course/courseLearn.htm?courseId=1004570029#/learn/video?lessonId=1049052745&amp;courseId=1004570029</a></p><p><a href="http://cs231n.stanford.edu/2019/" target="_blank" rel="noopener">http://cs231n.stanford.edu/2019/</a><br><a href="http://cs231n.stanford.edu/2019/" target="_blank" rel="noopener"></a></p><p><a href="https://www.youtube.com/playlist?list=PL3FW7Lu3i5JvHM8ljYjzLfQRF3EO8sYv" target="_blank" rel="noopener">https://www.youtube.com/playlist?list=PL3FW7Lu3i5JvHM8ljYjzLfQRF3EO8sYv</a></p><h3 id="深度学习平台"><a href="#深度学习平台" class="headerlink" title="深度学习平台"></a>深度学习平台</h3><p><img src="https://pic.downk.cc/item/5edbaa9dc2a9a83be54cdf0c.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语法 常用模块</title>
      <link href="/2020/06/06/33040.html"/>
      <url>/2020/06/06/33040.html</url>
      
        <content type="html"><![CDATA[<h1 id="python语法-常用模块"><a href="#python语法-常用模块" class="headerlink" title="python语法 常用模块"></a>python语法 常用模块</h1><h2 id="一、datetime模块"><a href="#一、datetime模块" class="headerlink" title="一、datetime模块"></a>一、datetime模块</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span>date<span class="token punctuation">,</span>time<span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># datetime.now()返回当天的日期和时间</span>today <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span>today<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># datetime.date(t)返回t对应的日期,t是datetime类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>time<span class="token punctuation">(</span>today<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># datetime.time(t)返回t对应的时间，t是datetime类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span>today<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># datetime.ctime(t)返回t对应的“星期，月，日，时，分，秒，年”格式的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># datetime.utcnow()获取当前的UTC时间，datetime类型.eg.UTC是世界标准时间</span><span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>timestamp<span class="token punctuation">(</span>today<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># datetime.timestamp(t)返回t对应的时间戳</span><span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>fromtimestamp<span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>timestamp<span class="token punctuation">(</span>today<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># datetime.fromtimestamp(时间戳)，返回值是datetime类型</span>date1 <span class="token operator">=</span> date<span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 使用date类，生成date1对象</span>time1 <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 使用time类，生成time1对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>time1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>combine<span class="token punctuation">(</span>date1<span class="token punctuation">,</span> time1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 绑定时间和日期，生成一个新的datetime对象</span>dt <span class="token operator">=</span> datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span><span class="token string">"2020/6/6 18:08"</span><span class="token punctuation">,</span> <span class="token string">"%Y/%m/%d %H:%M"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 用字符串和自定的格式生成datetime对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span>isocalendar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># ISO格式的日期</span><span class="token keyword">print</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y years %m months %d days %I hours %M minutes %S seconds %p"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 对datetime格式自定义对象</span></code></pre><p>运行结果：<br><img src="https://pic.downk.cc/item/5edb7b57c2a9a83be5d48277.jpg" alt=""></p><p>时间日期格式化符号：<br><img src="https://pic.downk.cc/item/5edb7c42c2a9a83be5d6a3c4.jpg" alt=""><br><img src="https://pic.downk.cc/item/5edb7c5bc2a9a83be5d6db6b.jpg" alt=""></p><h2 id="二、math模块"><a href="#二、math模块" class="headerlink" title="二、math模块"></a>二、math模块</h2><ul><li>浮点数取整，用trunc(x)取整，x是浮点数。返回结果是整数。注意：x//1也是取整，但是返回的结果是浮点数。</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> mathmath<span class="token punctuation">.</span>trunc<span class="token punctuation">(</span><span class="token number">3.9</span><span class="token punctuation">)</span></code></pre><p>&ensp;&ensp;&ensp;&ensp;&ensp;运行结果：3<br>&ensp;&ensp;&ensp;&ensp;&ensp;eg. <code>3.9//1</code> 的运行结果是3.0</p><ul><li>取大整数，使用math.ceil(x)，x是浮点数</li></ul><pre class=" language-python"><code class="language-python">price <span class="token operator">=</span> <span class="token number">3.28</span>math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>price<span class="token punctuation">)</span></code></pre><p>&ensp;&ensp;&ensp;&ensp;&ensp;运行结果：4 </p><ul><li><p>round(x)进行四舍五入，x是浮点数</p></li><li><p>对元组中的每个数求和<code>math.fsum(元组)</code></p></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> mathnums <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">3.3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>fsum<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>&ensp;&ensp;&ensp;&ensp;&ensp;运行结果： 6.6<br>&ensp;&ensp;&ensp;&ensp;&ensp;<code>math.fsum()</code>和<code>sum()</code>的区别是：<code>math.fsum()</code>只返回浮点数，<code>sum()</code>根据参数决定返回值类型，如果参数是整数，返回值是整数。如果参数是浮点数，返回值是浮点数。</p><ul><li>求数的绝对值，浮点数使用<code>math.fabs()</code>，整数使用<code>abs()</code> </li></ul><h2 id="三、random模块"><a href="#三、random模块" class="headerlink" title="三、random模块"></a>三、random模块</h2><ul><li><code>random()</code> : 生成一个基于 <strong>[0.0, 1.0)</strong> 之间的浮点数</li><li><code>uniform(a,b)</code>: 在指定的范围获取随机浮点数 N， N在[a, b]范围内</li><li><code>triangular(low, high, mode)</code>:返回三角分布的随机数， low、high是返回值的上下界，mode为中值。low和high的默认值分别为0和1。mode参数默认为两个边界的<strong>中间点</strong>。持续使用该方法，可以得到<strong>以mode为对称点的随机分布数据集</strong>。</li><li><code>betavariate(alpha, beta)</code>: 求Beta分布的随机数，alpha和beta都要大于0，返回值介于0,1之间。</li></ul><p>&ensp;&ensp;&ensp;&ensp;<a href="漫谈三点估算法中关于贝塔分布、三角分布的理解"><strong>补充知识:漫谈三点估算法中关于贝塔分布、三角分布的理解</strong></a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>triangular<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>triangular<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>nums <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>triangular<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">]</span>num1 <span class="token operator">=</span> <span class="token number">0</span>num2 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> x <span class="token keyword">in</span> nums<span class="token punctuation">:</span>    <span class="token keyword">if</span> x <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>        num1 <span class="token operator">=</span> num1 <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        num2 <span class="token operator">=</span> num2 <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"num1 = %d num2 = %d"</span><span class="token operator">%</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%f%%   %f%%"</span><span class="token operator">%</span><span class="token punctuation">(</span>num1<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">,</span> num2<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>betavariate<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="四、os模块"><a href="#四、os模块" class="headerlink" title="四、os模块"></a>四、os模块</h2><ul><li><p>os模块为访问操作系统提供了相关的之处功能，包括Windows,linux,UNIX,Max OS等。</p></li><li><p>os模块的功能包括：</p><ul><li>对文件的相关操作功能</li><li>系统访问Path路径的操作</li><li>Shell命令行操作</li><li>Linux扩展属性操作</li><li>流程管理</li><li>CPU等硬件信息的获取</li><li>基于操作系统的真正的随机数的操作</li><li>相关的一些系统常量的提供</li></ul></li><li><p>os模块常用的函数</p><ul><li><p><code>environ函数</code>：获取操作系统的环境变量</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> osos<span class="token punctuation">.</span>environ</code></pre></li><li><p><code>getcwd函数</code>：获取当前路径对应的字符串</p><pre class=" language-python"><code class="language-python">os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p><code>system(commend)函数</code>:在shell中执行命令（command，是一个命令对应的字符串）</p><pre class=" language-python"><code class="language-python">os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"ping 127.0.0.0"</span><span class="token punctuation">)</span></code></pre></li><li><p><code>urandom(n)函数</code>:获取适合用于加密的n字节大小的随机数字符串</p><pre class=" language-python"><code class="language-python">os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre></li></ul></li></ul><h2 id="五、sys模块"><a href="#五、sys模块" class="headerlink" title="五、sys模块"></a>五、sys模块</h2><ul><li><p>sys模块提供与python解释器紧密相关的一些变量和函数。</p></li><li><p>常用的函数</p><ul><li><p><code>path</code>&ensp;获取模块文件搜索路径的字符串，或者临时指定新的搜索路径</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> syssys<span class="token punctuation">.</span>path</code></pre><p><img src="https://pic.downk.cc/item/5edbd23fc2a9a83be5afc667.jpg" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> syssys<span class="token punctuation">.</span>path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'d:test'</span></code></pre><p><img src="https://pic.downk.cc/item/5edbd2e1c2a9a83be5b0fe0b.jpg" alt=""></p><p>eg. sys.path是list类型的变量，可以进行暂时的修改，用于临时指定新的搜索路径。</p></li><li><p><code>sys.platform</code>&ensp;操作系统识别符判断函数</p><ul><li><p>Linux -&gt; linux</p></li><li><p>Windows -&gt; win32</p></li><li><p>Windows/Cygwin -&gt; cygwin</p></li><li><p>Mac OS -&gt; darwin<br><img src="https://pic.downk.cc/item/5edbd437c2a9a83be5b42e94.jpg" alt=""></p></li><li><p>函数作用：<strong>根据platform和path实现不同版本的模块文件的导入</strong>。例如在Windows操作系统下导入Windows版本的模块，在Linux操作系统下导入Linux版本的模块。</p><pre class=" language-python"><code class="language-python">  <span class="token keyword">if</span> sys<span class="token punctuation">.</span>platform<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'win32'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'调用Windows版本的模块文件代码'</span><span class="token punctuation">)</span>  <span class="token keyword">elif</span> sys<span class="token punctuation">.</span>platform<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'linux'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'调用Linux版本的模块文件代码'</span><span class="token punctuation">)</span></code></pre><p>  <img src="https://pic.downk.cc/item/5edbd619c2a9a83be5b8e1be.jpg" alt=""></p></li></ul></li><li><p><code>sys.getwindowsversion()</code>&ensp;获取当前正在运行的Windows版本信息的元组。<br><img src="https://pic.downk.cc/item/5edbd77cc2a9a83be5bc3179.jpg" alt="">  </p><ul><li>major -&gt; 主要版本号</li><li>minor -&gt; 次要版本号</li><li>build -&gt; 发布的年月</li><li>platform -&gt; 操作系统产品类型，2应该表示用户PC版本，3表示服务器版本。</li><li>service_pack -&gt; 表示一个字符串 </li></ul></li></ul></li></ul><h2 id="六、time模块"><a href="#六、time模块" class="headerlink" title="六、time模块"></a>六、time模块</h2><ul><li><p><code>time.sleep(s)</code>&ensp;程序进程暂停s秒</p></li><li><p><code>time.clock()</code>&ensp;函数把当前的CPU处理器时间用秒为单位的浮点数进行返回。EG.该方法被舍弃，不提倡使用。</p></li><li><p><code>time.strftime(str)</code>&ensp;函数根据时间格式字符串解释当前的时间</p><pre class=" language-python"><code class="language-python">  time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%H hours %M minutes %S seconds'</span><span class="token punctuation">)</span></code></pre><p>  <img src="https://pic.downk.cc/item/5edbdcc7c2a9a83be5c9767a.jpg" alt=""></p></li><li><p><code>time.time()</code>&ensp;函数返回自纪元年起以秒为单位的浮点数时间，就是时间戳  </p><pre class=" language-python"><code class="language-python">  <span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime  <span class="token keyword">import</span> time  <span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>timestamp<span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>  <img src="https://pic.downk.cc/item/5edbda6ac2a9a83be5c3c272.jpg" alt=""></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语法 类的基本语法</title>
      <link href="/2020/06/06/15377.html"/>
      <url>/2020/06/06/15377.html</url>
      
        <content type="html"><![CDATA[<h1 id="python语法-类的基本语法"><a href="#python语法-类的基本语法" class="headerlink" title="python语法 类的基本语法"></a>python语法 类的基本语法</h1><h2 id="一、类的格式"><a href="#一、类的格式" class="headerlink" title="一、类的格式"></a>一、类的格式</h2><ul><li><p>类的第一行格式  </p></li><li><p><code>class 类名():</code></p></li><li><p>类文档说明，使用三个单引号</p></li><li><p>类函数：或者叫做类方法，这种方法必须依赖类或者实例而存在。</p></li><li><p><code>__init__</code> 是类的构造函数，例子如下：  </p></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 必须加上self</span>    name <span class="token operator">=</span> <span class="token string">"西瓜"</span></code></pre><ul><li><p>self关键字作用：用于传输示例对象，实际上传递的是实例对象在<strong>内存中的一个地址</strong>。调用实例的方法时候，self是<strong>隐形</strong>传递的。</p><p>例子:</p></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">watermelon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>attributes <span class="token operator">=</span> attributes    <span class="token keyword">def</span> <span class="token function">disp</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> attribute <span class="token keyword">in</span> self<span class="token punctuation">.</span>attributes<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span>watermelon <span class="token operator">=</span> watermelon<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'绿色'</span><span class="token punctuation">,</span> <span class="token string">'甜的'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>watermelon<span class="token punctuation">.</span>disp<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行结果：<br><img src="https://pic.downk.cc/item/5edb3892c2a9a83be5437326.jpg" alt=""></p><h2 id="二、类的属性和方法"><a href="#二、类的属性和方法" class="headerlink" title="二、类的属性和方法"></a>二、类的属性和方法</h2><ul><li>属性的调用格式：<br><code>实例名.属性名</code></li><li>方法的调用格式：<br><code>实例名.方法名()</code></li></ul><h2 id="三、类的改造（继承、重写方法）"><a href="#三、类的改造（继承、重写方法）" class="headerlink" title="三、类的改造（继承、重写方法）"></a>三、类的改造（继承、重写方法）</h2><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li>继承的格式1：<br><code>class 子类名(父类名)</code></li><li>继承的格式2：<br><code>class 子类名(父类名1, 父类名2, 父类名3)</code></li></ul><p>例子：  </p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">watermelon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>attributes <span class="token operator">=</span> attributes    <span class="token keyword">def</span> <span class="token function">disp</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> attribute <span class="token keyword">in</span> attributes<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">bigwatermelon</span><span class="token punctuation">(</span>watermelon<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attributes<span class="token punctuation">,</span> newattribute<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>attributes<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>newattribute <span class="token operator">=</span> newattribute    <span class="token keyword">def</span> <span class="token function">disp</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 重写方法</span>        <span class="token keyword">for</span> attribute <span class="token keyword">in</span> self<span class="token punctuation">.</span>attributes<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>newattribute<span class="token punctuation">)</span>bigwatermelon <span class="token operator">=</span> bigwatermelon<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'绿色'</span><span class="token punctuation">,</span> <span class="token string">'甜的'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'大的'</span><span class="token punctuation">)</span>bigwatermelon<span class="token punctuation">.</span>disp<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="重写方法"><a href="#重写方法" class="headerlink" title="重写方法"></a>重写方法</h3><ul><li>要求：子类的方法名称和父类方法名称相同</li></ul><h2 id="四、私有"><a href="#四、私有" class="headerlink" title="四、私有"></a>四、私有</h2><ul><li>让类定义的 <strong>函数</strong> or <strong>变量</strong> 变成 <strong>私有</strong> ，只需要在它的名称前面加上双下划线即可。 </li></ul><h2 id="五、把类放到模块当中"><a href="#五、把类放到模块当中" class="headerlink" title="五、把类放到模块当中"></a>五、把类放到模块当中</h2><ul><li>将类的信息保存到xxx.py文件中。使用下面方法导入该xxx.py文件中的所有类：<br><code>from  xxx import *   # 从xxx模块中导入所有类</code><br><code>import xxx as yyy   # 导入xxx模块并简称为yyy</code><br><code>from xxx import clazz   # 从xxx模块中导入clazz这个类</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语法 匿名函数</title>
      <link href="/2020/06/06/34114.html"/>
      <url>/2020/06/06/34114.html</url>
      
        <content type="html"><![CDATA[<h1 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h1><h2 id="匿名函数特点"><a href="#匿名函数特点" class="headerlink" title="匿名函数特点"></a>匿名函数特点</h2><ul><li>匿名函数的格式<br><code>lambda [para1, para2, ...]: expression</code></li><li>labmbda函数没有函数名称</li><li>函数的参数是可选的，可以是任意类型的</li><li>expression实现匿名函数的功能，并返回结果，具有return的功能</li><li>整个匿名函数在一行内实现所有功能</li></ul><pre class=" language-python"><code class="language-python">sum <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">*</span>xnums <span class="token operator">=</span> <span class="token punctuation">[</span>sum<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span></code></pre><p>运行结果：<br><strong>[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</strong></p><h2 id="匿名函数高级使用方法：把匿名函数作为一个函数参数"><a href="#匿名函数高级使用方法：把匿名函数作为一个函数参数" class="headerlink" title="匿名函数高级使用方法：把匿名函数作为一个函数参数"></a>匿名函数高级使用方法：把匿名函数作为一个函数参数</h2><p><strong>优点</strong>  </p><ul><li>在调用函数的时候，可以随时修改lambda函数的逻辑表达式来改变函数的逻辑</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">:</span>    nums <span class="token operator">=</span> <span class="token punctuation">[</span>method<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> nums<span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="匿名函数高级使用方法：-动态传入匿名函数"><a href="#匿名函数高级使用方法：-动态传入匿名函数" class="headerlink" title="匿名函数高级使用方法： 动态传入匿名函数"></a>匿名函数高级使用方法： 动态传入匿名函数</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">:</span>    nums <span class="token operator">=</span> <span class="token punctuation">[</span>method<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> numss <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入匿名函数表达式："</span><span class="token punctuation">)</span>method <span class="token operator">=</span> eval<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果：<br><img src="https://pic.downk.cc/item/5edb2ca4c2a9a83be5222d92.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语法 函数和变量作用域</title>
      <link href="/2020/06/06/10740.html"/>
      <url>/2020/06/06/10740.html</url>
      
        <content type="html"><![CDATA[<h1 id="python语法-函数和变量作用域"><a href="#python语法-函数和变量作用域" class="headerlink" title="python语法 函数和变量作用域"></a>python语法 函数和变量作用域</h1><h2 id="1-全局变量和局部变量"><a href="#1-全局变量和局部变量" class="headerlink" title="1. 全局变量和局部变量"></a>1. 全局变量和局部变量</h2><ul><li>全局变量自定义赋值开始，后续代码都可以访问变量</li><li>局部变量只能在被定义的函数和类内部被访问</li><li>不提倡在函数中直接引用全局变量</li><li>变量的作用范围与变量的赋值位置紧密相关，例如: a是后续代码的全部变量，b是后续代码的全局变量</li></ul><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    b <span class="token operator">=</span> <span class="token number">100</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">return</span> bb <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5edb13abc2a9a83be5e13465.jpg" alt="运行结果"></p><p><strong>局部变量特点：</strong></p><h2 id="2-global关键字"><a href="#2-global关键字" class="headerlink" title="2. global关键字"></a>2. global关键字</h2><ul><li><strong>函数内部默认只能读全局变量，如果想要修改，需要使用global关键字</strong></li></ul><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> x<span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5edb174fc2a9a83be5e79be6.jpg" alt="没有使用global产生的报错"></p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> x    x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> x<span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果： 2</p><h2 id="3-闭包"><a href="#3-闭包" class="headerlink" title="3. 闭包"></a>3. 闭包</h2><ul><li>介于全局变量和局部变量之间</li><li>使用范围： 全局变量 &gt; 闭包变量 &gt; 局部变量</li></ul><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">sum0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">sum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        z <span class="token operator">=</span> <span class="token number">3</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z    <span class="token keyword">return</span> sum1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum0<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li><strong>此处的y就是一个闭包变量。它位于外部函数和内部嵌套函数之间</strong><h2 id="4-nonlocal变量"><a href="#4-nonlocal变量" class="headerlink" title="4. nonlocal变量"></a>4. nonlocal变量</h2></li></ul><p>在上面的例子中：如果想要<strong>修改</strong>闭包变量y，那么需要添加关键字nonlocal</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">sum0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">sum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        z <span class="token operator">=</span> <span class="token number">3</span>        nonlocal y        y <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z    <span class="token keyword">return</span> sum1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum0<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语法 传递元组，列表，字典值</title>
      <link href="/2020/06/06/18572.html"/>
      <url>/2020/06/06/18572.html</url>
      
        <content type="html"><![CDATA[<h1 id="python语法-传递元组，列表，字典值"><a href="#python语法-传递元组，列表，字典值" class="headerlink" title="python语法 传递元组，列表，字典值"></a>python语法 传递元组，列表，字典值</h1><h2 id="一、传递元组"><a href="#一、传递元组" class="headerlink" title="一、传递元组"></a>一、传递元组</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">watermelon</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> attributeswm <span class="token operator">=</span> watermelon<span class="token punctuation">(</span><span class="token string">'西瓜'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'甜'</span><span class="token punctuation">,</span> <span class="token string">'圆形'</span><span class="token punctuation">,</span> <span class="token string">'绿色'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>wm<span class="token punctuation">)</span></code></pre><p>运行结果：<br><img src="https://i.loli.net/2020/06/06/OhmK2vlJ9oCRg45.png" alt=""></p><h2 id="二、传递列表"><a href="#二、传递列表" class="headerlink" title="二、传递列表"></a>二、传递列表</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">watermelon</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> attributeswm <span class="token operator">=</span> watermelon<span class="token punctuation">(</span><span class="token string">'西瓜'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'甜'</span><span class="token punctuation">,</span> <span class="token string">'圆形'</span><span class="token punctuation">,</span> <span class="token string">'绿色'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>wm<span class="token punctuation">)</span></code></pre><p>运行结果：<br><img src="https://i.loli.net/2020/06/06/DdgK7ZpjyXTIika.png" alt=""></p><h2 id="三、传递字典"><a href="#三、传递字典" class="headerlink" title="三、传递字典"></a>三、传递字典</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">watermelon</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> attributeswm <span class="token operator">=</span> watermelon<span class="token punctuation">(</span><span class="token string">'西瓜'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'taste'</span><span class="token punctuation">:</span><span class="token string">'甜'</span><span class="token punctuation">,</span> <span class="token string">'shape'</span><span class="token punctuation">:</span><span class="token string">'圆形'</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span><span class="token string">'绿色'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>wm<span class="token punctuation">)</span></code></pre><p>运行结果：<br><img src="https://i.loli.net/2020/06/06/wVbFtIh5TJc3gzy.png" alt=""></p><h2 id="四、注意点"><a href="#四、注意点" class="headerlink" title="四、注意点"></a>四、注意点</h2><ul><li>自定义函数内部修改传递过来的元组、列表、字典后，会影响函数外部对应的变量。两者对应内存中同一个地址的对象。</li><li>采用复制列表、元组、字典的方法解决上面的问题</li></ul><h3 id="没有使用复制方法："><a href="#没有使用复制方法：" class="headerlink" title="没有使用复制方法："></a>没有使用复制方法：</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">watermelon</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">:</span>    attributes<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'少籽'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> attributesattr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'甜'</span><span class="token punctuation">,</span> <span class="token string">'圆形'</span><span class="token punctuation">,</span> <span class="token string">'绿色'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>attr1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>attr1<span class="token punctuation">)</span><span class="token punctuation">)</span>attr2 <span class="token operator">=</span> watermelon<span class="token punctuation">(</span><span class="token string">'西瓜'</span><span class="token punctuation">,</span> attr1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>attr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>attr2<span class="token punctuation">)</span></code></pre><p>运行结果：<br><img src="https://pic.downk.cc/item/5edb0f13c2a9a83be5d7c6a7.jpg" alt=""></p><h3 id="使用复制的方法"><a href="#使用复制的方法" class="headerlink" title="使用复制的方法"></a>使用复制的方法</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">watermelon</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">:</span>    attributes<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'少籽'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> attributesattr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'甜'</span><span class="token punctuation">,</span> <span class="token string">'圆形'</span><span class="token punctuation">,</span> <span class="token string">'绿色'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>attr1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>attr1<span class="token punctuation">)</span><span class="token punctuation">)</span>attr2 <span class="token operator">=</span> watermelon<span class="token punctuation">(</span><span class="token string">'西瓜'</span><span class="token punctuation">,</span> attr1<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>attr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>attr2<span class="token punctuation">)</span></code></pre><p>运行结果：<br><img src="https://pic.downk.cc/item/5edb1027c2a9a83be5da5da6.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 128 最长连续序列</title>
      <link href="/2020/06/06/31522.html"/>
      <url>/2020/06/06/31522.html</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-128-最长连续序列"><a href="#LeetCode-128-最长连续序列" class="headerlink" title="LeetCode 128 最长连续序列"></a>LeetCode 128 最长连续序列</h1><p>给定一个未排序的整数数组，找出最长连续序列的长度。</p><p>要求算法的时间复杂度为 O(n)。</p><p>示例:</p><p>输入: [100, 4, 200, 1, 3, 2]<br>输出: 4<br>解释: 最长连续序列是 [1, 2, 3, 4]。它的长度为 4。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-consecutive-sequence" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-consecutive-sequence</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。  </p><p><strong>我的思路</strong>：  </p><ul><li>保存最大值和最小值，使用桶的思想，将最小元素放入第一个位置。List长度为max - min + 1。但是经过验证，数据max - min + 1值非常大，造成内存溢出。</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestConsecutive</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: int        """</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        maxnum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        minnum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            <span class="token keyword">if</span> num <span class="token operator">></span> maxnum<span class="token punctuation">:</span>                maxnum <span class="token operator">=</span> num            <span class="token keyword">if</span> num <span class="token operator">&lt;</span> minnum<span class="token punctuation">:</span>                minnum <span class="token operator">=</span> num        has <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>maxnum <span class="token operator">-</span> minnum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            has<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            has<span class="token punctuation">[</span>num<span class="token operator">-</span>minnum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>        maxlen <span class="token operator">=</span> <span class="token number">1</span>        templen <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> has<span class="token punctuation">:</span>            <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                templen <span class="token operator">=</span> templen <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">if</span> templen <span class="token operator">></span> maxlen<span class="token punctuation">:</span>                    maxlen <span class="token operator">=</span> templen            <span class="token keyword">else</span><span class="token punctuation">:</span>                templen <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">return</span> maxlen</code></pre><p><strong>官网题解：</strong>  思路清晰<br><img src="https://i.loli.net/2020/06/06/RfiVgwJumsUrte2.png" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestConsecutive</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: int        """</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        numset <span class="token operator">=</span> set<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 时间复杂度O(n)</span>        maxlen <span class="token operator">=</span> <span class="token number">1</span>        curlen <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> numset<span class="token punctuation">:</span>            <span class="token keyword">if</span> num <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">in</span> numset<span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                curlen <span class="token operator">=</span> <span class="token number">1</span>                nextnum <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">while</span> nextnum <span class="token keyword">in</span> numset<span class="token punctuation">:</span>                    curlen <span class="token operator">=</span> curlen <span class="token operator">+</span> <span class="token number">1</span>                    nextnum <span class="token operator">=</span> nextnum <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">if</span> curlen <span class="token operator">></span> maxlen<span class="token punctuation">:</span>                    maxlen <span class="token operator">=</span> curlen        <span class="token keyword">return</span> maxlen</code></pre>]]></content>
      
      
      <categories>
          
          <category> 基础算法练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语法 不定长参数</title>
      <link href="/2020/06/05/10789.html"/>
      <url>/2020/06/05/10789.html</url>
      
        <content type="html"><![CDATA[<h1 id="python语法-不定长参数"><a href="#python语法-不定长参数" class="headerlink" title="python语法 不定长参数"></a>python语法 不定长参数</h1><h3 id="一、任意数量的参数值"><a href="#一、任意数量的参数值" class="headerlink" title="一、任意数量的参数值"></a>一、任意数量的参数值</h3><p>特点：一个函数只能有一个该参数，且只能放在最右边。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">watermelon</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token operator">*</span>attributes<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> attribute <span class="token keyword">in</span> attributes<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span>watermelon<span class="token punctuation">(</span><span class="token string">"西瓜"</span><span class="token punctuation">,</span> <span class="token string">"厚皮"</span><span class="token punctuation">,</span> <span class="token string">"少籽"</span><span class="token punctuation">,</span> <span class="token string">"甜"</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2020/06/05/IbNR5PsqhfxOXiW.png" alt="运行结果"></p><h3 id="二、任意数量的键值对"><a href="#二、任意数量的键值对" class="headerlink" title="二、任意数量的键值对"></a>二、任意数量的键值对</h3><p>特点：用法和前面的相同，但是传递的键值对。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">watermelon</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token operator">**</span>attributes<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> attribute <span class="token keyword">in</span> attributes<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span>watermelon<span class="token punctuation">(</span><span class="token string">"西瓜"</span><span class="token punctuation">,</span> attribute1<span class="token operator">=</span><span class="token string">"厚皮"</span><span class="token punctuation">,</span> attribute2<span class="token operator">=</span><span class="token string">"少籽"</span><span class="token punctuation">,</span> attribute3<span class="token operator">=</span><span class="token string">"甜"</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2020/06/05/lRXEdeaLMu47oW8.png" alt="运行结果"></p>]]></content>
      
      
      <categories>
          
          <category> python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 29.顺时针打印矩阵</title>
      <link href="/2020/06/05/47753.html"/>
      <url>/2020/06/05/47753.html</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-29-顺时针打印矩阵"><a href="#LeetCode-29-顺时针打印矩阵" class="headerlink" title="LeetCode 29.顺时针打印矩阵"></a>LeetCode 29.顺时针打印矩阵</h1><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p><p>示例 1：</p><p>输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]<br>输出：[1,2,3,6,9,8,7,4,5]<br>示例 2：</p><p>输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]<br>输出：[1,2,3,4,8,12,11,10,9,5,6,7]</p><p>限制：</p><p>0 &lt;= matrix.length &lt;= 100<br>0 &lt;= matrix[i].length &lt;= 100</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof" target="_blank" rel="noopener">https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type matrix: List[List[int]]        :rtype: List[int]        """</span>        lenM <span class="token operator">=</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span>        <span class="token keyword">if</span> lenM <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        lenN <span class="token operator">=</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> lenN <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        i <span class="token operator">=</span> <span class="token number">0</span>        j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        change <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> change <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            change <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">while</span> j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> lenN <span class="token operator">and</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0.1</span><span class="token punctuation">:</span>                j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.1</span>                change <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">while</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> lenM <span class="token operator">and</span> matrix<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0.1</span><span class="token punctuation">:</span>                i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.1</span>                change <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">while</span> j <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">and</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0.1</span><span class="token punctuation">:</span>                j <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.1</span>                change <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">while</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">and</span> matrix<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0.1</span><span class="token punctuation">:</span>                i <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.1</span>                change <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> result</code></pre><p><img src="https://i.loli.net/2020/06/05/Coqw2Sj9ytFAKLH.png" alt="运行结果"></p>]]></content>
      
      
      <categories>
          
          <category> 基础算法练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown基础</title>
      <link href="/2020/06/04/47745.html"/>
      <url>/2020/06/04/47745.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><pre><code># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h2><ul><li><strong>加粗</strong><br>使用两个星号进行左右包围</li><li><em>斜体</em><br>使用一个星号进行左右包围</li><li><strong><em>斜体加粗</em></strong><br>使用三个星号进行左右包围</li><li><del>删除线</del><br>使用两个波浪线进行左右包围</li></ul><pre><code>**加粗***斜体****斜体加粗***~~删除线~~</code></pre><h2 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h2><blockquote><p>欢迎来南京！<br>欢迎来南京市！<br>南京欢迎您!</p></blockquote><pre><code>&gt;欢迎来南京！  欢迎来南京市！   南京欢迎您!</code></pre><p>引用可以进行嵌套：</p><blockquote><p>欢迎来南京！  </p><blockquote><p>南京欢迎您!<br>南京欢迎你！</p></blockquote></blockquote><pre><code>&gt;欢迎来南京！  &gt;&gt;南京欢迎您!  南京欢迎你！</code></pre><h2 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h2><p>连续使用三个或者三个以上的*或者-，使用-需要前面有一个空行：<br>分割线1：</p><hr><p>分割线2：</p><hr><p>分割线3:</p><hr><p>分割线4：</p><hr><pre><code>分割线1：***  分割线2：****   分割线3:--- 分割线4：----</code></pre><h2 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h2><pre><code>![图片alt](图片地址 &quot;图片title&quot;)alt是图片下面的文字，是对图片的解释。图片title是图片的标题，当鼠标移动到图片上方时候显示的内容。title可以省略</code></pre><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1591272769510&di=89aa0907917561ecd8d5e3f792d887be&imgtype=0&src=http%3A%2F%2Fhbimg.b0.upaiyun.com%2F1da23d64a0749781c691b8987caf295153a120c2fb7c-k4QrXs_fw658" alt="棉花糖" title="这是棉花糖哦！">  </p><p>上传本地图片直接点击导航栏的图片标识，然后选择图片。<br><a href="https://www.jianshu.com/p/ea1eb11db63f" target="_blank" rel="noopener">图床的使用</a></p><h2 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h2><p>语法：</p><pre><code>[超链接名称](超链接地址 &quot;超链接title&quot;)title是可选的内容</code></pre><p>例如：<br><a href="https://www.baidu.com/" target="_blank" rel="noopener">百度官网地址</a><br><a href="https://www.nju.edu.cn/" target="_blank" rel="noopener" title="这是百度的官网哦">百度官网地址</a>  </p><pre><code>[百度官网地址](https://www.baidu.com/)  [百度官网地址](https://www.nju.edu.cn/ &quot;这是百度的官网哦&quot;) </code></pre><p>注意：不支持链接在新的页面打开，简书做了处理是可以的。如果想要打开新的页面使用下面的语法：  </p><pre><code>&lt;a href=&quot;超链接的地址&quot; target=&quot;_blank&quot;&gt;超链接名称&lt;/a&gt;  &lt;a href=&quot;www.baidu.com/&quot; target=&quot;_blank&quot;&gt;百度官网&lt;/a&gt;</code></pre><p><a href="www.baidu.com/" target="_blank">百度官网</a></p><h2 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a><strong>无序列表</strong></h3><p>语法：<br>使用+ - *任何一种都是可以的：</p><pre><code>- 狗子1号+ 狗子2号* 狗子3号</code></pre><ul><li>狗子1号</li></ul><ul><li>狗子2号</li></ul><ul><li>狗子3号<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a><strong>有序列表</strong></h3>语法：<br>数字加点  </li></ul><pre><code>1. 狗子一号2. 狗子二号3. 狗子三号</code></pre><ol><li>狗子一号</li><li>狗子二号</li><li>狗子三号<h3 id="列表的嵌套"><a href="#列表的嵌套" class="headerlink" title="列表的嵌套"></a><strong>列表的嵌套</strong></h3>语法：<br>上一级和下一级之间敲三个空格即可</li></ol><ul><li>这是第一级<ul><li>这是第二级<ul><li>这是第三级</li></ul></li></ul></li></ul><pre><code>- 这是第一级   - 这是第二级      - 这是第三级</code></pre><ul><li>这是第一级第一个元素</li><li>这是第一级第二个元素<ol><li>这是第二级第一个元素</li><li>这是第二级第二个元素</li><li>这是第二级第三个元素<ul><li>这是第三级第一个元素</li><li>这是第三季第二个元素</li></ul></li></ol></li></ul><pre><code>* 这是第一级第一个元素* 这是第一级第二个元素   1. 这是第二级第一个元素   2. 这是第二级第二个元素   3. 这是第二级第三个元素      * 这是第三级第一个元素      * 这是第三级第二个元素</code></pre><h2 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h2><p>语法：</p><pre><code>表头|表头|表头---|:--:|--:内容|内容|内容|内容|内容|内容|</code></pre><p>示例：<br>姓名|年龄|性别<br>—|:–:|–:<br>狗子|100|女|<br>二哈|100|女|</p><h2 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h2><p>语法：<br>当行代码：代码使用`左右包起来</p><pre><code>`int main(void)`</code></pre><p><code>int main(void)</code><br>多行代码：使用三个反引号左右包起来</p><pre><code>#include&lt;stdio.h&gt;int main(void){    printf(&quot;Hello world&quot;);}</code></pre><h2 id="十、补充"><a href="#十、补充" class="headerlink" title="十、补充"></a>十、补充</h2><ul><li><p>两个空格 + 回车 = 换行<br>eg.markdown直接换行是没有效果的</p></li><li><p>使用<code>&lt;font color=&quot;red&quot;&gt;中间写上想说的话&lt;/font&gt;</code>修改字体的颜色。例如：<br> <font color="red">中间写上想说的话</font></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo提交文章方式</title>
      <link href="/2020/06/04/16107.html"/>
      <url>/2020/06/04/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
