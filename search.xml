<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python语法 类的基本语法</title>
      <link href="/2020/06/06/15377.html"/>
      <url>/2020/06/06/15377.html</url>
      
        <content type="html"><![CDATA[<h1 id="python语法-类的基本语法"><a href="#python语法-类的基本语法" class="headerlink" title="python语法 类的基本语法"></a>python语法 类的基本语法</h1><h2 id="一、类的格式"><a href="#一、类的格式" class="headerlink" title="一、类的格式"></a>一、类的格式</h2><ul><li>类的第一行格式  </li><li><em><code>class 类名():</code>*</em></li><li>类文档说明，使用三个单引号</li><li>类函数：或者叫做类方法，这种方法必须依赖类或者实例而存在。</li><li><code>__init__</code> 是类的构造函数，例子如下：  </li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 必须加上self</span>    name <span class="token operator">=</span> <span class="token string">"西瓜"</span></code></pre><ul><li><p>self关键字作用：用于传输示例对象，实际上传递的是实例对象在<strong>内存中的一个地址</strong>。调用实例的方法时候，self是<strong>隐形</strong>传递的。</p><p>例子:</p></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">watermelon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>attributes <span class="token operator">=</span> attributes    <span class="token keyword">def</span> <span class="token function">disp</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> attribute <span class="token keyword">in</span> self<span class="token punctuation">.</span>attributes<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span>watermelon <span class="token operator">=</span> watermelon<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'绿色'</span><span class="token punctuation">,</span> <span class="token string">'甜的'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>watermelon<span class="token punctuation">.</span>disp<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行结果：<br><img src="https://pic.downk.cc/item/5edb3892c2a9a83be5437326.jpg" alt=""></p><h2 id="二、类的属性和方法"><a href="#二、类的属性和方法" class="headerlink" title="二、类的属性和方法"></a>二、类的属性和方法</h2><ul><li>属性的调用格式：<br><code>实例名.属性名</code></li><li>方法的调用格式：<br><code>实例名.方法名()</code></li></ul><h2 id="三、类的改造（继承、重写方法）"><a href="#三、类的改造（继承、重写方法）" class="headerlink" title="三、类的改造（继承、重写方法）"></a>三、类的改造（继承、重写方法）</h2><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li>继承的格式1：<br><code>class 子类名(父类名)</code></li><li>继承的格式2：<br><code>class 子类名(父类名1, 父类名2, 父类名3)</code></li></ul><p>例子：  </p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">watermelon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>attributes <span class="token operator">=</span> attributes    <span class="token keyword">def</span> <span class="token function">disp</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> attribute <span class="token keyword">in</span> attributes<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">bigwatermelon</span><span class="token punctuation">(</span>watermelon<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attributes<span class="token punctuation">,</span> newattribute<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>attributes<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>newattribute <span class="token operator">=</span> newattribute    <span class="token keyword">def</span> <span class="token function">disp</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 重写方法</span>        <span class="token keyword">for</span> attribute <span class="token keyword">in</span> self<span class="token punctuation">.</span>attributes<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>newattribute<span class="token punctuation">)</span>bigwatermelon <span class="token operator">=</span> bigwatermelon<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'绿色'</span><span class="token punctuation">,</span> <span class="token string">'甜的'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'大的'</span><span class="token punctuation">)</span>bigwatermelon<span class="token punctuation">.</span>disp<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="重写方法"><a href="#重写方法" class="headerlink" title="重写方法"></a>重写方法</h3><ul><li>要求：子类的方法名称和父类方法名称相同</li></ul><h2 id="四、私有"><a href="#四、私有" class="headerlink" title="四、私有"></a>四、私有</h2><ul><li>让类定义的 <strong>函数</strong> or <strong>变量</strong> 变成 <strong>私有</strong> ，只需要在它的名称前面加上双下划线即可。 </li></ul><h2 id="五、把类放到模块当中"><a href="#五、把类放到模块当中" class="headerlink" title="五、把类放到模块当中"></a>五、把类放到模块当中</h2><ul><li>将类的信息保存到xxx.py文件中。使用下面方法导入该xxx.py文件中的所有类：<br><code>from  xxx import *   # 从xxx模块中导入所有类</code><br><code>import xxx as yyy   # 导入xxx模块并简称为yyy</code><br><code>from xxx import clazz   # 从xxx模块中导入clazz这个类</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语法 匿名函数</title>
      <link href="/2020/06/06/34114.html"/>
      <url>/2020/06/06/34114.html</url>
      
        <content type="html"><![CDATA[<h1 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h1><h2 id="匿名函数特点"><a href="#匿名函数特点" class="headerlink" title="匿名函数特点"></a>匿名函数特点</h2><ul><li>匿名函数的格式<br><code>lambda [para1, para2, ...]: expression</code></li><li>labmbda函数没有函数名称</li><li>函数的参数是可选的，可以是任意类型的</li><li>expression实现匿名函数的功能，并返回结果，具有return的功能</li><li>整个匿名函数在一行内实现所有功能</li></ul><pre class=" language-python"><code class="language-python">sum <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">*</span>xnums <span class="token operator">=</span> <span class="token punctuation">[</span>sum<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span></code></pre><p>运行结果：<br><strong>[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</strong></p><h2 id="匿名函数高级使用方法：把匿名函数作为一个函数参数"><a href="#匿名函数高级使用方法：把匿名函数作为一个函数参数" class="headerlink" title="匿名函数高级使用方法：把匿名函数作为一个函数参数"></a>匿名函数高级使用方法：把匿名函数作为一个函数参数</h2><p><strong>优点</strong>  </p><ul><li>在调用函数的时候，可以随时修改lambda函数的逻辑表达式来改变函数的逻辑</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">:</span>    nums <span class="token operator">=</span> <span class="token punctuation">[</span>method<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> nums<span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="匿名函数高级使用方法：-动态传入匿名函数"><a href="#匿名函数高级使用方法：-动态传入匿名函数" class="headerlink" title="匿名函数高级使用方法： 动态传入匿名函数"></a>匿名函数高级使用方法： 动态传入匿名函数</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">:</span>    nums <span class="token operator">=</span> <span class="token punctuation">[</span>method<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> numss <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入匿名函数表达式："</span><span class="token punctuation">)</span>method <span class="token operator">=</span> eval<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果：<br><img src="https://pic.downk.cc/item/5edb2ca4c2a9a83be5222d92.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语法 函数和变量作用域</title>
      <link href="/2020/06/06/10740.html"/>
      <url>/2020/06/06/10740.html</url>
      
        <content type="html"><![CDATA[<h1 id="python语法-函数和变量作用域"><a href="#python语法-函数和变量作用域" class="headerlink" title="python语法 函数和变量作用域"></a>python语法 函数和变量作用域</h1><h2 id="1-全局变量和局部变量"><a href="#1-全局变量和局部变量" class="headerlink" title="1. 全局变量和局部变量"></a>1. 全局变量和局部变量</h2><ul><li>全局变量自定义赋值开始，后续代码都可以访问变量</li><li>局部变量只能在被定义的函数和类内部被访问</li><li>不提倡在函数中直接引用全局变量</li><li>变量的作用范围与变量的赋值位置紧密相关，例如: a是后续代码的全部变量，b是后续代码的全局变量</li></ul><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    b <span class="token operator">=</span> <span class="token number">100</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">return</span> bb <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5edb13abc2a9a83be5e13465.jpg" alt="运行结果"></p><p><strong>局部变量特点：</strong></p><h2 id="2-global关键字"><a href="#2-global关键字" class="headerlink" title="2. global关键字"></a>2. global关键字</h2><ul><li><strong>函数内部默认只能读全局变量，如果想要修改，需要使用global关键字</strong></li></ul><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> x<span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://pic.downk.cc/item/5edb174fc2a9a83be5e79be6.jpg" alt="没有使用global产生的报错"></p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> x    x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> x<span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果： 2</p><h2 id="3-闭包"><a href="#3-闭包" class="headerlink" title="3. 闭包"></a>3. 闭包</h2><ul><li>介于全局变量和局部变量之间</li><li>使用范围： 全局变量 &gt; 闭包变量 &gt; 局部变量</li></ul><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">sum0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">sum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        z <span class="token operator">=</span> <span class="token number">3</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z    <span class="token keyword">return</span> sum1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum0<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li><strong>此处的y就是一个闭包变量。它位于外部函数和内部嵌套函数之间</strong><h2 id="4-nonlocal变量"><a href="#4-nonlocal变量" class="headerlink" title="4. nonlocal变量"></a>4. nonlocal变量</h2></li></ul><p>在上面的例子中：如果想要<strong>修改</strong>闭包变量y，那么需要添加关键字nonlocal</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">sum0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">sum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        z <span class="token operator">=</span> <span class="token number">3</span>        nonlocal y        y <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z    <span class="token keyword">return</span> sum1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum0<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语法 传递元组，列表，字典值</title>
      <link href="/2020/06/06/18572.html"/>
      <url>/2020/06/06/18572.html</url>
      
        <content type="html"><![CDATA[<h1 id="python语法-传递元组，列表，字典值"><a href="#python语法-传递元组，列表，字典值" class="headerlink" title="python语法 传递元组，列表，字典值"></a>python语法 传递元组，列表，字典值</h1><h2 id="一、传递元组"><a href="#一、传递元组" class="headerlink" title="一、传递元组"></a>一、传递元组</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">watermelon</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> attributeswm <span class="token operator">=</span> watermelon<span class="token punctuation">(</span><span class="token string">'西瓜'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'甜'</span><span class="token punctuation">,</span> <span class="token string">'圆形'</span><span class="token punctuation">,</span> <span class="token string">'绿色'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>wm<span class="token punctuation">)</span></code></pre><p>运行结果：<br><img src="https://i.loli.net/2020/06/06/OhmK2vlJ9oCRg45.png" alt=""></p><h2 id="二、传递列表"><a href="#二、传递列表" class="headerlink" title="二、传递列表"></a>二、传递列表</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">watermelon</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> attributeswm <span class="token operator">=</span> watermelon<span class="token punctuation">(</span><span class="token string">'西瓜'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'甜'</span><span class="token punctuation">,</span> <span class="token string">'圆形'</span><span class="token punctuation">,</span> <span class="token string">'绿色'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>wm<span class="token punctuation">)</span></code></pre><p>运行结果：<br><img src="https://i.loli.net/2020/06/06/DdgK7ZpjyXTIika.png" alt=""></p><h2 id="三、传递字典"><a href="#三、传递字典" class="headerlink" title="三、传递字典"></a>三、传递字典</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">watermelon</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> attributeswm <span class="token operator">=</span> watermelon<span class="token punctuation">(</span><span class="token string">'西瓜'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'taste'</span><span class="token punctuation">:</span><span class="token string">'甜'</span><span class="token punctuation">,</span> <span class="token string">'shape'</span><span class="token punctuation">:</span><span class="token string">'圆形'</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span><span class="token string">'绿色'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>wm<span class="token punctuation">)</span></code></pre><p>运行结果：<br><img src="https://i.loli.net/2020/06/06/wVbFtIh5TJc3gzy.png" alt=""></p><h2 id="四、注意点"><a href="#四、注意点" class="headerlink" title="四、注意点"></a>四、注意点</h2><ul><li>自定义函数内部修改传递过来的元组、列表、字典后，会影响函数外部对应的变量。两者对应内存中同一个地址的对象。</li><li>采用复制列表、元组、字典的方法解决上面的问题</li></ul><h3 id="没有使用复制方法："><a href="#没有使用复制方法：" class="headerlink" title="没有使用复制方法："></a>没有使用复制方法：</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">watermelon</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">:</span>    attributes<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'少籽'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> attributesattr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'甜'</span><span class="token punctuation">,</span> <span class="token string">'圆形'</span><span class="token punctuation">,</span> <span class="token string">'绿色'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>attr1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>attr1<span class="token punctuation">)</span><span class="token punctuation">)</span>attr2 <span class="token operator">=</span> watermelon<span class="token punctuation">(</span><span class="token string">'西瓜'</span><span class="token punctuation">,</span> attr1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>attr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>attr2<span class="token punctuation">)</span></code></pre><p>运行结果：<br><img src="https://pic.downk.cc/item/5edb0f13c2a9a83be5d7c6a7.jpg" alt=""></p><h3 id="使用复制的方法"><a href="#使用复制的方法" class="headerlink" title="使用复制的方法"></a>使用复制的方法</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">watermelon</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">:</span>    attributes<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'少籽'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> attributesattr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'甜'</span><span class="token punctuation">,</span> <span class="token string">'圆形'</span><span class="token punctuation">,</span> <span class="token string">'绿色'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>attr1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>attr1<span class="token punctuation">)</span><span class="token punctuation">)</span>attr2 <span class="token operator">=</span> watermelon<span class="token punctuation">(</span><span class="token string">'西瓜'</span><span class="token punctuation">,</span> attr1<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>attr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>attr2<span class="token punctuation">)</span></code></pre><p>运行结果：<br><img src="https://pic.downk.cc/item/5edb1027c2a9a83be5da5da6.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 128 最长连续序列</title>
      <link href="/2020/06/06/31522.html"/>
      <url>/2020/06/06/31522.html</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-128-最长连续序列"><a href="#LeetCode-128-最长连续序列" class="headerlink" title="LeetCode 128 最长连续序列"></a>LeetCode 128 最长连续序列</h1><p>给定一个未排序的整数数组，找出最长连续序列的长度。</p><p>要求算法的时间复杂度为 O(n)。</p><p>示例:</p><p>输入: [100, 4, 200, 1, 3, 2]<br>输出: 4<br>解释: 最长连续序列是 [1, 2, 3, 4]。它的长度为 4。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-consecutive-sequence" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-consecutive-sequence</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。  </p><p><strong>我的思路</strong>：  </p><ul><li>保存最大值和最小值，使用桶的思想，将最小元素放入第一个位置。List长度为max - min + 1。但是经过验证，数据max - min + 1值非常大，造成内存溢出。</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestConsecutive</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: int        """</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        maxnum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        minnum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            <span class="token keyword">if</span> num <span class="token operator">></span> maxnum<span class="token punctuation">:</span>                maxnum <span class="token operator">=</span> num            <span class="token keyword">if</span> num <span class="token operator">&lt;</span> minnum<span class="token punctuation">:</span>                minnum <span class="token operator">=</span> num        has <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>maxnum <span class="token operator">-</span> minnum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            has<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            has<span class="token punctuation">[</span>num<span class="token operator">-</span>minnum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>        maxlen <span class="token operator">=</span> <span class="token number">1</span>        templen <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> has<span class="token punctuation">:</span>            <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                templen <span class="token operator">=</span> templen <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">if</span> templen <span class="token operator">></span> maxlen<span class="token punctuation">:</span>                    maxlen <span class="token operator">=</span> templen            <span class="token keyword">else</span><span class="token punctuation">:</span>                templen <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">return</span> maxlen</code></pre><p><strong>官网题解：</strong>  思路清晰<br><img src="https://i.loli.net/2020/06/06/RfiVgwJumsUrte2.png" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestConsecutive</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: int        """</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        numset <span class="token operator">=</span> set<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 时间复杂度O(n)</span>        maxlen <span class="token operator">=</span> <span class="token number">1</span>        curlen <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> numset<span class="token punctuation">:</span>            <span class="token keyword">if</span> num <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">in</span> numset<span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                curlen <span class="token operator">=</span> <span class="token number">1</span>                nextnum <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">while</span> nextnum <span class="token keyword">in</span> numset<span class="token punctuation">:</span>                    curlen <span class="token operator">=</span> curlen <span class="token operator">+</span> <span class="token number">1</span>                    nextnum <span class="token operator">=</span> nextnum <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">if</span> curlen <span class="token operator">></span> maxlen<span class="token punctuation">:</span>                    maxlen <span class="token operator">=</span> curlen        <span class="token keyword">return</span> maxlen</code></pre>]]></content>
      
      
      <categories>
          
          <category> 基础算法练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语法 不定长参数</title>
      <link href="/2020/06/05/10789.html"/>
      <url>/2020/06/05/10789.html</url>
      
        <content type="html"><![CDATA[<h1 id="python语法-不定长参数"><a href="#python语法-不定长参数" class="headerlink" title="python语法 不定长参数"></a>python语法 不定长参数</h1><h3 id="一、任意数量的参数值"><a href="#一、任意数量的参数值" class="headerlink" title="一、任意数量的参数值"></a>一、任意数量的参数值</h3><p>特点：一个函数只能有一个该参数，且只能放在最右边。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">watermelon</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token operator">*</span>attributes<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> attribute <span class="token keyword">in</span> attributes<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span>watermelon<span class="token punctuation">(</span><span class="token string">"西瓜"</span><span class="token punctuation">,</span> <span class="token string">"厚皮"</span><span class="token punctuation">,</span> <span class="token string">"少籽"</span><span class="token punctuation">,</span> <span class="token string">"甜"</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2020/06/05/IbNR5PsqhfxOXiW.png" alt="运行结果"></p><h3 id="二、任意数量的键值对"><a href="#二、任意数量的键值对" class="headerlink" title="二、任意数量的键值对"></a>二、任意数量的键值对</h3><p>特点：用法和前面的相同，但是传递的键值对。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">watermelon</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token operator">**</span>attributes<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> attribute <span class="token keyword">in</span> attributes<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span>watermelon<span class="token punctuation">(</span><span class="token string">"西瓜"</span><span class="token punctuation">,</span> attribute1<span class="token operator">=</span><span class="token string">"厚皮"</span><span class="token punctuation">,</span> attribute2<span class="token operator">=</span><span class="token string">"少籽"</span><span class="token punctuation">,</span> attribute3<span class="token operator">=</span><span class="token string">"甜"</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2020/06/05/lRXEdeaLMu47oW8.png" alt="运行结果"></p>]]></content>
      
      
      <categories>
          
          <category> python语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 29.顺时针打印矩阵</title>
      <link href="/2020/06/05/47753.html"/>
      <url>/2020/06/05/47753.html</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-29-顺时针打印矩阵"><a href="#LeetCode-29-顺时针打印矩阵" class="headerlink" title="LeetCode 29.顺时针打印矩阵"></a>LeetCode 29.顺时针打印矩阵</h1><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p><p>示例 1：</p><p>输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]<br>输出：[1,2,3,6,9,8,7,4,5]<br>示例 2：</p><p>输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]<br>输出：[1,2,3,4,8,12,11,10,9,5,6,7]</p><p>限制：</p><p>0 &lt;= matrix.length &lt;= 100<br>0 &lt;= matrix[i].length &lt;= 100</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof" target="_blank" rel="noopener">https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type matrix: List[List[int]]        :rtype: List[int]        """</span>        lenM <span class="token operator">=</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span>        <span class="token keyword">if</span> lenM <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        lenN <span class="token operator">=</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> lenN <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        i <span class="token operator">=</span> <span class="token number">0</span>        j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        change <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> change <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            change <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">while</span> j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> lenN <span class="token operator">and</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0.1</span><span class="token punctuation">:</span>                j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.1</span>                change <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">while</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> lenM <span class="token operator">and</span> matrix<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0.1</span><span class="token punctuation">:</span>                i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.1</span>                change <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">while</span> j <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">and</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0.1</span><span class="token punctuation">:</span>                j <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.1</span>                change <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">while</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">and</span> matrix<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0.1</span><span class="token punctuation">:</span>                i <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.1</span>                change <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> result</code></pre><p><img src="https://i.loli.net/2020/06/05/Coqw2Sj9ytFAKLH.png" alt="运行结果"></p>]]></content>
      
      
      <categories>
          
          <category> 基础算法练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown基础</title>
      <link href="/2020/06/04/47745.html"/>
      <url>/2020/06/04/47745.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><pre><code># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h2><ul><li><strong>加粗</strong><br>使用两个星号进行左右包围</li><li><em>斜体</em><br>使用一个星号进行左右包围</li><li><strong><em>斜体加粗</em></strong><br>使用三个星号进行左右包围</li><li><del>删除线</del><br>使用两个波浪线进行左右包围</li></ul><pre><code>**加粗***斜体****斜体加粗***~~删除线~~</code></pre><h2 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h2><blockquote><p>欢迎来南京！<br>欢迎来南京市！<br>南京欢迎您!</p></blockquote><pre><code>&gt;欢迎来南京！  欢迎来南京市！   南京欢迎您!</code></pre><p>引用可以进行嵌套：</p><blockquote><p>欢迎来南京！  </p><blockquote><p>南京欢迎您!<br>南京欢迎你！</p></blockquote></blockquote><pre><code>&gt;欢迎来南京！  &gt;&gt;南京欢迎您!  南京欢迎你！</code></pre><h2 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h2><p>连续使用三个或者三个以上的*或者-，使用-需要前面有一个空行：<br>分割线1：</p><hr><p>分割线2：</p><hr><p>分割线3:</p><hr><p>分割线4：</p><hr><pre><code>分割线1：***  分割线2：****   分割线3:--- 分割线4：----</code></pre><h2 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h2><pre><code>![图片alt](图片地址 &quot;图片title&quot;)alt是图片下面的文字，是对图片的解释。图片title是图片的标题，当鼠标移动到图片上方时候显示的内容。title可以省略</code></pre><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1591272769510&di=89aa0907917561ecd8d5e3f792d887be&imgtype=0&src=http%3A%2F%2Fhbimg.b0.upaiyun.com%2F1da23d64a0749781c691b8987caf295153a120c2fb7c-k4QrXs_fw658" alt="棉花糖" title="这是棉花糖哦！">  </p><p>上传本地图片直接点击导航栏的图片标识，然后选择图片。<br><a href="https://www.jianshu.com/p/ea1eb11db63f" target="_blank" rel="noopener">图床的使用</a></p><h2 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h2><p>语法：</p><pre><code>[超链接名称](超链接地址 &quot;超链接title&quot;)title是可选的内容</code></pre><p>例如：<br><a href="https://www.baidu.com/" target="_blank" rel="noopener">百度官网地址</a><br><a href="https://www.nju.edu.cn/" target="_blank" rel="noopener" title="这是百度的官网哦">百度官网地址</a>  </p><pre><code>[百度官网地址](https://www.baidu.com/)  [百度官网地址](https://www.nju.edu.cn/ &quot;这是百度的官网哦&quot;) </code></pre><p>注意：不支持链接在新的页面打开，简书做了处理是可以的。如果想要打开新的页面使用下面的语法：  </p><pre><code>&lt;a href=&quot;超链接的地址&quot; target=&quot;_blank&quot;&gt;超链接名称&lt;/a&gt;  &lt;a href=&quot;www.baidu.com/&quot; target=&quot;_blank&quot;&gt;百度官网&lt;/a&gt;</code></pre><p><a href="www.baidu.com/" target="_blank">百度官网</a></p><h2 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a><strong>无序列表</strong></h3><p>语法：<br>使用+ - *任何一种都是可以的：</p><pre><code>- 狗子1号+ 狗子2号* 狗子3号</code></pre><ul><li>狗子1号</li></ul><ul><li>狗子2号</li></ul><ul><li>狗子3号<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a><strong>有序列表</strong></h3>语法：<br>数字加点  </li></ul><pre><code>1. 狗子一号2. 狗子二号3. 狗子三号</code></pre><ol><li>狗子一号</li><li>狗子二号</li><li>狗子三号<h3 id="列表的嵌套"><a href="#列表的嵌套" class="headerlink" title="列表的嵌套"></a><strong>列表的嵌套</strong></h3>语法：<br>上一级和下一级之间敲三个空格即可</li></ol><ul><li>这是第一级<ul><li>这是第二级<ul><li>这是第三级</li></ul></li></ul></li></ul><pre><code>- 这是第一级   - 这是第二级      - 这是第三级</code></pre><ul><li>这是第一级第一个元素</li><li>这是第一级第二个元素<ol><li>这是第二级第一个元素</li><li>这是第二级第二个元素</li><li>这是第二级第三个元素<ul><li>这是第三级第一个元素</li><li>这是第三季第二个元素</li></ul></li></ol></li></ul><pre><code>* 这是第一级第一个元素* 这是第一级第二个元素   1. 这是第二级第一个元素   2. 这是第二级第二个元素   3. 这是第二级第三个元素      * 这是第三级第一个元素      * 这是第三级第二个元素</code></pre><h2 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h2><p>语法：</p><pre><code>表头|表头|表头---|:--:|--:内容|内容|内容|内容|内容|内容|</code></pre><p>示例：<br>姓名|年龄|性别<br>—|:–:|–:<br>狗子|100|女|<br>二哈|100|女|</p><h2 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h2><p>语法：<br>当行代码：代码使用`左右包起来</p><pre><code>`int main(void)`</code></pre><p><code>int main(void)</code><br>多行代码：使用三个反引号左右包起来</p><pre><code>#include&lt;stdio.h&gt;int main(void){    printf(&quot;Hello world&quot;);}</code></pre><h2 id="十、补充"><a href="#十、补充" class="headerlink" title="十、补充"></a>十、补充</h2><p>两个空格 + 回车 = 换行<br>eg.markdown直接换行是没有效果的</p>]]></content>
      
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo提交文章方式</title>
      <link href="/2020/06/04/16107.html"/>
      <url>/2020/06/04/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
